<?xml version="1.0" encoding="utf-8"?><dox:ipython_ru xsi:schemaLocation="dox.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dox="http://ipython.ru/dox/v1"><package name="django" version="(1, 3, 1, 'final', 0)" file="/django/__init__.pyc"><doc></doc>
<attribute name="core" type="module"><value><![CDATA[<module 'django.core' from '/usr/local/lib/python2.7/dist-packages/django/core/__init__.pyc'>]]></value>
</attribute>
<attribute name="db" type="module"><value><![CDATA[<module 'django.db' from '/usr/local/lib/python2.7/dist-packages/django/db/__init__.pyc'>]]></value>
</attribute>
<attribute name="dispatch" type="module"><value><![CDATA[<module 'django.dispatch' from '/usr/local/lib/python2.7/dist-packages/django/dispatch/__init__.pyc'>]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="VERSION" type="tuple"><value><![CDATA[(1, 3, 1, 'final', 0)]]></value>
</attribute>
<attribute name="conf" type="module"><value><![CDATA[<module 'django.conf' from '/usr/local/lib/python2.7/dist-packages/django/conf/__init__.pyc'>]]></value>
</attribute>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.utils' from '/usr/local/lib/python2.7/dist-packages/django/utils/__init__.pyc'>]]></value>
</attribute>
<function name="get_version"><doc></doc>
</function>
</package>
<package name="django.utils" version="&lt;module 'django.utils.version' from '/usr/local/lib/python2.7/dist-packages/django/utils/version.pyc'&gt;" file="/django/utils/__init__.pyc"><doc></doc>
<attribute name="datastructures" type="module"><value><![CDATA[<module 'django.utils.datastructures' from '/usr/local/lib/python2.7/dist-packages/django/utils/datastructures.pyc'>]]></value>
</attribute>
<attribute name="encoding" type="module"><value><![CDATA[<module 'django.utils.encoding' from '/usr/local/lib/python2.7/dist-packages/django/utils/encoding.pyc'>]]></value>
</attribute>
<attribute name="tree" type="module"><value><![CDATA[<module 'django.utils.tree' from '/usr/local/lib/python2.7/dist-packages/django/utils/tree.pyc'>]]></value>
</attribute>
<attribute name="functional" type="module"><value><![CDATA[<module 'django.utils.functional' from '/usr/local/lib/python2.7/dist-packages/django/utils/functional.pyc'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="numberformat" type="module"><value><![CDATA[<module 'django.utils.numberformat' from '/usr/local/lib/python2.7/dist-packages/django/utils/numberformat.pyc'>]]></value>
</attribute>
<attribute name="version" type="module"><value><![CDATA[<module 'django.utils.version' from '/usr/local/lib/python2.7/dist-packages/django/utils/version.pyc'>]]></value>
</attribute>
<attribute name="text" type="module"><value><![CDATA[<module 'django.utils.text' from '/usr/local/lib/python2.7/dist-packages/django/utils/text.pyc'>]]></value>
</attribute>
<attribute name="tzinfo" type="module"><value><![CDATA[<module 'django.utils.tzinfo' from '/usr/local/lib/python2.7/dist-packages/django/utils/tzinfo.pyc'>]]></value>
</attribute>
<attribute name="decorators" type="module"><value><![CDATA[<module 'django.utils.decorators' from '/usr/local/lib/python2.7/dist-packages/django/utils/decorators.pyc'>]]></value>
</attribute>
<attribute name="http" type="module"><value><![CDATA[<module 'django.utils.http' from '/usr/local/lib/python2.7/dist-packages/django/utils/http.pyc'>]]></value>
</attribute>
<attribute name="dateformat" type="module"><value><![CDATA[<module 'django.utils.dateformat' from '/usr/local/lib/python2.7/dist-packages/django/utils/dateformat.pyc'>]]></value>
</attribute>
<attribute name="termcolors" type="module"><value><![CDATA[<module 'django.utils.termcolors' from '/usr/local/lib/python2.7/dist-packages/django/utils/termcolors.pyc'>]]></value>
</attribute>
<attribute name="translation" type="module"><value><![CDATA[<module 'django.utils.translation' from '/usr/local/lib/python2.7/dist-packages/django/utils/translation/__init__.pyc'>]]></value>
</attribute>
<attribute name="log" type="module"><value><![CDATA[<module 'django.utils.log' from '/usr/local/lib/python2.7/dist-packages/django/utils/log.pyc'>]]></value>
</attribute>
<attribute name="dates" type="module"><value><![CDATA[<module 'django.utils.dates' from '/usr/local/lib/python2.7/dist-packages/django/utils/dates.pyc'>]]></value>
</attribute>
<attribute name="module_loading" type="module"><value><![CDATA[<module 'django.utils.module_loading' from '/usr/local/lib/python2.7/dist-packages/django/utils/module_loading.pyc'>]]></value>
</attribute>
<attribute name="_os" type="module"><value><![CDATA[<module 'django.utils._os' from '/usr/local/lib/python2.7/dist-packages/django/utils/_os.pyc'>]]></value>
</attribute>
<attribute name="copycompat" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="safestring" type="module"><value><![CDATA[<module 'django.utils.safestring' from '/usr/local/lib/python2.7/dist-packages/django/utils/safestring.pyc'>]]></value>
</attribute>
<attribute name="hashcompat" type="module"><value><![CDATA[<module 'django.utils.hashcompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/hashcompat.pyc'>]]></value>
</attribute>
<attribute name="html" type="module"><value><![CDATA[<module 'django.utils.html' from '/usr/local/lib/python2.7/dist-packages/django/utils/html.pyc'>]]></value>
</attribute>
<attribute name="formats" type="module"><value><![CDATA[<module 'django.utils.formats' from '/usr/local/lib/python2.7/dist-packages/django/utils/formats.pyc'>]]></value>
</attribute>
<attribute name="itercompat" type="module"><value><![CDATA[<module 'django.utils.itercompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/itercompat.pyc'>]]></value>
</attribute>
</package>
<package name="django.utils.timesince" file="/django/utils/timesince.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="time"></depends>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_class name="LocalTimezone" module="django.utils.tzinfo"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="timeuntil"><doc><![CDATA[
    Like timesince, but returns a string measuring the time until
    the given time.
    ]]></doc>
<argument name="d"></argument>
<argument name="now" type="NoneType"><value></value>
</argument>
</function>
<function name="timesince"><doc><![CDATA[
    Takes two datetime objects and returns the time between d and now
    as a nicely formatted string, e.g. "10 minutes".  If d occurs after now,
    then "0 minutes" is returned.

    Units used are years, months, weeks, days, hours, and minutes.
    Seconds and microseconds are ignored.  Up to two adjacent units will be
    displayed.  For example, "2 weeks, 3 days" and "1 year, 3 months" are
    possible outputs, but "2 weeks, 3 hours" and "1 year, 5 days" are not.

    Adapted from http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
    ]]></doc>
<argument name="d"></argument>
<argument name="now" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.stopwords" file="/django/utils/stopwords.pyc"><doc></doc>
<attribute name="stopwords" type="list"><value><![CDATA[['i', 'a', 'an', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'how', 'in', 'is', 'it', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was', 'what', 'when', 'where']]]></value>
</attribute>
<function name="strip_stopwords"><doc><![CDATA[Removes stopwords - also normalizes whitespace]]></doc>
<argument name="sentence"></argument>
</function>
</package>
<package name="django.utils.dictconfig" file="/django/utils/dictconfig.pyc"><doc></doc>
<depends name="logging"></depends>
<depends name="sys"></depends>
<depends name="re"></depends>
<depends name="types"></depends>
<depends name="__builtin__"></depends>
<import_function name="_checkLevel" module="logging"></import_function>
<attribute name="logging" type="module"><value><![CDATA[<module 'logging' from '/usr/lib/python2.7/logging/__init__.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="IDENTIFIER" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6fa3e80>]]></value>
</attribute>
<attribute name="types" type="module"><value><![CDATA[<module 'types' from '/usr/lib/python2.7/types.pyc'>]]></value>
</attribute>
<function name="dictConfig"><doc><![CDATA[Configure logging using a dictionary.]]></doc>
<argument name="config"></argument>
</function>
<function name="valid_ident"><doc></doc>
<argument name="s"></argument>
</function>
<class name="BaseConfigurator"></class>
<doc><![CDATA[
    The configurator base class which defines some useful defaults.
    ]]></doc>
<import_attribute name="importer" type="builtin_function_or_method" module="__builtin__"></import_attribute>
<attribute name="WORD_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f3b020>]]></value>
</attribute>
<attribute name="value_converters" type="dict"><value><![CDATA[{'cfg': 'cfg_convert', 'ext': 'ext_convert'}]]></value>
</attribute>
<attribute name="DOT_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6f7fe20>]]></value>
</attribute>
<attribute name="CONVERT_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f291c0>]]></value>
</attribute>
<attribute name="DIGIT_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f19520>]]></value>
</attribute>
<attribute name="INDEX_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f5f388>]]></value>
</attribute>
<function name="ext_convert"><doc><![CDATA[Default converter for the ext:// protocol.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="as_tuple"><doc><![CDATA[Utility function which converts lists to tuples.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="configure_custom"><doc><![CDATA[Configure an object with a user-supplied factory.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="convert"><doc><![CDATA[
        Convert values to an appropriate type. dicts, lists and tuples are
        replaced by their converting alternatives. Strings are checked to
        see if they have a conversion format and are converted if they do.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="resolve"><doc><![CDATA[
        Resolve strings to objects using standard import and attribute
        syntax.
        ]]></doc>
<argument name="self"></argument>
<argument name="s"></argument>
</function>
<function name="cfg_convert"><doc><![CDATA[Default converter for the cfg:// protocol.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<class name="ConvertingTuple"></class>
<doc><![CDATA[A converting tuple wrapper.]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<class name="ConvertingDict"></class>
<doc><![CDATA[A converting dictionary wrapper.]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="pop"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<class name="ConvertingList"></class>
<doc><![CDATA[A converting list wrapper.]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="pop"><doc></doc>
<argument name="self"></argument>
<argument name="idx" type="int"><value><![CDATA[-1]]></value>
</argument>
</function>
<class name="DictConfigurator"></class>
<doc><![CDATA[
    Configure logging using a dictionary-like object to describe the
    configuration.
    ]]></doc>
<function name="configure_formatter"><doc><![CDATA[Configure a formatter from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="configure_filter"><doc><![CDATA[Configure a filter from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="configure"><doc><![CDATA[Do the configuration.]]></doc>
<argument name="self"></argument>
</function>
<function name="configure_root"><doc><![CDATA[Configure a root logger from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_filters"><doc><![CDATA[Add filters to a filterer from a list of names.]]></doc>
<argument name="self"></argument>
<argument name="filterer"></argument>
<argument name="filters"></argument>
</function>
<function name="configure_logger"><doc><![CDATA[Configure a non-root logger from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_handlers"><doc><![CDATA[Add handlers to a logger from a list of names.]]></doc>
<argument name="self"></argument>
<argument name="logger"></argument>
<argument name="handlers"></argument>
</function>
<function name="configure_handler"><doc><![CDATA[Configure a handler from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="common_logger_config"><doc><![CDATA[
        Perform configuration which is common to root and non-root loggers.
        ]]></doc>
<argument name="self"></argument>
<argument name="logger"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="dictConfigClass"></class>
<doc><![CDATA[
    Configure logging using a dictionary-like object to describe the
    configuration.
    ]]></doc>
<function name="configure_formatter"><doc><![CDATA[Configure a formatter from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="configure_filter"><doc><![CDATA[Configure a filter from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="configure"><doc><![CDATA[Do the configuration.]]></doc>
<argument name="self"></argument>
</function>
<function name="configure_root"><doc><![CDATA[Configure a root logger from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_filters"><doc><![CDATA[Add filters to a filterer from a list of names.]]></doc>
<argument name="self"></argument>
<argument name="filterer"></argument>
<argument name="filters"></argument>
</function>
<function name="configure_logger"><doc><![CDATA[Configure a non-root logger from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_handlers"><doc><![CDATA[Add handlers to a logger from a list of names.]]></doc>
<argument name="self"></argument>
<argument name="logger"></argument>
<argument name="handlers"></argument>
</function>
<function name="configure_handler"><doc><![CDATA[Configure a handler from a dictionary.]]></doc>
<argument name="self"></argument>
<argument name="config"></argument>
</function>
<function name="common_logger_config"><doc><![CDATA[
        Perform configuration which is common to root and non-root loggers.
        ]]></doc>
<argument name="self"></argument>
<argument name="logger"></argument>
<argument name="config"></argument>
<argument name="incremental" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.utils.regex_helper" file="/django/utils/regex_helper.pyc"><doc><![CDATA[
Functions for reversing a regular expression (used in reverse URL resolving).
Used internally by Django and not intended for external use.

This is not, and is not intended to be, a complete reg-exp decompiler. It
should be good enough for a large class of URLS, however.
]]></doc>
<attribute name="ESCAPE_MAPPINGS" type="dict"><value><![CDATA[{'A': None, 's': u' ', 'b': None, 'd': u'0', 'w': u'x', 'W': u'!', 'B': None, 'Z': None, 'S': u'x', 'D': u'x'}]]></value>
</attribute>
<function name="normalize"><doc><![CDATA[
    Given a reg-exp pattern, normalizes it to a list of forms that suffice for
    reverse matching. This does the following:

    (1) For any repeating sections, keeps the minimum number of occurrences
        permitted (this means zero for optional groups).
    (2) If an optional group includes parameters, include one occurrence of
        that group (along with the zero occurrence case from step (1)).
    (3) Select the first (essentially an arbitrary) element from any character
        class. Select an arbitrary character for any unordered class (e.g. '.'
        or '\w') in the pattern.
    (5) Ignore comments and any of the reg-exp flags that won't change
        what we construct ("iLmsu"). "(?x)" is an error, however.
    (6) Raise an error on all other non-capturing (?...) forms (e.g.
        look-ahead and look-behind matches) and any disjunctive ('|')
        constructs.

    Django's URLs for forward resolving are either all positional arguments or
    all keyword arguments. That is assumed here, as well. Although reverse
    resolving can be done using positional args when keyword args are
    specified, the two cannot be mixed in the same reverse() call.
    ]]></doc>
<argument name="pattern"></argument>
</function>
<function name="get_quantifier"><doc><![CDATA[
    Parse a quantifier from the input, where "ch" is the first character in the
    quantifier.

    Returns the minimum number of occurences permitted by the quantifier and
    either None or the next character from the input_iter if the next character
    is not part of the quantifier.
    ]]></doc>
<argument name="ch"></argument>
<argument name="input_iter"></argument>
</function>
<function name="contains"><doc><![CDATA[
    Returns True if the "source" contains an instance of "inst". False,
    otherwise.
    ]]></doc>
<argument name="source"></argument>
<argument name="inst"></argument>
</function>
<function name="flatten_result"><doc><![CDATA[
    Turns the given source sequence into a list of reg-exp possibilities and
    their arguments. Returns a list of strings and a list of argument lists.
    Each of the two lists will be of the same length.
    ]]></doc>
<argument name="source"></argument>
</function>
<function name="next_char"><doc><![CDATA[
    An iterator that yields the next character from "pattern_iter", respecting
    escape sequences. An escaped character is replaced by a representative of
    its class (e.g. \w -> "x"). If the escaped character is one that is
    skipped, it is not returned (the next character is returned instead).

    Yields the next character, along with a boolean indicating whether it is a
    raw (unescaped) character or not.
    ]]></doc>
<argument name="input_iter"></argument>
</function>
<function name="walk_to_end"><doc><![CDATA[
    The iterator is currently inside a capturing group. We want to walk to the
    close of this group, skipping over any nested groups and handling escaped
    parentheses correctly.
    ]]></doc>
<argument name="ch"></argument>
<argument name="input_iter"></argument>
</function>
<class name="NonCapture"></class>
<doc><![CDATA[
    Used to represent a non-capturing group in the pattern string.
    ]]></doc>
<class name="Group"></class>
<doc><![CDATA[
    Used to represent a capturing group in the pattern string.
    ]]></doc>
<class name="Choice"></class>
<doc><![CDATA[
    Used to represent multiple possibilities at this point in a pattern string.
    We use a distinguished type, rather than a list, so that the usage in the
    code is clear.
    ]]></doc>
</package>
<package name="django.utils._threading_local" file="/django/utils/_threading_local.pyc"><doc><![CDATA[Thread-local objects

(Note that this module provides a Python version of thread
 threading.local class.  Depending on the version of Python you're
 using, there may be a faster one available.  You should always import
 the local class from threading.)

Thread-local objects support the management of thread-local data.
If you have data that you want to be local to a thread, simply create
a thread-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about thread-local objects is that their data are
local to a thread. If we access the data in a different thread:

  >>> log = []
  >>> def f():
  ...     items = mydata.__dict__.items()
  ...     items.sort()
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)

  >>> import threading
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other thread
don't affect data seen in this thread:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever thread was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across threads, as they apply only to the thread they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     initialized = False
  ...     def __init__(self, **kw):
  ...         if self.initialized:
  ...             raise SystemError('__init__ called too many times')
  ...         self.initialized = True
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate thread.  This
is necessary to initialize each thread's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate thread:

  >>> log = []
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[('color', 'red'), ('initialized', True)], 11]

without affecting this thread's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not thread
local. They are shared across threads:

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate thread:

  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
]]></doc>
<depends name="threading"></depends>
<import_function name="currentThread" module="threading"></import_function>
<import_function name="RLock" module="threading"></import_function>
<import_function name="enumerate" module="threading"></import_function>
<function name="_patch"><doc></doc>
<argument name="self"></argument>
</function>
<class name="local"></class>
<doc></doc>
<function name="__del__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getattribute__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__setattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<function name="__delattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="_localbase"></class>
<doc></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x92f3ca4>]]></value>
</attribute>
<attribute name="_local__args" type="member_descriptor"><value><![CDATA[<member '_local__args' of '_localbase' objects>]]></value>
</attribute>
<attribute name="__slots__" type="tuple"><value><![CDATA[('_local__key', '_local__args', '_local__lock')]]></value>
</attribute>
<attribute name="_local__key" type="member_descriptor"><value><![CDATA[<member '_local__key' of '_localbase' objects>]]></value>
</attribute>
<attribute name="_local__lock" type="member_descriptor"><value><![CDATA[<member '_local__lock' of '_localbase' objects>]]></value>
</attribute>
</package>
<package name="django.utils.cache" file="/django/utils/cache.pyc"><doc><![CDATA[
This module contains helper functions for controlling caching. It does so by
managing the "Vary" header of responses. It includes functions to patch the
header of response objects directly and decorators that change functions to do
that header-patching themselves.

For information on the Vary header, see:

    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44

Essentially, the "Vary" HTTP header defines which headers a cache should take
into account when building its cache key. Requests with the same path but
different header content for headers named in "Vary" need to get different
cache keys to prevent delivery of wrong content.

An example: i18n middleware would need to distinguish caches by the
"Accept-language" header.
]]></doc>
<depends name="re"></depends>
<depends name="time"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="get_cache" module="django.core.cache"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="HttpRequest" module="django.http"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="cc_delim_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x92a7ac0>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="_i18n_cache_key_suffix"><doc><![CDATA[If enabled, returns the cache key ending with a locale.]]></doc>
<argument name="request"></argument>
<argument name="cache_key"></argument>
</function>
<function name="get_max_age"><doc><![CDATA[
    Returns the max-age from the response Cache-Control header as an integer
    (or ``None`` if it wasn't found or wasn't an integer.
    ]]></doc>
<argument name="response"></argument>
</function>
<function name="learn_cache_key"><doc><![CDATA[
    Learns what headers to take into account for some request path from the
    response object. It stores those headers in a global path registry so that
    later access to that path will know what headers to take into account
    without building the response object itself. The headers are named in the
    Vary header of the response, but we want to prevent response generation.

    The list of headers to use for cache key generation is stored in the same
    cache as the pages themselves. If the cache ages some data out of the
    cache, this just means that we have to build the response once to get at
    the Vary header and so at the list of headers to use for the cache key.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
<argument name="cache_timeout" type="NoneType"><value></value>
</argument>
<argument name="key_prefix" type="NoneType"><value></value>
</argument>
<argument name="cache" type="NoneType"><value></value>
</argument>
</function>
<function name="_generate_cache_header_key"><doc><![CDATA[Returns a cache key for the header cache.]]></doc>
<argument name="key_prefix"></argument>
<argument name="request"></argument>
</function>
<function name="_generate_cache_key"><doc><![CDATA[Returns a cache key from the headers given in the header list.]]></doc>
<argument name="request"></argument>
<argument name="method"></argument>
<argument name="headerlist"></argument>
<argument name="key_prefix"></argument>
</function>
<function name="patch_response_headers"><doc><![CDATA[
    Adds some useful headers to the given HttpResponse object:
        ETag, Last-Modified, Expires and Cache-Control

    Each header is only added if it isn't already set.

    cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used
    by default.
    ]]></doc>
<argument name="response"></argument>
<argument name="cache_timeout" type="NoneType"><value></value>
</argument>
</function>
<function name="get_cache_key"><doc><![CDATA[
    Returns a cache key based on the request path and query. It can be used
    in the request phase because it pulls the list of headers to take into
    account from the global path registry and uses those to build a cache key
    to check against.

    If there is no headerlist stored, the page needs to be rebuilt, so this
    function returns None.
    ]]></doc>
<argument name="request"></argument>
<argument name="key_prefix" type="NoneType"><value></value>
</argument>
<argument name="method" type="str"><value><![CDATA[GET]]></value>
</argument>
<argument name="cache" type="NoneType"><value></value>
</argument>
</function>
<function name="has_vary_header"><doc><![CDATA[
    Checks to see if the response has a given header name in its Vary header.
    ]]></doc>
<argument name="response"></argument>
<argument name="header_query"></argument>
</function>
<function name="patch_vary_headers"><doc><![CDATA[
    Adds (or updates) the "Vary" header in the given HttpResponse object.
    newheaders is a list of header names that should be in "Vary". Existing
    headers in "Vary" aren't removed.
    ]]></doc>
<argument name="response"></argument>
<argument name="newheaders"></argument>
</function>
<function name="add_never_cache_headers"><doc><![CDATA[
    Adds headers to a response to indicate that a page should never be cached.
    ]]></doc>
<argument name="response"></argument>
</function>
<function name="_to_tuple"><doc></doc>
<argument name="s"></argument>
</function>
<function name="patch_cache_control" kwargs="kwargs"><doc><![CDATA[
    This function patches the Cache-Control header by adding all
    keyword arguments to it. The transformation is as follows:

    * All keyword parameter names are turned to lowercase, and underscores
      are converted to hyphens.
    * If the value of a parameter is True (exactly True, not just a
      true value), only the parameter name is added to the header.
    * All other parameters are added with their value, after applying
      str() to it.
    ]]></doc>
<argument name="response"></argument>
</function>
</package>
<package name="django.core.cache" file="/django/core/cache/__init__.pyc"><doc><![CDATA[
Caching framework.

This package defines set of cache backends that all conform to a simple API.
In a nutshell, a cache is a set of values -- which can be any object that
may be pickled -- identified by string keys.  For the complete API, see
the abstract BaseCache class in django.core.cache.backends.base.

Client code should not access a cache backend directly; instead it should
either use the "cache" variable made available here, or it should use the
get_cache() function made available here. get_cache() takes a backend URI
(e.g. "memcached://127.0.0.1:11211/") and returns an instance of a backend
cache class.

See docs/topics/cache.txt for information on the public API.
]]></doc>
<depends name="urlparse"></depends>
<import_attribute name="cache" type="LocMemCache" module="django.core.cache.backends.locmem"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="parse_qsl" module="urlparse"></import_function>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<import_class name="InvalidCacheBackendError" module="django.core.cache.backends.base"></import_class>
<import_class name="CacheKeyWarning" module="django.core.cache.backends.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="DEFAULT_CACHE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['get_cache', 'cache', 'DEFAULT_CACHE_ALIAS']]]></value>
</attribute>
<attribute name="backends" type="module"><value><![CDATA[<module 'django.core.cache.backends' from '/usr/local/lib/python2.7/dist-packages/django/core/cache/backends/__init__.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.core.signals' from '/usr/local/lib/python2.7/dist-packages/django/core/signals.pyc'>]]></value>
</attribute>
<attribute name="BACKENDS" type="dict"><value><![CDATA[{'db': 'db', 'dummy': 'dummy', 'memcached': 'memcached', 'file': 'filebased', 'locmem': 'locmem'}]]></value>
</attribute>
<attribute name="params" type="dict"><value></value>
</attribute>
<attribute name="legacy_backend" type="NoneType"><value></value>
</attribute>
<attribute name="engine" type="str"><value><![CDATA[django.core.cache.backends.locmem.LocMemCache]]></value>
</attribute>
<attribute name="backend_classes" type="dict"><value><![CDATA[{'db': 'db.DatabaseCache', 'dummy': 'dummy.DummyCache', 'memcached': 'memcached.CacheClass', 'file': 'filebased.FileBasedCache', 'locmem': 'locmem.LocMemCache'}]]></value>
</attribute>
<attribute name="host" type="str"><value></value>
</attribute>
<attribute name="defaults" type="dict"><value><![CDATA[{'LOCATION': '', 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}]]></value>
</attribute>
<function name="get_cache" kwargs="kwargs"><doc><![CDATA[
    Function to load a cache backend dynamically. This is flexible by design
    to allow different use cases:

    To load a backend with the old URI-based notation::

        cache = get_cache('locmem://')

    To load a backend that is pre-defined in the settings::

        cache = get_cache('default')

    To load a backend with its dotted import path,
    including arbitrary options::

        cache = get_cache('django.core.cache.backends.memcached.MemcachedCache', **{
            'LOCATION': '127.0.0.1:11211', 'TIMEOUT': 30,
        })

    ]]></doc>
<argument name="backend"></argument>
</function>
<function name="parse_backend_uri"><doc><![CDATA[
    Converts the "backend_uri" into a cache scheme ('db', 'memcached', etc), a
    host and any extra params that are required for the backend. Returns a
    (scheme, host, params) tuple.
    ]]></doc>
<argument name="backend_uri"></argument>
</function>
<function name="parse_backend_conf" kwargs="kwargs"><doc><![CDATA[
    Helper function to parse the backend configuration
    that doesn't use the URI notation.
    ]]></doc>
<argument name="backend"></argument>
</function>
</package>
<package name="django.core.exceptions" file="/django/core/exceptions.pyc"><doc><![CDATA[
Global Django exception and warning classes.
]]></doc>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<class name="MultipleObjectsReturned"></class>
<doc><![CDATA[The query returned multiple objects when only one was expected.]]></doc>
<class name="ViewDoesNotExist"></class>
<doc><![CDATA[The requested view does not exist]]></doc>
<class name="ValidationError"></class>
<doc><![CDATA[An error while validating data.]]></doc>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="message"></argument>
<argument name="code" type="NoneType"><value></value>
</argument>
<argument name="params" type="NoneType"><value></value>
</argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="update_error_dict"><doc></doc>
<argument name="self"></argument>
<argument name="error_dict"></argument>
</function>
<class name="DjangoRuntimeWarning"></class>
<doc></doc>
<class name="FieldError"></class>
<doc><![CDATA[Some kind of problem with a model field.]]></doc>
<class name="ObjectDoesNotExist"></class>
<doc><![CDATA[The requested object does not exist]]></doc>
<attribute name="silent_variable_failure" type="bool"><value><![CDATA[True]]></value>
</attribute>
<class name="ImproperlyConfigured"></class>
<doc><![CDATA[Django is somehow improperly configured]]></doc>
<class name="MiddlewareNotUsed"></class>
<doc><![CDATA[This middleware is not used in this server configuration]]></doc>
<class name="SuspiciousOperation"></class>
<doc><![CDATA[The user did something suspicious]]></doc>
<class name="PermissionDenied"></class>
<doc><![CDATA[The user did not have permission to do that]]></doc>
</package>
<package name="django.core.cache.backends.locmem" file="/django/core/cache/backends/locmem.pyc"><doc><![CDATA[Thread-safe in-memory cache backend.]]></doc>
<depends name="time"></depends>
<depends name="cPickle"></depends>
<import_class name="RWLock" module="django.utils.synch"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<attribute name="_caches" type="dict"><value><![CDATA[{'': {}}]]></value>
</attribute>
<attribute name="_expire_info" type="dict"><value><![CDATA[{'': {}}]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="pickle" type="module"><value><![CDATA[<module 'cPickle' (built-in)>]]></value>
</attribute>
<attribute name="_locks" type="dict"><value><![CDATA[{'': <django.utils.synch.RWLock instance at 0x9305d2c>}]]></value>
</attribute>
<class name="CacheClass"></class>
<doc></doc>
<class name="LocMemCache"></class>
<doc></doc>
<function name="set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_cull"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
</function>
<function name="_delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="params"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.cache.backends.base" file="/django/core/cache/backends/base.pyc"><doc><![CDATA[Base Cache class.]]></doc>
<depends name="warnings"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="DjangoRuntimeWarning" module="django.core.exceptions"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="MEMCACHE_MAX_KEY_LENGTH" type="int"><value><![CDATA[250]]></value>
</attribute>
<function name="default_key_func"><doc><![CDATA[
    Default function to generate keys.

    Constructs the key used by all other methods. By default it prepends
    the `key_prefix'. KEY_FUNCTION can be used to specify an alternate
    function with custom key making behavior.
    ]]></doc>
<argument name="key"></argument>
<argument name="key_prefix"></argument>
<argument name="version"></argument>
</function>
<function name="get_key_func"><doc><![CDATA[
    Function to decide which key function to use.

    Defaults to ``default_key_func``.
    ]]></doc>
<argument name="key_func"></argument>
</function>
<class name="InvalidCacheBackendError"></class>
<doc></doc>
<class name="BaseCache"></class>
<doc></doc>
<function name="set"><doc><![CDATA[
        Set a value in the cache. If timeout is given, that timeout will be
        used for the key; otherwise the default cache timeout will be used.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="set_many"><doc><![CDATA[
        Set a bunch of values in the cache at once from a dict of key/value
        pairs.  For certain backends (memcached), this is much more efficient
        than calling set() multiple times.

        If timeout is given, that timeout will be used for the key; otherwise
        the default cache timeout will be used.
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get"><doc><![CDATA[
        Fetch a given key from the cache. If the key does not exist, return
        default, which itself defaults to None.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="validate_key"><doc><![CDATA[
        Warn about keys that would not be portable to the memcached
        backend. This encourages (but does not force) writing backend-portable
        cache code.

        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="incr_version"><doc><![CDATA[Adds delta to the cache version for the supplied key. Returns the
        new version.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="has_key"><doc><![CDATA[
        Returns True if the key is in the cache and has not expired.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="delete_many"><doc><![CDATA[
        Set a bunch of values in the cache at once.  For certain backends
        (memcached), this is much more efficient than calling delete() multiple
        times.
        ]]></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get_many"><doc><![CDATA[
        Fetch a bunch of keys from the cache. For certain backends (memcached,
        pgsql) this can be *much* faster when fetching multiple values.

        Returns a dict mapping each key in keys to its value. If the given
        key is missing, it will be missing from the response dict.
        ]]></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="decr"><doc><![CDATA[
        Subtract delta from value in the cache. If the key does not exist, raise
        a ValueError exception.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="incr"><doc><![CDATA[
        Add delta to value in the cache. If the key does not exist, raise a
        ValueError exception.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="decr_version"><doc><![CDATA[Substracts delta from the cache version for the supplied key. Returns
        the new version.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="__contains__"><doc><![CDATA[
        Returns True if the key is in the cache and has not expired.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="clear"><doc><![CDATA[Remove *all* values from the cache at once.]]></doc>
<argument name="self"></argument>
</function>
<function name="add"><doc><![CDATA[
        Set a value in the cache if the key does not already exist. If
        timeout is given, that timeout will be used for the key; otherwise
        the default cache timeout will be used.

        Returns True if the value was stored, False otherwise.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="params"></argument>
</function>
<function name="make_key"><doc><![CDATA[Constructs the key used by all other methods. By default it
        uses the key_func to generate a key (which, by default,
        prepends the `key_prefix' and 'version'). An different key
        function can be provided at the time of cache construction;
        alternatively, you can subclass the cache backend to provide
        custom key making behavior.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="delete"><doc><![CDATA[
        Delete a key from the cache, failing silently.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<class name="CacheKeyWarning"></class>
<doc></doc>
</package>
<package name="django.core.signals" file="/django/core/signals.pyc"><doc></doc>
<import_attribute name="got_request_exception" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="request_finished" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="request_started" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.dispatch.dispatcher" file="/django/dispatch/dispatcher.pyc"><doc></doc>
<depends name="weakref"></depends>
<depends name="threading"></depends>
<attribute name="WEAKREF_TYPES" type="tuple"><value><![CDATA[(<type 'weakref'>, <class 'django.dispatch.saferef.BoundMethodWeakref'>)]]></value>
</attribute>
<attribute name="saferef" type="module"><value><![CDATA[<module 'django.dispatch.saferef' from '/usr/local/lib/python2.7/dist-packages/django/dispatch/saferef.pyc'>]]></value>
</attribute>
<attribute name="weakref" type="module"><value><![CDATA[<module 'weakref' from '/usr/lib/python2.7/weakref.pyc'>]]></value>
</attribute>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<function name="receiver" kwargs="kwargs"><doc><![CDATA[
    A decorator for connecting receivers to signals. Used by passing in the
    signal and keyword arguments to connect::

        @receiver(post_save, sender=MyModel)
        def signal_receiver(sender, **kwargs):
            ...

    ]]></doc>
<argument name="signal"></argument>
</function>
<function name="_make_id"><doc></doc>
<argument name="target"></argument>
</function>
<class name="Signal"></class>
<doc><![CDATA[
    Base class for all signals
    
    Internal attributes:
    
        receivers
            { receriverkey (id) : weakref(receiver) }
    ]]></doc>
<function name="disconnect"><doc><![CDATA[
        Disconnect receiver from sender for signal.

        If weak references are used, disconnect need not be called. The receiver
        will be remove from dispatch automatically.
    
        Arguments:
        
            receiver
                The registered receiver to disconnect. May be none if
                dispatch_uid is specified.
            
            sender
                The registered sender to disconnect
            
            weak
                The weakref state to disconnect
            
            dispatch_uid
                the unique identifier of the receiver to disconnect
        ]]></doc>
<argument name="self"></argument>
<argument name="receiver" type="NoneType"><value></value>
</argument>
<argument name="sender" type="NoneType"><value></value>
</argument>
<argument name="weak" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="dispatch_uid" type="NoneType"><value></value>
</argument>
</function>
<function name="_live_receivers"><doc><![CDATA[
        Filter sequence of receivers to get resolved, live receivers.

        This checks for weak references and resolves them, then returning only
        live receivers.
        ]]></doc>
<argument name="self"></argument>
<argument name="senderkey"></argument>
</function>
<function name="send" kwargs="named"><doc><![CDATA[
        Send signal from sender to all connected receivers.

        If any receiver raises an error, the error propagates back through send,
        terminating the dispatch loop, so it is quite possible to not have all
        receivers called if a raises an error.

        Arguments:
        
            sender
                The sender of the signal Either a specific object or None.
    
            named
                Named arguments which will be passed to receivers.

        Returns a list of tuple pairs [(receiver, response), ... ].
        ]]></doc>
<argument name="self"></argument>
<argument name="sender"></argument>
</function>
<function name="connect"><doc><![CDATA[
        Connect receiver to sender for signal.
    
        Arguments:
        
            receiver
                A function or an instance method which is to receive signals.
                Receivers must be hashable objects.

                If weak is True, then receiver must be weak-referencable (more
                precisely saferef.safeRef() must be able to create a reference
                to the receiver).
        
                Receivers must be able to accept keyword arguments.

                If receivers have a dispatch_uid attribute, the receiver will
                not be added if another receiver already exists with that
                dispatch_uid.

            sender
                The sender to which the receiver should respond. Must either be
                of type Signal, or None to receive events from any sender.

            weak
                Whether to use weak references to the receiver. By default, the
                module will attempt to use weak references to the receiver
                objects. If this parameter is false, then strong references will
                be used.
        
            dispatch_uid
                An identifier used to uniquely identify a particular instance of
                a receiver. This will usually be a string, though it may be
                anything hashable.
        ]]></doc>
<argument name="self"></argument>
<argument name="receiver"></argument>
<argument name="sender" type="NoneType"><value></value>
</argument>
<argument name="weak" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="dispatch_uid" type="NoneType"><value></value>
</argument>
</function>
<function name="_remove_receiver"><doc><![CDATA[
        Remove dead receivers from connections.
        ]]></doc>
<argument name="self"></argument>
<argument name="receiver"></argument>
</function>
<function name="send_robust" kwargs="named"><doc><![CDATA[
        Send signal from sender to all connected receivers catching errors.

        Arguments:
        
            sender
                The sender of the signal. Can be any python object (normally one
                registered with a connect if you actually want something to
                occur).

            named
                Named arguments which will be passed to receivers. These
                arguments must be a subset of the argument names defined in
                providing_args.

        Return a list of tuple pairs [(receiver, response), ... ]. May raise
        DispatcherKeyError.

        If any receiver raises an error (specifically any subclass of
        Exception), the error instance is returned as the result for that
        receiver.
        ]]></doc>
<argument name="self"></argument>
<argument name="sender"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Create a new signal.
        
        providing_args
            A list of the arguments this signal can pass along in a send() call.
        ]]></doc>
<argument name="self"></argument>
<argument name="providing_args" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.dispatch.saferef" file="/django/dispatch/saferef.pyc"><doc><![CDATA[
"Safe weakrefs", originally from pyDispatcher.

Provides a way to safely weakref any function, including bound methods (which
aren't handled by the core weakref module).
]]></doc>
<depends name="traceback"></depends>
<depends name="weakref"></depends>
<attribute name="traceback" type="module"><value><![CDATA[<module 'traceback' from '/usr/lib/python2.7/traceback.pyc'>]]></value>
</attribute>
<attribute name="weakref" type="module"><value><![CDATA[<module 'weakref' from '/usr/lib/python2.7/weakref.pyc'>]]></value>
</attribute>
<function name="safeRef"><doc><![CDATA[Return a *safe* weak reference to a callable target

    target -- the object to be weakly referenced, if it's a
        bound method reference, will create a BoundMethodWeakref,
        otherwise creates a simple weakref.
    onDelete -- if provided, will have a hard reference stored
        to the callable to be called after the safe reference
        goes out of scope with the reference object, (either a
        weakref or a BoundMethodWeakref) as argument.
    ]]></doc>
<argument name="target"></argument>
<argument name="onDelete" type="NoneType"><value></value>
</argument>
</function>
<function name="get_bound_method_weakref"><doc><![CDATA[Instantiates the appropiate BoundMethodWeakRef, depending on the details of
    the underlying class method implementation]]></doc>
<argument name="target"></argument>
<argument name="onDelete"></argument>
</function>
<class name="BoundNonDescriptorMethodWeakref"></class>
<doc><![CDATA[A specialized BoundMethodWeakref, for platforms where instance methods
    are not descriptors.

    It assumes that the function name and the target attribute name are the
    same, instead of assuming that the function is a descriptor. This approach
    is equally fast, but not 100% reliable because functions can be stored on an
    attribute named differenty than the function's name such as in:

    class A: pass
    def foo(self): return "foo"
    A.bar = foo

    But this shouldn't be a common use case. So, on platforms where methods
    aren't descriptors (such as Jython) this implementation has the advantage
    of working in the most cases.
    ]]></doc>
<function name="__call__"><doc><![CDATA[Return a strong reference to the bound method

        If the target cannot be retrieved, then will
        return None, otherwise returns a bound instance
        method for our object and function.

        Note:
            You may call this method any number of times,
            as it does not invalidate the reference.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc><![CDATA[Return a weak-reference-like instance for a bound method

        target -- the instance-method target for the weak
            reference, must have im_self and im_func attributes
            and be reconstructable via:
                target.im_func.__get__( target.im_self )
            which is true of built-in instance methods.
        onDelete -- optional callback which will be called
            when this weak reference ceases to be valid
            (i.e. either the object or the function is garbage
            collected).  Should take a single argument,
            which will be passed a pointer to this object.
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="onDelete" type="NoneType"><value></value>
</argument>
</function>
<class name="BoundMethodWeakref"></class>
<doc><![CDATA['Safe' and reusable weak references to instance methods

    BoundMethodWeakref objects provide a mechanism for
    referencing a bound method without requiring that the
    method object itself (which is normally a transient
    object) is kept alive.  Instead, the BoundMethodWeakref
    object keeps weak references to both the object and the
    function which together define the instance method.

    Attributes:
        key -- the identity key for the reference, calculated
            by the class's calculateKey method applied to the
            target instance method
        deletionMethods -- sequence of callable objects taking
            single argument, a reference to this object which
            will be called when *either* the target object or
            target function is garbage collected (i.e. when
            this object becomes invalid).  These are specified
            as the onDelete parameters of safeRef calls.
        weakSelf -- weak reference to the target object
        weakFunc -- weak reference to the target function

    Class Attributes:
        _allInstances -- class attribute pointing to all live
            BoundMethodWeakref objects indexed by the class's
            calculateKey(target) method applied to the target
            objects.  This weak value dictionary is used to
            short-circuit creation so that multiple references
            to the same (object, function) pair produce the
            same BoundMethodWeakref instance.

    ]]></doc>
<import_attribute name="_allInstances" type="instance" module="weakref"></import_attribute>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x8fab09c>]]></value>
</attribute>
<attribute name="calculateKey" type="instancemethod"><value><![CDATA[<bound method type.calculateKey of <class 'django.dispatch.saferef.BoundMethodWeakref'>>]]></value>
</attribute>
<function name="__nonzero__"><doc><![CDATA[Whether we are still a valid reference]]></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc><![CDATA[Give a friendly representation of the object]]></doc>
<argument name="self"></argument>
</function>
<function name="__cmp__"><doc><![CDATA[Compare with another reference]]></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__repr__"><doc><![CDATA[Give a friendly representation of the object]]></doc>
<argument name="self"></argument>
</function>
<function name="__call__"><doc><![CDATA[Return a strong reference to the bound method

        If the target cannot be retrieved, then will
        return None, otherwise returns a bound instance
        method for our object and function.

        Note:
            You may call this method any number of times,
            as it does not invalidate the reference.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc><![CDATA[Return a weak-reference-like instance for a bound method

        target -- the instance-method target for the weak
            reference, must have im_self and im_func attributes
            and be reconstructable via:
                target.im_func.__get__( target.im_self )
            which is true of built-in instance methods.
        onDelete -- optional callback which will be called
            when this weak reference ceases to be valid
            (i.e. either the object or the function is garbage
            collected).  Should take a single argument,
            which will be passed a pointer to this object.
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="onDelete" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.cache.backends" file="/django/core/cache/backends/__init__.pyc"><doc></doc>
<attribute name="locmem" type="module"><value><![CDATA[<module 'django.core.cache.backends.locmem' from '/usr/local/lib/python2.7/dist-packages/django/core/cache/backends/locmem.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.cache.backends.base' from '/usr/local/lib/python2.7/dist-packages/django/core/cache/backends/base.pyc'>]]></value>
</attribute>
</package>
<package name="django.core.cache.backends.db" file="/django/core/cache/backends/db.pyc"><doc><![CDATA[Database cache backend.]]></doc>
<depends name="time"></depends>
<depends name="base64"></depends>
<depends name="cPickle"></depends>
<depends name="datetime"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<import_class name="datetime" module="datetime"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="base64" type="module"><value><![CDATA[<module 'base64' from '/usr/lib/python2.7/base64.pyc'>]]></value>
</attribute>
<attribute name="pickle" type="module"><value><![CDATA[<module 'cPickle' (built-in)>]]></value>
</attribute>
<class name="Options"></class>
<doc><![CDATA[A class that will quack like a Django model _meta class.

    This allows cache operations to be controlled by the router
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="table"></argument>
</function>
<class name="CacheClass"></class>
<doc></doc>
<class name="BaseDatabaseCache"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="table"></argument>
<argument name="params"></argument>
</function>
<class name="DatabaseCache"></class>
<doc></doc>
<function name="_base_set"><doc></doc>
<argument name="self"></argument>
<argument name="mode"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
</function>
<function name="set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_cull"><doc></doc>
<argument name="self"></argument>
<argument name="db"></argument>
<argument name="cursor"></argument>
<argument name="now"></argument>
</function>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.db.utils" file="/django/db/utils.pyc"><doc></doc>
<depends name="inspect"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="inspect" type="module"><value><![CDATA[<module 'inspect' from '/usr/lib/python2.7/inspect.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="load_backend"><doc></doc>
<argument name="backend_name"></argument>
</function>
<class name="IntegrityError"></class>
<doc></doc>
<class name="ConnectionDoesNotExist"></class>
<doc></doc>
<class name="ConnectionRouter"></class>
<doc></doc>
<function name="allow_relation" kwargs="hints"><doc></doc>
<argument name="self"></argument>
<argument name="obj1"></argument>
<argument name="obj2"></argument>
</function>
<function name="allow_syncdb"><doc></doc>
<argument name="self"></argument>
<argument name="db"></argument>
<argument name="model"></argument>
</function>
<function name="db_for_write" kwargs="hints"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="db_for_read" kwargs="hints"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="_router_func"><doc></doc>
<argument name="action"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="routers"></argument>
</function>
<class name="DatabaseError"></class>
<doc></doc>
<class name="ConnectionHandler"></class>
<doc></doc>
<function name="ensure_defaults"><doc><![CDATA[
        Puts the defaults into the settings dictionary for a given connection
        where no settings is provided.
        ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="all"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="databases"></argument>
</function>
</package>
<package name="django.db.transaction" file="/django/db/transaction.pyc"><doc><![CDATA[
This module implements a transaction manager that can be used to define
transaction handling in a request or view function. It is used by transaction
control middleware and decorators.

The transaction manager can be in managed or in auto state. Auto state means the
system is using a commit-on-save strategy (actually it's more like
commit-on-change). As soon as the .save() or .delete() (or related) methods are
called, a commit is made.

Managed transactions don't do those commits, but will need some kind of manual
or implicit commits or rollbacks.
]]></doc>
<depends name="sys"></depends>
<depends name="functools"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="managed"><doc><![CDATA[
    Puts the transaction manager into a manual state: managed transactions have
    to be committed explicitly by the user. If you switch off transaction
    management and there is a pending commit/rollback, the data will be
    commited.
    ]]></doc>
<argument name="flag" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint_commit"><doc><![CDATA[
    Commits the most recent savepoint (if one exists). Does nothing if
    savepoints are not supported.
    ]]></doc>
<argument name="sid"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint"><doc><![CDATA[
    Creates a savepoint (if supported and required by the backend) inside the
    current transaction. Returns an identifier for the savepoint that will be
    used for the subsequent rollback or commit.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="set_dirty"><doc><![CDATA[
    Sets a dirty flag for the current thread and code streak. This can be used
    to decide in a managed block of code to decide whether there are open
    changes waiting for commit.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="is_dirty"><doc><![CDATA[
    Returns True if the current transaction requires a commit for changes to
    happen.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="enter_transaction_management"><doc><![CDATA[
    Enters transaction management for a running thread. It must be balanced with
    the appropriate leave_transaction_management call, since the actual state is
    managed as a stack.

    The state and dirty flag are carried over from the surrounding block or
    from the settings, if there is no surrounding block (dirty is always false
    when no current block is running).
    ]]></doc>
<argument name="managed" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="autocommit"><doc><![CDATA[
    Decorator that activates commit on save. This is Django's default behavior;
    this decorator is useful if you globally activated transaction management in
    your settings file and want the default behavior in some view functions.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_on_success"><doc><![CDATA[
    This decorator activates commit on response. This way, if the view function
    runs successfully, a commit is made; if the viewfunc produces an exception,
    a rollback is made. This is one of the most common ways to do transaction
    control in Web apps.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="leave_transaction_management"><doc><![CDATA[
    Leaves transaction management for a running thread. A dirty flag is carried
    over to the surrounding block, as a commit will commit all changes, even
    those from outside. (Commits are on connection level.)
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="_transaction_func"><doc><![CDATA[
    Takes 3 things, an entering function (what to do to start this block of
    transaction management), an exiting function (what to do to end it, on both
    success and failure, and using which can be: None, indiciating using is
    DEFAULT_DB_ALIAS, a callable, indicating that using is DEFAULT_DB_ALIAS and
    to return the function already wrapped.

    Returns either a Transaction objects, which is both a decorator and a
    context manager, or a wrapped function, if using is a callable.
    ]]></doc>
<argument name="entering"></argument>
<argument name="exiting"></argument>
<argument name="using"></argument>
</function>
<function name="rollback"><doc><![CDATA[
    This function does the rollback itself and resets the dirty flag.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="rollback_unless_managed"><doc><![CDATA[
    Rolls back changes if the system is not in managed transaction mode.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit"><doc><![CDATA[
    Does the commit itself and resets the dirty flag.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="set_clean"><doc><![CDATA[
    Resets a dirty flag for the current thread and code streak. This can be used
    to decide in a managed block of code to decide whether a commit or rollback
    should happen.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint_rollback"><doc><![CDATA[
    Rolls back the most recent savepoint (if one exists). Does nothing if
    savepoints are not supported.
    ]]></doc>
<argument name="sid"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_unless_managed"><doc><![CDATA[
    Commits changes if the system is not in managed transaction mode.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="is_managed"><doc><![CDATA[
    Checks whether the transaction manager is in manual or in auto state.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="clean_savepoints"><doc></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_manually"><doc><![CDATA[
    Decorator that activates manual transaction control. It just disables
    automatic transaction control and doesn't do any commit/rollback of its
    own -- it's up to the user to call the commit and rollback functions
    themselves.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<class name="Transaction"></class>
<doc><![CDATA[
    Acts as either a decorator, or a context manager.  If it's a decorator it
    takes a function and returns a wrapped function.  If it's a contextmanager
    it's used with the ``with`` statement.  In either event entering/exiting
    are called before and after, respectively, the function/block is executed.

    autocommit, commit_on_success, and commit_manually contain the
    implementations of entering and exiting.
    ]]></doc>
<function name="__exit__"><doc></doc>
<argument name="self"></argument>
<argument name="exc_type"></argument>
<argument name="exc_value"></argument>
<argument name="traceback"></argument>
</function>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="func"></argument>
</function>
<function name="__enter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="entering"></argument>
<argument name="exiting"></argument>
<argument name="using"></argument>
</function>
<class name="TransactionManagementError"></class>
<doc><![CDATA[
    This exception is thrown when something bad happens with transaction
    management.
    ]]></doc>
</package>
<package name="django.core.cache.backends.memcached" file="/django/core/cache/backends/memcached.pyc"><doc><![CDATA[Memcached cache backend]]></doc>
<depends name="time"></depends>
<depends name="thread"></depends>
<import_class name="InvalidCacheBackendError" module="django.core.cache.backends.base"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<class name="CacheClass"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="server"></argument>
<argument name="params"></argument>
</function>
<class name="PyLibMCCache"></class>
<doc><![CDATA[An implementation of a cache binding using pylibmc]]></doc>
<attribute name="_cache" type="property"><value><![CDATA[<property object at 0x93a248c>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="server"></argument>
<argument name="params"></argument>
</function>
<class name="BaseMemcachedCache"></class>
<doc></doc>
<attribute name="_cache" type="property"><value><![CDATA[<property object at 0x93a2374>]]></value>
</attribute>
<function name="set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="int"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="set_many"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="timeout" type="int"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="delete_many"><doc></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_memcache_timeout"><doc><![CDATA[
        Memcached deals with long (> 30 days) timeouts in a special
        way. Call this function to obtain a safe value for your timeout.
        ]]></doc>
<argument name="self"></argument>
<argument name="timeout"></argument>
</function>
<function name="incr"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="int"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="server"></argument>
<argument name="params"></argument>
<argument name="library"></argument>
<argument name="value_not_found_exception"></argument>
</function>
<function name="close" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_many"><doc></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="decr"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="delta" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<class name="MemcachedCache"></class>
<doc><![CDATA[An implementation of a cache binding using python-memcached]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="server"></argument>
<argument name="params"></argument>
</function>
</package>
<package name="django.core.cache.backends.filebased" file="/django/core/cache/backends/filebased.pyc"><doc><![CDATA[File-based cache backend]]></doc>
<depends name="cPickle"></depends>
<depends name="time"></depends>
<depends name="shutil"></depends>
<depends name="os"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<attribute name="pickle" type="module"><value><![CDATA[<module 'cPickle' (built-in)>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="shutil" type="module"><value><![CDATA[<module 'shutil' from '/usr/lib/python2.7/shutil.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="CacheClass"></class>
<doc></doc>
<class name="FileBasedCache"></class>
<doc></doc>
<attribute name="_num_entries" type="property"><value><![CDATA[<property object at 0x93a26e4>]]></value>
</attribute>
<function name="set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_key_to_file"><doc><![CDATA[
        Convert the filename into an md5 string. We'll turn the first couple
        bits of the path into directory prefixes to be nice to filesystems
        that have problems with large numbers of files in a directory.

        Thus, a cache key of "foo" gets turnned into a file named
        ``{cache-dir}ac/bd/18db4cc2f85cedef654fccc4a4d8``.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_num_entries"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_cull"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_delete"><doc></doc>
<argument name="self"></argument>
<argument name="fname"></argument>
</function>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="_createdir"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="dir"></argument>
<argument name="params"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.cache.backends.dummy" file="/django/core/cache/backends/dummy.pyc"><doc><![CDATA[Dummy cache backend]]></doc>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<class name="CacheClass"></class>
<doc></doc>
<class name="DummyCache"></class>
<doc></doc>
<function name="set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="set_many"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
<argument name="timeout" type="NoneType"><value></value>
</argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="get_many"><doc></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="delete_many"><doc></doc>
<argument name="self"></argument>
<argument name="keys"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="host"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="version" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.http" file="/django/http/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="Cookie"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<depends name="urllib"></depends>
<depends name="urlparse"></depends>
<depends name="cStringIO"></depends>
<depends name="pprint"></depends>
<import_attribute name="_tc" type="SimpleCookie" module="Cookie"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="urlencode" module="urllib"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="fix_IE_for_vary" module="django.http.utils"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="cookie_date" module="django.utils.http"></import_function>
<import_function name="urljoin" module="urlparse"></import_function>
<import_function name="quote" module="urllib"></import_function>
<import_function name="fix_location_header" module="django.http.utils"></import_function>
<import_function name="parse_qsl" module="urlparse"></import_function>
<import_function name="conditional_content_removal" module="django.http.utils"></import_function>
<import_function name="fix_IE_for_attach" module="django.http.utils"></import_function>
<import_function name="pformat" module="pprint"></import_function>
<import_class name="MultiPartParser" module="django.http.multipartparser"></import_class>
<import_class name="ImmutableList" module="django.utils.datastructures"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.http.utils' from '/usr/local/lib/python2.7/dist-packages/django/http/utils.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="_cookie_allows_colon_in_names" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="absolute_http_url_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x92a7a20>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="Cookie" type="module"><value><![CDATA[<module 'Cookie' from '/usr/lib/python2.7/Cookie.pyc'>]]></value>
</attribute>
<attribute name="_cookie_encodes_correctly" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="uploadhandler" type="module"><value><![CDATA[<module 'django.core.files.uploadhandler' from '/usr/local/lib/python2.7/dist-packages/django/core/files/uploadhandler.pyc'>]]></value>
</attribute>
<attribute name="_morsel_supports_httponly" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="RESERVED_CHARS" type="str"><value><![CDATA[!*'();:@&=+$,/?%#[]]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<attribute name="multipartparser" type="module"><value><![CDATA[<module 'django.http.multipartparser' from '/usr/local/lib/python2.7/dist-packages/django/http/multipartparser.pyc'>]]></value>
</attribute>
<function name="get_host"><doc></doc>
<argument name="request"></argument>
</function>
<function name="str_to_unicode"><doc><![CDATA[
    Converts basestring objects to unicode, using the given encoding. Illegally
    encoded input characters are replaced with Unicode "unknown" codepoint
    (\ufffd).

    Returns any non-basestring objects without change.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding"></argument>
</function>
<function name="parse_cookie"><doc></doc>
<argument name="cookie"></argument>
</function>
<class name="HttpResponseNotFound"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[404]]></value>
</attribute>
<class name="HttpResponseNotModified"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[304]]></value>
</attribute>
<class name="SimpleCookie"></class>
<doc></doc>
<import_attribute name="_strict_set" type="instancemethod" module="Cookie"></import_attribute>
<function name="load"><doc></doc>
<argument name="self"></argument>
<argument name="rawdata"></argument>
<argument name="ignore_parse_errors" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_loose_set"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="real_value"></argument>
<argument name="coded_value"></argument>
</function>
<class name="HttpResponseNotAllowed"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[405]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="permitted_methods"></argument>
</function>
<class name="HttpResponseForbidden"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[403]]></value>
</attribute>
<class name="HttpResponse"></class>
<doc><![CDATA[A basic HTTP response, with content and dictionary-accessed headers.]]></doc>
<attribute name="status_code" type="int"><value><![CDATA[200]]></value>
</attribute>
<attribute name="content" type="property"><value><![CDATA[<property object at 0x9371af4>]]></value>
</attribute>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="header"></argument>
</function>
<function name="set_cookie"><doc><![CDATA[
        Sets a cookie.

        ``expires`` can be a string in the correct format or a
        ``datetime.datetime`` object in UTC. If ``expires`` is a datetime
        object then ``max_age`` will be calculated.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value" type="str"><value></value>
</argument>
<argument name="max_age" type="NoneType"><value></value>
</argument>
<argument name="expires" type="NoneType"><value></value>
</argument>
<argument name="path" type="str"><value><![CDATA[/]]></value>
</argument>
<argument name="domain" type="NoneType"><value></value>
</argument>
<argument name="secure" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="httponly" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__str__"><doc><![CDATA[Full HTTP message, including headers.]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="flush"><doc></doc>
<argument name="self"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_content"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="content" type="str"><value></value>
</argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
<argument name="status" type="NoneType"><value></value>
</argument>
<argument name="content_type" type="NoneType"><value></value>
</argument>
</function>
<function name="write"><doc></doc>
<argument name="self"></argument>
<argument name="content"></argument>
</function>
<function name="_convert_to_ascii" args="values"><doc><![CDATA[Converts all values to ascii strings.]]></doc>
<argument name="self"></argument>
</function>
<function name="__contains__"><doc><![CDATA[Case-insensitive check for a header.]]></doc>
<argument name="self"></argument>
<argument name="header"></argument>
</function>
<function name="items"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="header"></argument>
<argument name="alternate"></argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="header"></argument>
<argument name="value"></argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="delete_cookie"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="path" type="str"><value><![CDATA[/]]></value>
</argument>
<argument name="domain" type="NoneType"><value></value>
</argument>
</function>
<function name="__delitem__"><doc></doc>
<argument name="self"></argument>
<argument name="header"></argument>
</function>
<function name="has_header"><doc><![CDATA[Case-insensitive check for a header.]]></doc>
<argument name="self"></argument>
<argument name="header"></argument>
</function>
<function name="tell"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_content"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="CompatCookie"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="HttpRequest"></class>
<doc><![CDATA[A basic HTTP request.]]></doc>
<attribute name="_encoding" type="NoneType"><value></value>
</attribute>
<attribute name="_upload_handlers" type="list"><value></value>
</attribute>
<attribute name="encoding" type="property"><value><![CDATA[<property object at 0x93719dc>]]></value>
</attribute>
<attribute name="raw_post_data" type="property"><value><![CDATA[<property object at 0x9371a2c>]]></value>
</attribute>
<attribute name="upload_handlers" type="property"><value><![CDATA[<property object at 0x9371a04>]]></value>
</attribute>
<function name="_initialize_handlers"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_upload_handlers"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_full_path"><doc></doc>
<argument name="self"></argument>
</function>
<function name="read" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="readlines"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_mark_post_parse_error"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_load_post_and_files"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_raw_post_data"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="xreadlines"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_secure"><doc></doc>
<argument name="self"></argument>
</function>
<function name="readline" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_encoding"><doc><![CDATA[
        Sets the encoding used for GET/POST accesses. If the GET or POST
        dictionary has already been created, it is removed and recreated on the
        next access (so that it is decoded correctly).
        ]]></doc>
<argument name="self"></argument>
<argument name="val"></argument>
</function>
<function name="_set_upload_handlers"><doc></doc>
<argument name="self"></argument>
<argument name="upload_handlers"></argument>
</function>
<function name="_get_encoding"><doc></doc>
<argument name="self"></argument>
</function>
<function name="build_absolute_uri"><doc><![CDATA[
        Builds an absolute URI from the location and the variables available in
        this request. If no location is specified, the absolute URI is built on
        ``request.get_full_path()``.
        ]]></doc>
<argument name="self"></argument>
<argument name="location" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_ajax"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_host"><doc><![CDATA[Returns the HTTP host using the environment or request headers.]]></doc>
<argument name="self"></argument>
</function>
<function name="parse_file_upload"><doc><![CDATA[Returns a tuple of (POST QueryDict, FILES MultiValueDict).]]></doc>
<argument name="self"></argument>
<argument name="META"></argument>
<argument name="post_data"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="QueryDict"></class>
<doc><![CDATA[
    A specialized MultiValueDict that takes a query string when initialized.
    This is immutable unless you create a copy of it.

    Values retrieved from this class are converted from the given encoding
    (DEFAULT_CHARSET by default) to unicode.
    ]]></doc>
<attribute name="_encoding" type="NoneType"><value></value>
</attribute>
<attribute name="_mutable" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="encoding" type="property"><value><![CDATA[<property object at 0x9371a7c>]]></value>
</attribute>
<function name="urlencode"><doc><![CDATA[
        Returns an encoded string of all query string arguments.

        :arg safe: Used to specify characters which do not require quoting, for
            example::

                >>> q = QueryDict('', mutable=True)
                >>> q['next'] = '/a&b/'
                >>> q.urlencode()
                'next=%2Fa%26b%2F'
                >>> q.urlencode(safe='/')
                'next=/a%26b/'

        ]]></doc>
<argument name="self"></argument>
<argument name="safe" type="NoneType"><value></value>
</argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="appendlist"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="update"><doc></doc>
<argument name="self"></argument>
<argument name="other_dict"></argument>
</function>
<function name="pop" args="args"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="_assert_mutable"><doc></doc>
<argument name="self"></argument>
</function>
<function name="popitem"><doc></doc>
<argument name="self"></argument>
</function>
<function name="copy"><doc><![CDATA[Returns a mutable copy of this object.]]></doc>
<argument name="self"></argument>
</function>
<function name="_set_encoding"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__delitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="_get_encoding"><doc></doc>
<argument name="self"></argument>
</function>
<function name="setdefault"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="setlist"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="list_"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="query_string"></argument>
<argument name="mutable" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
</function>
<function name="setlistdefault"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default_list" type="tuple"><value></value>
</argument>
</function>
<function name="__copy__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="BadHeaderError"></class>
<doc></doc>
<class name="HttpResponseGone"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[410]]></value>
</attribute>
<class name="HttpResponseServerError"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[500]]></value>
</attribute>
<class name="HttpResponseBadRequest"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[400]]></value>
</attribute>
<class name="Http404"></class>
<doc></doc>
<class name="HttpResponseRedirect"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[302]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="redirect_to"></argument>
</function>
<class name="HttpResponsePermanentRedirect"></class>
<doc></doc>
<attribute name="status_code" type="int"><value><![CDATA[301]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="redirect_to"></argument>
</function>
</package>
<package name="django.http.multipartparser" file="/django/http/multipartparser.pyc"><doc><![CDATA[
Multi-part parsing for file uploads.

Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
file upload handlers for processing.
]]></doc>
<depends name="cgi"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="unescape_entities" module="django.utils.text"></import_function>
<import_class name="SkipFile" module="django.core.files.uploadhandler"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="StopUpload" module="django.core.files.uploadhandler"></import_class>
<import_class name="StopFutureHandlers" module="django.core.files.uploadhandler"></import_class>
<import_class name="SuspiciousOperation" module="django.core.exceptions"></import_class>
<attribute name="FILE" type="str"><value><![CDATA[file]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('MultiPartParser', 'MultiPartParserError', 'InputStreamExhausted')]]></value>
</attribute>
<attribute name="RAW" type="str"><value><![CDATA[raw]]></value>
</attribute>
<attribute name="cgi" type="module"><value><![CDATA[<module 'cgi' from '/usr/lib/python2.7/cgi.pyc'>]]></value>
</attribute>
<attribute name="FIELD" type="str"><value><![CDATA[field]]></value>
</attribute>
<function name="_parse_header_params"><doc></doc>
<argument name="s"></argument>
</function>
<function name="parse_header"><doc><![CDATA[ Parse the header into a key-value. ]]></doc>
<argument name="line"></argument>
</function>
<function name="exhaust"><doc><![CDATA[
    Completely exhausts an iterator or stream.

    Raise a MultiPartParserError if the argument is not a stream or an iterable.
    ]]></doc>
<argument name="stream_or_iterable"></argument>
</function>
<function name="parse_boundary_stream"><doc><![CDATA[
    Parses one and exactly one stream that encapsulates a boundary.
    ]]></doc>
<argument name="stream"></argument>
<argument name="max_header_size"></argument>
</function>
<class name="LazyStream"></class>
<doc><![CDATA[
    The LazyStream wrapper allows one to get and "unget" bytes from a stream.

    Given a producer object (an iterator that yields bytestrings), the
    LazyStream object will support iteration, reading, and keeping a "look-back"
    variable in case you need to "unget" some bytes.
    ]]></doc>
<function name="read"><doc></doc>
<argument name="self"></argument>
<argument name="size" type="NoneType"><value></value>
</argument>
</function>
<function name="_update_unget_history"><doc><![CDATA[
        Updates the unget history as a sanity check to see if we've pushed
        back the same number of bytes in one chunk. If we keep ungetting the
        same number of bytes many times (here, 50), we're mostly likely in an
        infinite loop of some sort. This is usually caused by a
        maliciously-malformed MIME request.
        ]]></doc>
<argument name="self"></argument>
<argument name="num_bytes"></argument>
</function>
<function name="next"><doc><![CDATA[
        Used when the exact number of bytes to read is unimportant.

        This procedure just returns whatever is chunk is conveniently returned
        from the iterator instead. Useful to avoid unnecessary bookkeeping if
        performance is an issue.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="close"><doc><![CDATA[
        Used to invalidate/disable this lazy stream.

        Replaces the producer with an empty list. Any leftover bytes that have
        already been read will still be reported upon read() and/or next().
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="unget"><doc><![CDATA[
        Places bytes back onto the front of the lazy stream.

        Future calls to read() will return those bytes first. The
        stream position and thus tell() will be rewound.
        ]]></doc>
<argument name="self"></argument>
<argument name="bytes"></argument>
</function>
<function name="tell"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Every LazyStream must have a producer when instantiated.

        A producer is an iterable that returns a string each time it
        is called.
        ]]></doc>
<argument name="self"></argument>
<argument name="producer"></argument>
<argument name="length" type="NoneType"><value></value>
</argument>
</function>
<class name="LimitBytes"></class>
<doc><![CDATA[ Limit bytes for a file object. ]]></doc>
<function name="read"><doc><![CDATA[
        Read data from the underlying file.
        If you ask for too much or there isn't anything left,
        this will raise an InputStreamExhausted error.
        ]]></doc>
<argument name="self"></argument>
<argument name="num_bytes" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="fileobject"></argument>
<argument name="length"></argument>
</function>
<class name="BoundaryIter"></class>
<doc><![CDATA[
    A Producer that is sensitive to boundaries.

    Will happily yield bytes until a boundary is found. Will yield the bytes
    before the boundary, throw away the boundary bytes themselves, and push the
    post-boundary bytes back on the stream.

    The future calls to .next() after locating the boundary will raise a
    StopIteration exception.
    ]]></doc>
<function name="_find_boundary"><doc><![CDATA[
        Finds a multipart boundary in data.

        Should no boundry exist in the data None is returned instead. Otherwise
        a tuple containing the indices of the following are returned:

         * the end of current encapsulation
         * the start of the next encapsulation
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="eof" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="stream"></argument>
<argument name="boundary"></argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultiPartParserError"></class>
<doc></doc>
<class name="MultiPartParser"></class>
<doc><![CDATA[
    A rfc2388 multipart/form-data parser.

    ``MultiValueDict.parse()`` reads the input stream in ``chunk_size`` chunks
    and returns a tuple of ``(MultiValueDict(POST), MultiValueDict(FILES))``. If
    ]]></doc>
<function name="parse"><doc><![CDATA[
        Parse the POST data and break it into a FILES MultiValueDict and a POST
        MultiValueDict.

        Returns a tuple containing the POST and FILES dictionary, respectively.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="handle_file_complete"><doc><![CDATA[
        Handle all the signalling that takes place when a file is complete.
        ]]></doc>
<argument name="self"></argument>
<argument name="old_field_name"></argument>
<argument name="counters"></argument>
</function>
<function name="IE_sanitize"><doc><![CDATA[Cleanup filename from Internet Explorer full paths.]]></doc>
<argument name="self"></argument>
<argument name="filename"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Initialize the MultiPartParser object.

        :META:
            The standard ``META`` dictionary in Django request objects.
        :input_data:
            The raw post data, as a file-like object.
        :upload_handler:
            An UploadHandler instance that performs operations on the uploaded
            data.
        :encoding:
            The encoding with which to treat the incoming data.
        ]]></doc>
<argument name="self"></argument>
<argument name="META"></argument>
<argument name="input_data"></argument>
<argument name="upload_handlers"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
</function>
<class name="InputStreamExhausted"></class>
<doc><![CDATA[
    No more reads are allowed from this device.
    ]]></doc>
<class name="ChunkIter"></class>
<doc><![CDATA[
    An iterable that will yield chunks of data. Given a file-like object as the
    constructor, this object will yield chunks of read operations from that
    object.
    ]]></doc>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="flo"></argument>
<argument name="chunk_size" type="int"><value><![CDATA[65536]]></value>
</argument>
</function>
<class name="Parser"></class>
<doc></doc>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="stream"></argument>
<argument name="boundary"></argument>
</function>
<class name="InterBoundaryIter"></class>
<doc><![CDATA[
    A Producer that will iterate over boundaries.
    ]]></doc>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="stream"></argument>
<argument name="boundary"></argument>
</function>
</package>
<package name="django.core.files.uploadhandler" file="/django/core/files/uploadhandler.pyc"><doc><![CDATA[
Base file upload handler classes, and the built-in concrete subclasses
]]></doc>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="TemporaryUploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="InMemoryUploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler', 'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler', 'StopFutureHandlers']]]></value>
</attribute>
<function name="load_handler" args="args" kwargs="kwargs"><doc><![CDATA[
    Given a path to a handler, return an instance of that handler.

    E.g.::
        >>> load_handler('django.core.files.uploadhandler.TemporaryFileUploadHandler', request)
        <TemporaryFileUploadHandler object at 0x...>

    ]]></doc>
<argument name="path"></argument>
</function>
<class name="StopFutureHandlers"></class>
<doc><![CDATA[
    Upload handers that have handled a file and do not want future handlers to
    run should raise this exception instead of returning None.
    ]]></doc>
<class name="FileUploadHandler"></class>
<doc><![CDATA[
    Base class for streaming upload handlers.
    ]]></doc>
<attribute name="chunk_size" type="int"><value><![CDATA[65536]]></value>
</attribute>
<function name="handle_raw_input"><doc><![CDATA[
        Handle the raw input from the client.

        Parameters:

            :input_data:
                An object that supports reading via .read().
            :META:
                ``request.META``.
            :content_length:
                The (integer) value of the Content-Length header from the
                client.
            :boundary: The boundary from the Content-Type header. Be sure to
                prepend two '--'.
        ]]></doc>
<argument name="self"></argument>
<argument name="input_data"></argument>
<argument name="META"></argument>
<argument name="content_length"></argument>
<argument name="boundary"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
</function>
<function name="upload_complete"><doc><![CDATA[
        Signal that the upload is complete. Subclasses should perform cleanup
        that is necessary for this handler.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="file_complete"><doc><![CDATA[
        Signal that a file has completed. File size corresponds to the actual
        size accumulated by all the chunks.

        Subclasses should return a valid ``UploadedFile`` object.
        ]]></doc>
<argument name="self"></argument>
<argument name="file_size"></argument>
</function>
<function name="new_file"><doc><![CDATA[
        Signal that a new file has been started.

        Warning: As with any data from the client, you should not trust
        content_length (and sometimes won't even get it).
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
<argument name="file_name"></argument>
<argument name="content_type"></argument>
<argument name="content_length"></argument>
<argument name="charset" type="NoneType"><value></value>
</argument>
</function>
<function name="receive_data_chunk"><doc><![CDATA[
        Receive data from the streamed upload parser. ``start`` is the position
        in the file of the chunk.
        ]]></doc>
<argument name="self"></argument>
<argument name="raw_data"></argument>
<argument name="start"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<class name="UploadFileException"></class>
<doc><![CDATA[
    Any error having to do with uploading files.
    ]]></doc>
<class name="MemoryFileUploadHandler"></class>
<doc><![CDATA[
    File upload handler to stream uploads into memory (used for small files).
    ]]></doc>
<function name="handle_raw_input"><doc><![CDATA[
        Use the content_length to signal whether or not this handler should be in use.
        ]]></doc>
<argument name="self"></argument>
<argument name="input_data"></argument>
<argument name="META"></argument>
<argument name="content_length"></argument>
<argument name="boundary"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
</function>
<function name="file_complete"><doc><![CDATA[
        Return a file object if we're activated.
        ]]></doc>
<argument name="self"></argument>
<argument name="file_size"></argument>
</function>
<function name="new_file" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="receive_data_chunk"><doc><![CDATA[
        Add the data to the StringIO file.
        ]]></doc>
<argument name="self"></argument>
<argument name="raw_data"></argument>
<argument name="start"></argument>
</function>
<class name="StopUpload"></class>
<doc><![CDATA[
    This exception is raised when an upload must abort.
    ]]></doc>
<function name="__init__"><doc><![CDATA[
        If ``connection_reset`` is ``True``, Django knows will halt the upload
        without consuming the rest of the upload. This will cause the browser to
        show a "connection reset" error.
        ]]></doc>
<argument name="self"></argument>
<argument name="connection_reset" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="SkipFile"></class>
<doc><![CDATA[
    This exception is raised by an upload handler that wants to skip a given file.
    ]]></doc>
<class name="TemporaryFileUploadHandler"></class>
<doc><![CDATA[
    Upload handler that streams data into a temporary file.
    ]]></doc>
<function name="file_complete"><doc></doc>
<argument name="self"></argument>
<argument name="file_size"></argument>
</function>
<function name="new_file" args="args" kwargs="kwargs"><doc><![CDATA[
        Create the file object to append to as data is coming in.
        ]]></doc>
<argument name="self"></argument>
<argument name="file_name"></argument>
</function>
<function name="receive_data_chunk"><doc></doc>
<argument name="self"></argument>
<argument name="raw_data"></argument>
<argument name="start"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.files.uploadedfile" file="/django/core/files/uploadedfile.pyc"><doc><![CDATA[
Classes representing uploaded files.
]]></doc>
<depends name="os"></depends>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile', 'SimpleUploadedFile')]]></value>
</attribute>
<attribute name="tempfile" type="module"><value><![CDATA[<module 'django.core.files.temp' from '/usr/local/lib/python2.7/dist-packages/django/core/files/temp.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="TemporaryUploadedFile"></class>
<doc><![CDATA[
    A file uploaded to a temporary location (i.e. stream-to-disk).
    ]]></doc>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content_type"></argument>
<argument name="size"></argument>
<argument name="charset"></argument>
</function>
<function name="temporary_file_path"><doc><![CDATA[
        Returns the full path of this file.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="SimpleUploadedFile"></class>
<doc><![CDATA[
    A simple representation of a file, which just has content, size, and a name.
    ]]></doc>
<attribute name="from_dict" type="instancemethod"><value><![CDATA[<bound method type.from_dict of <class 'django.core.files.uploadedfile.SimpleUploadedFile'>>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content"></argument>
<argument name="content_type" type="str"><value><![CDATA[text/plain]]></value>
</argument>
</function>
<class name="InMemoryUploadedFile"></class>
<doc><![CDATA[
    A file uploaded into memory (i.e. stream-to-memory).
    ]]></doc>
<function name="chunks"><doc></doc>
<argument name="self"></argument>
<argument name="chunk_size" type="NoneType"><value></value>
</argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="multiple_chunks"><doc></doc>
<argument name="self"></argument>
<argument name="chunk_size" type="NoneType"><value></value>
</argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
<argument name="mode" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="file"></argument>
<argument name="field_name"></argument>
<argument name="name"></argument>
<argument name="content_type"></argument>
<argument name="size"></argument>
<argument name="charset"></argument>
</function>
<class name="UploadedFile"></class>
<doc><![CDATA[
    A abstract uploaded file (``TemporaryUploadedFile`` and
    ``InMemoryUploadedFile`` are the built-in concrete subclasses).

    An ``UploadedFile`` object behaves somewhat like a file object and
    represents some file data that the user submitted with a form.
    ]]></doc>
<attribute name="name" type="property"><value><![CDATA[<property object at 0x928c43c>]]></value>
</attribute>
<attribute name="DEFAULT_CHUNK_SIZE" type="int"><value><![CDATA[65536]]></value>
</attribute>
<function name="_get_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_name"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="file" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="content_type" type="NoneType"><value></value>
</argument>
<argument name="size" type="NoneType"><value></value>
</argument>
<argument name="charset" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.files.base" file="/django/core/files/base.pyc"><doc></doc>
<depends name="os"></depends>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="FileProxyMixin" module="django.core.files.utils"></import_class>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="ContentFile"></class>
<doc><![CDATA[
    A File-like object that takes just raw content, rather than an actual file.
    ]]></doc>
<function name="__nonzero__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
<argument name="mode" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="content"></argument>
</function>
<class name="File"></class>
<doc></doc>
<attribute name="size" type="property"><value><![CDATA[<property object at 0x92825cc>]]></value>
</attribute>
<attribute name="DEFAULT_CHUNK_SIZE" type="int"><value><![CDATA[65536]]></value>
</attribute>
<attribute name="closed" type="property"><value><![CDATA[<property object at 0x92825f4>]]></value>
</attribute>
<function name="__exit__"><doc></doc>
<argument name="self"></argument>
<argument name="exc_type"></argument>
<argument name="exc_value"></argument>
<argument name="tb"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="chunks"><doc><![CDATA[
        Read the file and yield chucks of ``chunk_size`` bytes (defaults to
        ``UploadedFile.DEFAULT_CHUNK_SIZE``).
        ]]></doc>
<argument name="self"></argument>
<argument name="chunk_size" type="NoneType"><value></value>
</argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_closed"><doc></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
<argument name="mode" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="file"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
</function>
<function name="__nonzero__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__enter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_size"><doc></doc>
<argument name="self"></argument>
<argument name="size"></argument>
</function>
<function name="_get_size"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="multiple_chunks"><doc><![CDATA[
        Returns ``True`` if you can expect multiple chunks.

        NB: If a particular file representation is in memory, subclasses should
        always return ``False`` -- there's no good reason to read from memory in
        chunks.
        ]]></doc>
<argument name="self"></argument>
<argument name="chunk_size" type="NoneType"><value></value>
</argument>
</function>
<function name="__len__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.files.utils" file="/django/core/files/utils.pyc"><doc></doc>
<class name="FileProxyMixin"></class>
<doc><![CDATA[
    A mixin class used to forward file methods to an underlaying file
    object.  The internal file object has to be called "file"::

        class FileProxy(FileProxyMixin):
            def __init__(self, file):
                self.file = file
    ]]></doc>
<attribute name="softspace" type="property"><value><![CDATA[<property object at 0x928248c>]]></value>
</attribute>
<attribute name="isatty" type="property"><value><![CDATA[<property object at 0x9282374>]]></value>
</attribute>
<attribute name="truncate" type="property"><value><![CDATA[<property object at 0x92824dc>]]></value>
</attribute>
<attribute name="encoding" type="property"><value><![CDATA[<property object at 0x92822fc>]]></value>
</attribute>
<attribute name="read" type="property"><value><![CDATA[<property object at 0x92823c4>]]></value>
</attribute>
<attribute name="flush" type="property"><value><![CDATA[<property object at 0x928234c>]]></value>
</attribute>
<attribute name="readlines" type="property"><value><![CDATA[<property object at 0x928243c>]]></value>
</attribute>
<attribute name="xreadlines" type="property"><value><![CDATA[<property object at 0x9282554>]]></value>
</attribute>
<attribute name="readline" type="property"><value><![CDATA[<property object at 0x9282414>]]></value>
</attribute>
<attribute name="seek" type="property"><value><![CDATA[<property object at 0x9282464>]]></value>
</attribute>
<attribute name="newlines" type="property"><value><![CDATA[<property object at 0x928239c>]]></value>
</attribute>
<attribute name="fileno" type="property"><value><![CDATA[<property object at 0x9282324>]]></value>
</attribute>
<attribute name="writelines" type="property"><value><![CDATA[<property object at 0x928252c>]]></value>
</attribute>
<attribute name="readinto" type="property"><value><![CDATA[<property object at 0x92823ec>]]></value>
</attribute>
<attribute name="write" type="property"><value><![CDATA[<property object at 0x9282504>]]></value>
</attribute>
<attribute name="tell" type="property"><value><![CDATA[<property object at 0x92824b4>]]></value>
</attribute>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.files.temp" file="/django/core/files/temp.pyc"><doc><![CDATA[
The temp module provides a NamedTemporaryFile that can be re-opened on any
platform. Most platforms use the standard Python tempfile.TemporaryFile class,
but MS Windows users are given a custom class.

This is needed because in Windows NT, the default implementation of
NamedTemporaryFile uses the O_TEMPORARY flag, and thus cannot be reopened [1].

1: http://mail.python.org/pipermail/python-list/2005-December/359474.html
]]></doc>
<depends name="tempfile"></depends>
<depends name="os"></depends>
<import_function name="gettempdir" module="tempfile"></import_function>
<import_function name="NamedTemporaryFile" module="tempfile"></import_function>
<import_class name="FileProxyMixin" module="django.core.files.utils"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('NamedTemporaryFile', 'gettempdir')]]></value>
</attribute>
<attribute name="tempfile" type="module"><value><![CDATA[<module 'tempfile' from '/usr/lib/python2.7/tempfile.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
</package>
<package name="django.http.utils" file="/django/http/utils.pyc"><doc><![CDATA[
Functions that modify an HTTP request or response in some way.
]]></doc>
<function name="fix_location_header"><doc><![CDATA[
    Ensures that we always use an absolute URI in any location header in the
    response. This is required by RFC 2616, section 14.30.

    Code constructing response objects is free to insert relative paths, as
    this function converts them to absolute paths.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="conditional_content_removal"><doc><![CDATA[
    Removes the content of responses for HEAD requests, 1xx, 204 and 304
    responses. Ensures compliance with RFC 2616, section 4.3.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="fix_IE_for_attach"><doc><![CDATA[
    This function will prevent Django from serving a Content-Disposition header
    while expecting the browser to cache it (only when the browser is IE). This
    leads to IE not allowing the client to download.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="fix_IE_for_vary"><doc><![CDATA[
    This function will fix the bug reported at
    http://support.microsoft.com/kb/824847/en-us?spid=8722&sid=global
    by clearing the Vary header whenever the mime-type is not safe
    enough for Internet Explorer to handle.  Poor thing.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
</package>
<package name="django.utils.checksums" file="/django/utils/checksums.pyc"><doc><![CDATA[
Common checksum routines (used in multiple localflavor/ cases, for example).
]]></doc>
<attribute name="__all__" type="list"><value><![CDATA[['luhn']]]></value>
</attribute>
<attribute name="LUHN_ODD_LOOKUP" type="tuple"><value><![CDATA[(0, 2, 4, 6, 8, 1, 3, 5, 7, 9)]]></value>
</attribute>
<function name="luhn"><doc><![CDATA[
    Checks a candidate number for validity according to the Luhn
    algorithm (used in validation of, for example, credit cards).
    Both numeric and string candidates are accepted.
    ]]></doc>
<argument name="candidate"></argument>
</function>
</package>
<package name="django.utils.autoreload" file="/django/utils/autoreload.pyc"><doc></doc>
<depends name="termios"></depends>
<depends name="sys"></depends>
<depends name="thread"></depends>
<depends name="signal"></depends>
<depends name="threading"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<attribute name="RUN_RELOADER" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="termios" type="module"><value><![CDATA[<module 'termios' from '/usr/lib/python2.7/lib-dynload/termios.so'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="thread" type="module"><value><![CDATA[<module 'thread' (built-in)>]]></value>
</attribute>
<attribute name="signal" type="module"><value><![CDATA[<module 'signal' (built-in)>]]></value>
</attribute>
<attribute name="_win" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<attribute name="_mtimes" type="dict"><value></value>
</attribute>
<function name="reloader_thread"><doc></doc>
</function>
<function name="jython_reloader"><doc></doc>
<argument name="main_func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="restart_with_reloader"><doc></doc>
</function>
<function name="code_changed"><doc></doc>
</function>
<function name="main"><doc></doc>
<argument name="main_func"></argument>
<argument name="args" type="NoneType"><value></value>
</argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
</function>
<function name="python_reloader"><doc></doc>
<argument name="main_func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="ensure_echo_on"><doc></doc>
</function>
</package>
<package name="django.utils.xmlutils" file="/django/utils/xmlutils.pyc"><doc><![CDATA[
Utilities for XML generation/parsing.
]]></doc>
<depends name="xml.sax.saxutils"></depends>
<import_class name="XMLGenerator" module="xml.sax.saxutils"></import_class>
<class name="SimplerXMLGenerator"></class>
<doc></doc>
<function name="addQuickElement"><doc><![CDATA[Convenience method for adding an element with no children]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="contents" type="NoneType"><value></value>
</argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.daemonize" file="/django/utils/daemonize.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="become_daemon"><doc><![CDATA[Robustly turn into a UNIX daemon, running in our_home_dir.]]></doc>
<argument name="our_home_dir" type="str"><value><![CDATA[.]]></value>
</argument>
<argument name="out_log" type="str"><value><![CDATA[/dev/null]]></value>
</argument>
<argument name="err_log" type="str"><value><![CDATA[/dev/null]]></value>
</argument>
<argument name="umask" type="int"><value><![CDATA[18]]></value>
</argument>
</function>
</package>
<package name="django.utils.feedgenerator" file="/django/utils/feedgenerator.pyc"><doc><![CDATA[
Syndication feed generation library -- used for generating RSS, etc.

Sample usage:

>>> from django.utils import feedgenerator
>>> feed = feedgenerator.Rss201rev2Feed(
...     title=u"Poynter E-Media Tidbits",
...     link=u"http://www.poynter.org/column.asp?id=31",
...     description=u"A group Weblog by the sharpest minds in online media/journalism/publishing.",
...     language=u"en",
... )
>>> feed.add_item(
...     title="Hello",
...     link=u"http://www.holovaty.com/test/",
...     description="Testing."
... )
>>> fp = open('test.rss', 'w')
>>> feed.write(fp, 'utf-8')
>>> fp.close()

For definitions of the different versions of RSS, see:
http://diveintomark.org/archives/2004/02/04/incompatible-rss
]]></doc>
<depends name="datetime"></depends>
<depends name="urlparse"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="SimplerXMLGenerator" module="django.utils.xmlutils"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<function name="rfc3339_date"><doc></doc>
<argument name="date"></argument>
</function>
<function name="rfc2822_date"><doc></doc>
<argument name="date"></argument>
</function>
<function name="get_tag_uri"><doc><![CDATA[
    Creates a TagURI.

    See http://diveintomark.org/archives/2004/05/28/howto-atom-id
    ]]></doc>
<argument name="url"></argument>
<argument name="date"></argument>
</function>
<class name="Atom1Feed"></class>
<doc></doc>
<attribute name="ns" type="unicode"><value><![CDATA[http://www.w3.org/2005/Atom]]></value>
</attribute>
<attribute name="mime_type" type="str"><value><![CDATA[application/atom+xml; charset=utf8]]></value>
</attribute>
<function name="root_attributes"><doc></doc>
<argument name="self"></argument>
</function>
<function name="write_items"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<function name="write"><doc></doc>
<argument name="self"></argument>
<argument name="outfile"></argument>
<argument name="encoding"></argument>
</function>
<function name="add_root_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<function name="add_item_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
<argument name="item"></argument>
</function>
<class name="DefaultFeed"></class>
<doc></doc>
<attribute name="_version" type="unicode"><value><![CDATA[2.0]]></value>
</attribute>
<function name="add_item_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
<argument name="item"></argument>
</function>
<class name="SyndicationFeed"></class>
<doc><![CDATA[Base class for all syndication feeds. Subclasses should provide write()]]></doc>
<function name="root_attributes"><doc><![CDATA[
        Return extra attributes to place on the root (i.e. feed/channel) element.
        Called from write().
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="num_items"><doc></doc>
<argument name="self"></argument>
</function>
<function name="writeString"><doc><![CDATA[
        Returns the feed in the given encoding as a string.
        ]]></doc>
<argument name="self"></argument>
<argument name="encoding"></argument>
</function>
<function name="add_item" kwargs="kwargs"><doc><![CDATA[
        Adds an item to the feed. All args are expected to be Python Unicode
        objects except pubdate, which is a datetime.datetime object, and
        enclosure, which is an instance of the Enclosure class.
        ]]></doc>
<argument name="self"></argument>
<argument name="title"></argument>
<argument name="link"></argument>
<argument name="description"></argument>
<argument name="author_email" type="NoneType"><value></value>
</argument>
<argument name="author_name" type="NoneType"><value></value>
</argument>
<argument name="author_link" type="NoneType"><value></value>
</argument>
<argument name="pubdate" type="NoneType"><value></value>
</argument>
<argument name="comments" type="NoneType"><value></value>
</argument>
<argument name="unique_id" type="NoneType"><value></value>
</argument>
<argument name="enclosure" type="NoneType"><value></value>
</argument>
<argument name="categories" type="tuple"><value></value>
</argument>
<argument name="item_copyright" type="NoneType"><value></value>
</argument>
<argument name="ttl" type="NoneType"><value></value>
</argument>
</function>
<function name="write"><doc><![CDATA[
        Outputs the feed in the given encoding to outfile, which is a file-like
        object. Subclasses should override this.
        ]]></doc>
<argument name="self"></argument>
<argument name="outfile"></argument>
<argument name="encoding"></argument>
</function>
<function name="add_root_elements"><doc><![CDATA[
        Add elements in the root (i.e. feed/channel) element. Called
        from write().
        ]]></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<function name="add_item_elements"><doc><![CDATA[
        Add elements on each item (i.e. item/entry) element.
        ]]></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
<argument name="item"></argument>
</function>
<function name="item_attributes"><doc><![CDATA[
        Return extra attributes to place on each item (i.e. item/entry) element.
        ]]></doc>
<argument name="self"></argument>
<argument name="item"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="title"></argument>
<argument name="link"></argument>
<argument name="description"></argument>
<argument name="language" type="NoneType"><value></value>
</argument>
<argument name="author_email" type="NoneType"><value></value>
</argument>
<argument name="author_name" type="NoneType"><value></value>
</argument>
<argument name="author_link" type="NoneType"><value></value>
</argument>
<argument name="subtitle" type="NoneType"><value></value>
</argument>
<argument name="categories" type="NoneType"><value></value>
</argument>
<argument name="feed_url" type="NoneType"><value></value>
</argument>
<argument name="feed_copyright" type="NoneType"><value></value>
</argument>
<argument name="feed_guid" type="NoneType"><value></value>
</argument>
<argument name="ttl" type="NoneType"><value></value>
</argument>
</function>
<function name="latest_post_date"><doc><![CDATA[
        Returns the latest item's pubdate. If none of them have a pubdate,
        this returns the current date/time.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="RssFeed"></class>
<doc></doc>
<attribute name="mime_type" type="str"><value><![CDATA[application/rss+xml]]></value>
</attribute>
<function name="write"><doc></doc>
<argument name="self"></argument>
<argument name="outfile"></argument>
<argument name="encoding"></argument>
</function>
<function name="add_root_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<function name="endChannelElement"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<function name="rss_attributes"><doc></doc>
<argument name="self"></argument>
</function>
<function name="write_items"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
</function>
<class name="RssUserland091Feed"></class>
<doc></doc>
<attribute name="_version" type="unicode"><value><![CDATA[0.91]]></value>
</attribute>
<function name="add_item_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
<argument name="item"></argument>
</function>
<class name="Rss201rev2Feed"></class>
<doc></doc>
<attribute name="_version" type="unicode"><value><![CDATA[2.0]]></value>
</attribute>
<function name="add_item_elements"><doc></doc>
<argument name="self"></argument>
<argument name="handler"></argument>
<argument name="item"></argument>
</function>
<class name="Enclosure"></class>
<doc><![CDATA[Represents an RSS enclosure]]></doc>
<function name="__init__"><doc><![CDATA[All args are expected to be Python Unicode objects]]></doc>
<argument name="self"></argument>
<argument name="url"></argument>
<argument name="length"></argument>
<argument name="mime_type"></argument>
</function>
</package>
<package name="django.utils.crypto" file="/django/utils/crypto.pyc"><doc><![CDATA[
Django's standard crypto functions and utilities.
]]></doc>
<depends name="hmac"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="sha_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<attribute name="hmac" type="module"><value><![CDATA[<module 'hmac' from '/usr/lib/python2.7/hmac.pyc'>]]></value>
</attribute>
<function name="salted_hmac"><doc><![CDATA[
    Returns the HMAC-SHA1 of 'value', using a key generated from key_salt and a
    secret (which defaults to settings.SECRET_KEY).

    A different key_salt should be passed in for every application of HMAC.
    ]]></doc>
<argument name="key_salt"></argument>
<argument name="value"></argument>
<argument name="secret" type="NoneType"><value></value>
</argument>
</function>
<function name="constant_time_compare"><doc><![CDATA[
    Returns True if the two strings are equal, False otherwise.

    The time taken is independent of the number of characters that match.
    ]]></doc>
<argument name="val1"></argument>
<argument name="val2"></argument>
</function>
</package>
<package name="django.utils.synch" file="/django/utils/synch.pyc"><doc><![CDATA[
Synchronization primitives:

    - reader-writer lock (preference to writers)

(Contributed to Django by eugene@lazutkin.com)
]]></doc>
<depends name="threading"></depends>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<class name="RWLock"></class>
<doc><![CDATA[
    Classic implementation of reader-writer lock with preference to writers.

    Readers can access a resource simultaneously.
    Writers get an exclusive access.

    API is self-descriptive:
        reader_enters()
        reader_leaves()
        writer_enters()
        writer_leaves()
    ]]></doc>
<function name="writer_enters"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reader_enters"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reader_leaves"><doc></doc>
<argument name="self"></argument>
</function>
<function name="writer_leaves"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.utils.itercompat" file="/django/utils/itercompat.pyc"><doc><![CDATA[
Providing iterator functions that are not in all version of Python we support.
Where possible, we try to use the system-native version and only fall back to
these implementations if necessary.
]]></doc>
<depends name="itertools"></depends>
<import_class name="product" module="itertools"></import_class>
<attribute name="itertools" type="module"><value><![CDATA[<module 'itertools' (built-in)>]]></value>
</attribute>
<function name="any"><doc></doc>
<argument name="iterable"></argument>
</function>
<function name="is_iterable"><doc><![CDATA[A implementation independent way of checking for iterables]]></doc>
<argument name="x"></argument>
</function>
<function name="all"><doc></doc>
<argument name="iterable"></argument>
</function>
</package>
<package name="django.utils.formats" file="/django/utils/formats.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="decimal"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="check_for_language" module="django.utils.translation"></import_function>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="to_locale" module="django.utils.translation"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="_format_modules_cache" type="dict"><value></value>
</attribute>
<attribute name="_format_cache" type="dict"><value></value>
</attribute>
<attribute name="dateformat" type="module"><value><![CDATA[<module 'django.utils.dateformat' from '/usr/local/lib/python2.7/dist-packages/django/utils/dateformat.pyc'>]]></value>
</attribute>
<attribute name="numberformat" type="module"><value><![CDATA[<module 'django.utils.numberformat' from '/usr/local/lib/python2.7/dist-packages/django/utils/numberformat.pyc'>]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<function name="get_format_modules"><doc><![CDATA[
    Returns a list of the format modules found
    ]]></doc>
<argument name="reverse" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="reset_format_cache"><doc><![CDATA[Clear any cached formats.

    This method is provided primarily for testing purposes,
    so that the effects of cached formats can be removed.
    ]]></doc>
</function>
<function name="get_format"><doc><![CDATA[
    For a specific format type, returns the format for the current
    language (locale), defaults to the format in the settings.
    format_type is the name of the format, e.g. 'DATE_FORMAT'

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="format_type"></argument>
<argument name="lang" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="localize"><doc><![CDATA[
    Checks if value is a localizable type (date, number...) and returns it
    formatted as a string using current locale format.

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="iter_format_modules"><doc><![CDATA[
    Does the heavy lifting of finding format modules.
    ]]></doc>
<argument name="lang"></argument>
</function>
<function name="localize_input"><doc><![CDATA[
    Checks if an input value is a localizable type and returns it
    formatted with the appropriate formatting string of the current locale.
    ]]></doc>
<argument name="value"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="sanitize_separators"><doc><![CDATA[
    Sanitizes a value according to the current decimal and
    thousand separator setting. Used with form field input.
    ]]></doc>
<argument name="value"></argument>
</function>
<function name="time_format"><doc><![CDATA[
    Formats a datetime.time object using a localizable format

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="format" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="number_format"><doc><![CDATA[
    Formats a numeric value using localization settings

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="decimal_pos" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="date_format"><doc><![CDATA[
    Formats a datetime.date or datetime.datetime object using a
    localizable format

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="format" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.html" file="/django/utils/html.pyc"><doc><![CDATA[HTML utilities suitable for global use.]]></doc>
<depends name="re"></depends>
<depends name="string"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="urlquote" module="django.utils.http"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="punctuation_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9041370>]]></value>
</attribute>
<attribute name="trailing_empty_content_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x903a938>]]></value>
</attribute>
<attribute name="LEADING_PUNCTUATION" type="list"><value><![CDATA[['(', '<', '&lt;']]]></value>
</attribute>
<attribute name="html_gunk_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9041840>]]></value>
</attribute>
<attribute name="_js_escapes" type="tuple"><value><![CDATA[(('\\', '\\u005C'), ("'", '\\u0027'), ('"', '\\u0022'), ('>', '\\u003E'), ('<', '\\u003C'), ('&', '\\u0026'), ('=', '\\u003D'), ('-', '\\u002D'), (';', '\\u003B'), (u'\u2028', '\\u2028'), (u'\u2029', '\\u2029'), ('\x00', '\\u0000'), ('\x01', '\\u0001'), ('\x02', '\\u0002'), ('\x03', '\\u0003'), ('\x04', '\\u0004'), ('\x05', '\\u0005'), ('\x06', '\\u0006'), ('\x07', '\\u0007'), ('\x08', '\\u0008'), ('\t', '\\u0009'), ('\n', '\\u000A'), ('\x0b', '\\u000B'), ('\x0c', '\\u000C'), ('\r', '\\u000D'), ('\x0e', '\\u000E'), ('\x0f', '\\u000F'), ('\x10', '\\u0010'), ('\x11', '\\u0011'), ('\x12', '\\u0012'), ('\x13', '\\u0013'), ('\x14', '\\u0014'), ('\x15', '\\u0015'), ('\x16', '\\u0016'), ('\x17', '\\u0017'), ('\x18', '\\u0018'), ('\x19', '\\u0019'), ('\x1a', '\\u001A'), ('\x1b', '\\u001B'), ('\x1c', '\\u001C'), ('\x1d', '\\u001D'), ('\x1e', '\\u001E'), ('\x1f', '\\u001F'))]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="link_target_attribute_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9065320>]]></value>
</attribute>
<attribute name="DOTS" type="list"><value><![CDATA[['&middot;', '*', '\xe2\x80\xa2', '&#149;', '&bull;', '&#8226;']]]></value>
</attribute>
<attribute name="word_split_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb73a5c20>]]></value>
</attribute>
<attribute name="string" type="module"><value><![CDATA[<module 'string' from '/usr/lib/python2.7/string.pyc'>]]></value>
</attribute>
<attribute name="TRAILING_PUNCTUATION" type="list"><value><![CDATA[['.', ',', ')', '>', '\n', '&gt;']]]></value>
</attribute>
<attribute name="z" type="int"><value><![CDATA[31]]></value>
</attribute>
<attribute name="unencoded_ampersands_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9065220>]]></value>
</attribute>
<attribute name="simple_email_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x903d8f8>]]></value>
</attribute>
<attribute name="hard_coded_bullets_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x90423c0>]]></value>
</attribute>
<attribute name="_base_js_escapes" type="tuple"><value><![CDATA[(('\\', '\\u005C'), ("'", '\\u0027'), ('"', '\\u0022'), ('>', '\\u003E'), ('<', '\\u003C'), ('&', '\\u0026'), ('=', '\\u003D'), ('-', '\\u002D'), (';', '\\u003B'), (u'\u2028', '\\u2028'), (u'\u2029', '\\u2029'))]]></value>
</attribute>
<function name="strip_entities" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all entities (&something;) stripped.]]></doc>
</function>
<function name="clean_html" args="args" kwargs="kwargs"><doc><![CDATA[
    Clean the given HTML.  Specifically, do the following:
        * Convert <b> and <i> to <strong> and <em>.
        * Encode all ampersands correctly.
        * Remove all "target" attributes from <a> tags.
        * Remove extraneous HTML, such as presentational tags that open and
          immediately close and <br clear="all">.
        * Convert hard-coded bullets into HTML unordered lists.
        * Remove stuff like "<p>&nbsp;&nbsp;</p>", but only if it's at the
          bottom of the text.
    ]]></doc>
</function>
<function name="escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the given HTML with ampersands, quotes and angle brackets encoded.
    ]]></doc>
</function>
<function name="linebreaks" args="args" kwargs="kwargs"><doc><![CDATA[Converts newlines into <p> and <br />s.]]></doc>
</function>
<function name="strip_tags" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all tags stripped.]]></doc>
</function>
<function name="urlize" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts any URLs in text into clickable links.

    Works on http://, https://, www. links and links ending in .org, .net or
    .com. Links can have trailing punctuation (periods, commas, close-parens)
    and leading punctuation (opening parens) and it'll still do the right
    thing.

    If trim_url_limit is not None, the URLs in link text longer than this limit
    will truncated to trim_url_limit-3 characters and appended with an elipsis.

    If nofollow is True, the URLs in link text will get a rel="nofollow"
    attribute.

    If autoescape is True, the link text and URLs will get autoescaped.
    ]]></doc>
</function>
<function name="fix_ampersands" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all unencoded ampersands encoded correctly.]]></doc>
</function>
<function name="conditional_escape"><doc><![CDATA[
    Similar to escape(), except that it doesn't operate on pre-escaped strings.
    ]]></doc>
<argument name="html"></argument>
</function>
<function name="strip_spaces_between_tags" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with spaces between tags removed.]]></doc>
</function>
<function name="escapejs" args="args" kwargs="kwargs"><doc><![CDATA[Hex encodes characters for use in JavaScript strings.]]></doc>
</function>
</package>
<package name="django.utils.hashcompat" file="/django/utils/hashcompat.pyc"><doc><![CDATA[
The md5 and sha modules are deprecated since Python 2.5, replaced by the
hashlib module containing both hash algorithms. Here, we provide a common
interface to the md5 and sha constructors, depending on system version.
]]></doc>
<depends name="hashlib"></depends>
<depends name="sys"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="sha_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="md5_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<attribute name="hashlib" type="module"><value><![CDATA[<module 'hashlib' from '/usr/lib/python2.7/hashlib.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
</package>
<package name="django.utils.safestring" file="/django/utils/safestring.pyc"><doc><![CDATA[
Functions for working with "safe strings": strings that can be displayed safely
without further escaping in HTML. Marking something as a "safe string" means
that the producer of the string has already turned characters that should not
be interpreted by the HTML engine (e.g. '<') into the appropriate entities.
]]></doc>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="Promise" module="django.utils.functional"></import_class>
<function name="mark_safe"><doc><![CDATA[
    Explicitly mark a string as safe for (HTML) output purposes. The returned
    object can be used everywhere a string or unicode object is appropriate.

    Can be called multiple times on a single string.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="mark_for_escaping"><doc><![CDATA[
    Explicitly mark a string as requiring HTML escaping upon output. Has no
    effect on SafeData subclasses.

    Can be called multiple times on a single string (the resulting escaping is
    only applied once).
    ]]></doc>
<argument name="s"></argument>
</function>
<class name="EscapeData"></class>
<doc></doc>
<class name="SafeData"></class>
<doc></doc>
<class name="SafeString"></class>
<doc><![CDATA[
    A string subclass that has been specifically marked as "safe" (requires no
    further escaping) for HTML output purposes.
    ]]></doc>
<import_function name="decode" module="django.utils.functional"></import_function>
<function name="_proxy_method" args="args" kwargs="kwargs"><doc><![CDATA[
        Wrap a call to a normal unicode method up so that we return safe
        results. The method that is being wrapped is passed in the 'method'
        argument.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__add__"><doc><![CDATA[
        Concatenating a safe string with another safe string or safe unicode
        object is safe. Otherwise, the result is no longer safe.
        ]]></doc>
<argument name="self"></argument>
<argument name="rhs"></argument>
</function>
<class name="SafeUnicode"></class>
<doc><![CDATA[
    A unicode subclass that has been specifically marked as "safe" for HTML
    output purposes.
    ]]></doc>
<import_function name="encode" module="django.utils.functional"></import_function>
<function name="_proxy_method" args="args" kwargs="kwargs"><doc><![CDATA[
        Wrap a call to a normal unicode method up so that we return safe
        results. The method that is being wrapped is passed in the 'method'
        argument.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__add__"><doc><![CDATA[
        Concatenating a safe unicode object with another safe string or safe
        unicode object is safe. Otherwise, the result is no longer safe.
        ]]></doc>
<argument name="self"></argument>
<argument name="rhs"></argument>
</function>
<class name="EscapeString"></class>
<doc><![CDATA[
    A string that should be HTML-escaped when output.
    ]]></doc>
<class name="EscapeUnicode"></class>
<doc><![CDATA[
    A unicode object that should be HTML-escaped when output.
    ]]></doc>
</package>
<package name="django.utils.copycompat" file="/django/utils/copycompat.pyc"><doc><![CDATA[
Fixes Python 2.4's failure to deepcopy unbound functions.
]]></doc>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="Error" module="copy"></import_class>
</package>
<package name="django.utils._os" file="/django/utils/_os.pyc"><doc></doc>
<depends name="stat"></depends>
<depends name="os"></depends>
<depends name="posixpath"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="join" module="posixpath"></import_function>
<import_function name="abspath" module="posixpath"></import_function>
<import_function name="isabs" module="posixpath"></import_function>
<import_function name="normcase" module="posixpath"></import_function>
<import_function name="normpath" module="posixpath"></import_function>
<attribute name="stat" type="module"><value><![CDATA[<module 'stat' from '/usr/lib/python2.7/stat.pyc'>]]></value>
</attribute>
<attribute name="sep" type="str"><value><![CDATA[/]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="safe_join" args="paths"><doc><![CDATA[
    Joins one or more path components to the base path component intelligently.
    Returns a normalized, absolute version of the final path.

    The final path must be located inside of the base path component (otherwise
    a ValueError is raised).
    ]]></doc>
<argument name="base"></argument>
</function>
<function name="rmtree_errorhandler"><doc><![CDATA[
    On Windows, some files are read-only (e.g. in in .svn dirs), so when
    rmtree() tries to remove them, an exception is thrown.
    We catch that here, remove the read-only attribute, and hopefully
    continue without problems.
    ]]></doc>
<argument name="func"></argument>
<argument name="path"></argument>
<argument name="exc_info"></argument>
</function>
<function name="abspathu"><doc><![CDATA[
        Version of os.path.abspath that uses the unicode representation
        of the current working directory, thus avoiding a UnicodeDecodeError
        in join when the cwd has non-ASCII characters.
        ]]></doc>
<argument name="path"></argument>
</function>
</package>
<package name="django.utils.module_loading" file="/django/utils/module_loading.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="imp"></depends>
<depends name="os"></depends>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="imp" type="module"><value><![CDATA[<module 'imp' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="module_has_submodule"><doc><![CDATA[See if 'module' is in 'package'.]]></doc>
<argument name="package"></argument>
<argument name="module_name"></argument>
</function>
</package>
<package name="django.utils.dates" file="/django/utils/dates.pyc"><doc><![CDATA[Commonly-used date structures]]></doc>
<import_function name="pgettext_lazy" module="django.utils.translation"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="MONTHS_3" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908d2ac>, 2: <django.utils.functional.__proxy__ object at 0x908d2ec>, 3: <django.utils.functional.__proxy__ object at 0x908d32c>, 4: <django.utils.functional.__proxy__ object at 0x908d36c>, 5: <django.utils.functional.__proxy__ object at 0x908d3ac>, 6: <django.utils.functional.__proxy__ object at 0x908d3ec>, 7: <django.utils.functional.__proxy__ object at 0x908d42c>, 8: <django.utils.functional.__proxy__ object at 0x908d46c>, 9: <django.utils.functional.__proxy__ object at 0x908d4ac>, 10: <django.utils.functional.__proxy__ object at 0x908d4ec>, 11: <django.utils.functional.__proxy__ object at 0x908d52c>, 12: <django.utils.functional.__proxy__ object at 0x908d56c>}]]></value>
</attribute>
<attribute name="MONTHS_AP" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908d58c>, 2: <django.utils.functional.__proxy__ object at 0x908d5ac>, 3: <django.utils.functional.__proxy__ object at 0x908d5cc>, 4: <django.utils.functional.__proxy__ object at 0x908dc8c>, 5: <django.utils.functional.__proxy__ object at 0x908dcac>, 6: <django.utils.functional.__proxy__ object at 0x908dccc>, 7: <django.utils.functional.__proxy__ object at 0x908dcec>, 8: <django.utils.functional.__proxy__ object at 0x908dd0c>, 9: <django.utils.functional.__proxy__ object at 0x908dd2c>, 10: <django.utils.functional.__proxy__ object at 0x908dd4c>, 11: <django.utils.functional.__proxy__ object at 0x908dd6c>, 12: <django.utils.functional.__proxy__ object at 0x908dd8c>}]]></value>
</attribute>
<attribute name="MONTHS_ALT" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908ddac>, 2: <django.utils.functional.__proxy__ object at 0x908ddcc>, 3: <django.utils.functional.__proxy__ object at 0x908ddec>, 4: <django.utils.functional.__proxy__ object at 0x908de0c>, 5: <django.utils.functional.__proxy__ object at 0x908de2c>, 6: <django.utils.functional.__proxy__ object at 0x908de4c>, 7: <django.utils.functional.__proxy__ object at 0x908de6c>, 8: <django.utils.functional.__proxy__ object at 0x908de8c>, 9: <django.utils.functional.__proxy__ object at 0x908deac>, 10: <django.utils.functional.__proxy__ object at 0x908decc>, 11: <django.utils.functional.__proxy__ object at 0x908deec>, 12: <django.utils.functional.__proxy__ object at 0x908df0c>}]]></value>
</attribute>
<attribute name="MONTHS" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9087f8c>, 2: <django.utils.functional.__proxy__ object at 0x9087fcc>, 3: <django.utils.functional.__proxy__ object at 0x908d02c>, 4: <django.utils.functional.__proxy__ object at 0x908d06c>, 5: <django.utils.functional.__proxy__ object at 0x908d0ac>, 6: <django.utils.functional.__proxy__ object at 0x908d0ec>, 7: <django.utils.functional.__proxy__ object at 0x908d12c>, 8: <django.utils.functional.__proxy__ object at 0x908d16c>, 9: <django.utils.functional.__proxy__ object at 0x908d1ac>, 10: <django.utils.functional.__proxy__ object at 0x908d1ec>, 11: <django.utils.functional.__proxy__ object at 0x908d22c>, 12: <django.utils.functional.__proxy__ object at 0x908d26c>}]]></value>
</attribute>
<attribute name="WEEKDAYS_ABBR" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9087dcc>, 1: <django.utils.functional.__proxy__ object at 0x9087e0c>, 2: <django.utils.functional.__proxy__ object at 0x9087e4c>, 3: <django.utils.functional.__proxy__ object at 0x9087e8c>, 4: <django.utils.functional.__proxy__ object at 0x9087ecc>, 5: <django.utils.functional.__proxy__ object at 0x9087f0c>, 6: <django.utils.functional.__proxy__ object at 0x9087f4c>}]]></value>
</attribute>
<attribute name="WEEKDAYS" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9081f2c>, 1: <django.utils.functional.__proxy__ object at 0x9081f4c>, 2: <django.utils.functional.__proxy__ object at 0x9087c8c>, 3: <django.utils.functional.__proxy__ object at 0x9087ccc>, 4: <django.utils.functional.__proxy__ object at 0x9087d0c>, 5: <django.utils.functional.__proxy__ object at 0x9087d4c>, 6: <django.utils.functional.__proxy__ object at 0x9087d8c>}]]></value>
</attribute>
<attribute name="WEEKDAYS_REV" type="dict"><value><![CDATA[{'monday': 0, 'tuesday': 1, 'friday': 4, 'wednesday': 2, 'thursday': 3, 'sunday': 6, 'saturday': 5}]]></value>
</attribute>
<attribute name="MONTHS_3_REV" type="dict"><value><![CDATA[{'mar': 3, 'sep': 9, 'may': 5, 'jun': 6, 'jul': 7, 'nov': 11, 'feb': 2, 'aug': 8, 'jan': 1, 'apr': 4, 'dec': 12, 'oct': 10}]]></value>
</attribute>
</package>
<package name="django.utils.log" file="/django/utils/log.pyc"><doc></doc>
<depends name="logging"></depends>
<depends name="sys"></depends>
<depends name="logging.config"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_function name="dictConfig" module="logging.config"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_class name="NullHandler" module="logging"></import_class>
<attribute name="logging" type="module"><value><![CDATA[<module 'logging' from '/usr/lib/python2.7/logging/__init__.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="mail" type="module"><value><![CDATA[<module 'django.core.mail' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/__init__.pyc'>]]></value>
</attribute>
<class name="AdminEmailHandler"></class>
<doc></doc>
<function name="emit"><doc></doc>
<argument name="self"></argument>
<argument name="record"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="include_html" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.core.mail" file="/django/core/mail/__init__.pyc"><doc><![CDATA[
Tools for sending email.
]]></doc>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="forbid_multi_line_headers" module="django.core.mail.message"></import_function>
<import_function name="make_msgid" module="django.core.mail.message"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="SafeMIMEText" module="django.core.mail.message"></import_class>
<import_class name="BadHeaderError" module="django.core.mail.message"></import_class>
<import_class name="CachedDnsName" module="django.core.mail.utils"></import_class>
<import_class name="SafeMIMEMultipart" module="django.core.mail.message"></import_class>
<import_class name="_SMTPConnection" module="django.core.mail.backends.smtp"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="EmailMultiAlternatives" module="django.core.mail.message"></import_class>
<import_class name="EmailMessage" module="django.core.mail.message"></import_class>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.core.mail.utils' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/utils.pyc'>]]></value>
</attribute>
<attribute name="message" type="module"><value><![CDATA[<module 'django.core.mail.message' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/message.pyc'>]]></value>
</attribute>
<attribute name="backends" type="module"><value><![CDATA[<module 'django.core.mail.backends' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/backends/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_ATTACHMENT_MIME_TYPE" type="str"><value><![CDATA[application/octet-stream]]></value>
</attribute>
<function name="send_mass_mail"><doc><![CDATA[
    Given a datatuple of (subject, message, from_email, recipient_list), sends
    each message to each recipient list. Returns the number of e-mails sent.

    If from_email is None, the DEFAULT_FROM_EMAIL setting is used.
    If auth_user and auth_password are set, they're used to log in.
    If auth_user is None, the EMAIL_HOST_USER setting is used.
    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.

    Note: The API for this method is frozen. New code wanting to extend the
    functionality should use the EmailMessage class directly.
    ]]></doc>
<argument name="datatuple"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auth_user" type="NoneType"><value></value>
</argument>
<argument name="auth_password" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="get_connection" kwargs="kwds"><doc><![CDATA[Load an e-mail backend and return an instance of it.

    If backend is None (default) settings.EMAIL_BACKEND is used.

    Both fail_silently and other keyword arguments are used in the
    constructor of the backend.
    ]]></doc>
<argument name="backend" type="NoneType"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="mail_managers"><doc><![CDATA[Sends a message to the managers, as defined by the MANAGERS setting.]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="html_message" type="NoneType"><value></value>
</argument>
</function>
<function name="mail_admins"><doc><![CDATA[Sends a message to the admins, as defined by the ADMINS setting.]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="html_message" type="NoneType"><value></value>
</argument>
</function>
<function name="send_mail"><doc><![CDATA[
    Easy wrapper for sending a single message to a recipient list. All members
    of the recipient list will see the other recipients in the 'To' field.

    If auth_user is None, the EMAIL_HOST_USER setting is used.
    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.

    Note: The API for this method is frozen. New code wanting to extend the
    functionality should use the EmailMessage class directly.
    ]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="from_email"></argument>
<argument name="recipient_list"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auth_user" type="NoneType"><value></value>
</argument>
<argument name="auth_password" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<class name="SMTPConnection"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwds"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.mail.backends.smtp" file="/django/core/mail/backends/smtp.pyc"><doc><![CDATA[SMTP email backend class.]]></doc>
<depends name="socket"></depends>
<depends name="threading"></depends>
<depends name="smtplib"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_function name="sanitize_address" module="django.core.mail.message"></import_function>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<attribute name="socket" type="module"><value><![CDATA[<module 'socket' from '/usr/lib/python2.7/socket.pyc'>]]></value>
</attribute>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<attribute name="smtplib" type="module"><value><![CDATA[<module 'smtplib' from '/usr/lib/python2.7/smtplib.pyc'>]]></value>
</attribute>
<class name="EmailBackend"></class>
<doc><![CDATA[
    A wrapper that manages the SMTP network connection.
    ]]></doc>
<function name="send_messages"><doc><![CDATA[
        Sends one or more EmailMessage objects and returns the number of email
        messages sent.
        ]]></doc>
<argument name="self"></argument>
<argument name="email_messages"></argument>
</function>
<function name="_send"><doc><![CDATA[A helper method that does the actual sending.]]></doc>
<argument name="self"></argument>
<argument name="email_message"></argument>
</function>
<function name="close"><doc><![CDATA[Closes the connection to the email server.]]></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc><![CDATA[
        Ensures we have a connection to the email server. Returns whether or
        not a new connection was required (True or False).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="host" type="NoneType"><value></value>
</argument>
<argument name="port" type="NoneType"><value></value>
</argument>
<argument name="username" type="NoneType"><value></value>
</argument>
<argument name="password" type="NoneType"><value></value>
</argument>
<argument name="use_tls" type="NoneType"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.core.mail.backends.base" file="/django/core/mail/backends/base.pyc"><doc><![CDATA[Base email backend class.]]></doc>
<class name="BaseEmailBackend"></class>
<doc><![CDATA[
    Base class for email backend implementations.

    Subclasses must at least overwrite send_messages().
    ]]></doc>
<function name="send_messages"><doc><![CDATA[
        Sends one or more EmailMessage objects and returns the number of email
        messages sent.
        ]]></doc>
<argument name="self"></argument>
<argument name="email_messages"></argument>
</function>
<function name="close"><doc><![CDATA[Close a network connection.]]></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc><![CDATA[Open a network connection.

        This method can be overwritten by backend implementations to
        open a network connection.

        It's up to the backend implementation to track the status of
        a network connection if it's needed by the backend.

        This method can be called by applications to force a single
        network connection to be used when sending mails. See the
        send_messages() method of the SMTP backend for a reference
        implementation.

        The default implementation does nothing.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.core.mail.backends" file="/django/core/mail/backends/__init__.pyc"><doc></doc>
<attribute name="smtp" type="module"><value><![CDATA[<module 'django.core.mail.backends.smtp' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/backends/smtp.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.mail.backends.base' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/backends/base.pyc'>]]></value>
</attribute>
</package>
<package name="django.core.mail.backends.console" file="/django/core/mail/backends/console.pyc"><doc><![CDATA[
Email backend that writes messages to console instead of sending them.
]]></doc>
<depends name="sys"></depends>
<depends name="threading"></depends>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<class name="EmailBackend"></class>
<doc></doc>
<function name="send_messages"><doc><![CDATA[Write all messages to the stream in a thread-safe way.]]></doc>
<argument name="self"></argument>
<argument name="email_messages"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.mail.backends.filebased" file="/django/core/mail/backends/filebased.pyc"><doc><![CDATA[Email backend that writes messages to a file.]]></doc>
<depends name="datetime"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ConsoleEmailBackend" module="django.core.mail.backends.console"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="EmailBackend"></class>
<doc></doc>
<function name="_get_filename"><doc><![CDATA[Return a unique file name.]]></doc>
<argument name="self"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.mail.backends.dummy" file="/django/core/mail/backends/dummy.pyc"><doc><![CDATA[
Dummy email backend that does nothing.
]]></doc>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<class name="EmailBackend"></class>
<doc></doc>
<function name="send_messages"><doc></doc>
<argument name="self"></argument>
<argument name="email_messages"></argument>
</function>
</package>
<package name="django.core.mail.backends.locmem" file="/django/core/mail/backends/locmem.pyc"><doc><![CDATA[
Backend for test environment.
]]></doc>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<attribute name="mail" type="module"><value><![CDATA[<module 'django.core.mail' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/__init__.pyc'>]]></value>
</attribute>
<class name="EmailBackend"></class>
<doc><![CDATA[A email backend for use during test sessions.

    The test connection stores email messages in a dummy outbox,
    rather than sending them out on the wire.

    The dummy outbox is accessible through the outbox instance attribute.
    ]]></doc>
<function name="send_messages"><doc><![CDATA[Redirect messages to the dummy outbox]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.mail.message" file="/django/core/mail/message.pyc"><doc></doc>
<depends name="mimetypes"></depends>
<depends name="random"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<depends name="email"></depends>
<depends name="email.generator"></depends>
<depends name="email.mime.text"></depends>
<depends name="email.mime.base"></depends>
<depends name="email.utils"></depends>
<depends name="email.mime.multipart"></depends>
<depends name="cStringIO"></depends>
<depends name="email.header"></depends>
<import_attribute name="Encoders" type="LazyImporter" module="email"></import_attribute>
<import_attribute name="Charset" type="LazyImporter" module="email"></import_attribute>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="formataddr" module="email.utils"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="formatdate" module="email.utils"></import_function>
<import_function name="getaddresses" module="email.utils"></import_function>
<import_function name="parseaddr" module="email.utils"></import_function>
<import_class name="Generator" module="email.generator"></import_class>
<import_class name="MIMEText" module="email.mime.text"></import_class>
<import_class name="MIMEBase" module="email.mime.base"></import_class>
<import_class name="MIMEMultipart" module="email.mime.multipart"></import_class>
<import_class name="Header" module="email.header"></import_class>
<attribute name="ADDRESS_HEADERS" type="set"><value><![CDATA[set(['resent-bcc', 'from', 'sender', 'cc', 'resent-cc', 'resent-to', 'bcc', 'resent-sender', 'to', 'resent-from', 'reply-to'])]]></value>
</attribute>
<attribute name="mimetypes" type="module"><value><![CDATA[<module 'mimetypes' from '/usr/lib/python2.7/mimetypes.pyc'>]]></value>
</attribute>
<attribute name="random" type="module"><value><![CDATA[<module 'random' from '/usr/lib/python2.7/random.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_ATTACHMENT_MIME_TYPE" type="str"><value><![CDATA[application/octet-stream]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="forbid_multi_line_headers"><doc><![CDATA[Forbids multi-line headers, to prevent header injection.]]></doc>
<argument name="name"></argument>
<argument name="val"></argument>
<argument name="encoding"></argument>
</function>
<function name="make_msgid"><doc><![CDATA[Returns a string suitable for RFC 2822 compliant Message-ID, e.g:

    <20020201195627.33539.96671@nightshade.la.mastaler.com>

    Optional idstring if given is a string used to strengthen the
    uniqueness of the message id.
    ]]></doc>
<argument name="idstring" type="NoneType"><value></value>
</argument>
</function>
<function name="sanitize_address"><doc></doc>
<argument name="addr"></argument>
<argument name="encoding"></argument>
</function>
<class name="BadHeaderError"></class>
<doc></doc>
<class name="SafeMIMEMultipart"></class>
<doc></doc>
<function name="as_string"><doc><![CDATA[Return the entire formatted message as a string.
        Optional `unixfrom' when True, means include the Unix From_ envelope
        header.

        This overrides the default as_string() implementation to not mangle
        lines that begin with 'From '. See bug #13433 for details.
        ]]></doc>
<argument name="self"></argument>
<argument name="unixfrom" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="val"></argument>
</function>
<function name="__init__" kwargs="_params"><doc></doc>
<argument name="self"></argument>
<argument name="_subtype" type="str"><value><![CDATA[mixed]]></value>
</argument>
<argument name="boundary" type="NoneType"><value></value>
</argument>
<argument name="_subparts" type="NoneType"><value></value>
</argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
</function>
<class name="SafeMIMEText"></class>
<doc></doc>
<function name="as_string"><doc><![CDATA[Return the entire formatted message as a string.
        Optional `unixfrom' when True, means include the Unix From_ envelope
        header.

        This overrides the default as_string() implementation to not mangle
        lines that begin with 'From '. See bug #13433 for details.
        ]]></doc>
<argument name="self"></argument>
<argument name="unixfrom" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="val"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="text"></argument>
<argument name="subtype"></argument>
<argument name="charset"></argument>
</function>
<class name="EmailMultiAlternatives"></class>
<doc><![CDATA[
    A version of EmailMessage that makes it easy to send multipart/alternative
    messages. For example, including text and HTML versions of the text is
    made easier.
    ]]></doc>
<attribute name="alternative_subtype" type="str"><value><![CDATA[alternative]]></value>
</attribute>
<function name="_create_message"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
</function>
<function name="_create_alternatives"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
</function>
<function name="attach_alternative"><doc><![CDATA[Attach an alternative content representation.]]></doc>
<argument name="self"></argument>
<argument name="content"></argument>
<argument name="mimetype"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Initialize a single email message (which can be sent to multiple
        recipients).

        All strings used to create the message can be unicode strings (or UTF-8
        bytestrings). The SafeMIMEText class will handle any necessary encoding
        conversions.
        ]]></doc>
<argument name="self"></argument>
<argument name="subject" type="str"><value></value>
</argument>
<argument name="body" type="str"><value></value>
</argument>
<argument name="from_email" type="NoneType"><value></value>
</argument>
<argument name="to" type="NoneType"><value></value>
</argument>
<argument name="bcc" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="attachments" type="NoneType"><value></value>
</argument>
<argument name="headers" type="NoneType"><value></value>
</argument>
<argument name="alternatives" type="NoneType"><value></value>
</argument>
<argument name="cc" type="NoneType"><value></value>
</argument>
</function>
<class name="EmailMessage"></class>
<doc><![CDATA[
    A container for email information.
    ]]></doc>
<attribute name="encoding" type="NoneType"><value></value>
</attribute>
<attribute name="content_subtype" type="str"><value><![CDATA[plain]]></value>
</attribute>
<attribute name="mixed_subtype" type="str"><value><![CDATA[mixed]]></value>
</attribute>
<function name="_create_mime_attachment"><doc><![CDATA[
        Converts the content, mimetype pair into a MIME attachment object.
        ]]></doc>
<argument name="self"></argument>
<argument name="content"></argument>
<argument name="mimetype"></argument>
</function>
<function name="recipients"><doc><![CDATA[
        Returns a list of all recipients of the email (includes direct
        addressees as well as Cc and Bcc entries).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_create_attachment"><doc><![CDATA[
        Converts the filename, content, mimetype triple into a MIME attachment
        object.
        ]]></doc>
<argument name="self"></argument>
<argument name="filename"></argument>
<argument name="content"></argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
</function>
<function name="attach_file"><doc><![CDATA[Attaches a file from the filesystem.]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
</function>
<function name="get_connection"><doc></doc>
<argument name="self"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="message"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Initialize a single email message (which can be sent to multiple
        recipients).

        All strings used to create the message can be unicode strings
        (or UTF-8 bytestrings). The SafeMIMEText class will handle any
        necessary encoding conversions.
        ]]></doc>
<argument name="self"></argument>
<argument name="subject" type="str"><value></value>
</argument>
<argument name="body" type="str"><value></value>
</argument>
<argument name="from_email" type="NoneType"><value></value>
</argument>
<argument name="to" type="NoneType"><value></value>
</argument>
<argument name="bcc" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="attachments" type="NoneType"><value></value>
</argument>
<argument name="headers" type="NoneType"><value></value>
</argument>
<argument name="cc" type="NoneType"><value></value>
</argument>
</function>
<function name="_create_attachments"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
</function>
<function name="send"><doc><![CDATA[Sends the email message.]]></doc>
<argument name="self"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_create_message"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
</function>
<function name="attach"><doc><![CDATA[
        Attaches a file with the given filename and content. The filename can
        be omitted and the mimetype is guessed, if not provided.

        If the first parameter is a MIMEBase subclass it is inserted directly
        into the resulting message attachments.
        ]]></doc>
<argument name="self"></argument>
<argument name="filename" type="NoneType"><value></value>
</argument>
<argument name="content" type="NoneType"><value></value>
</argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.mail.utils" file="/django/core/mail/utils.pyc"><doc><![CDATA[
Email message and email sending related helper functions.
]]></doc>
<depends name="socket"></depends>
<attribute name="socket" type="module"><value><![CDATA[<module 'socket' from '/usr/lib/python2.7/socket.pyc'>]]></value>
</attribute>
<attribute name="DNS_NAME" type="CachedDnsName"><value><![CDATA[phenom]]></value>
</attribute>
<class name="CachedDnsName"></class>
<doc></doc>
<function name="get_fqdn"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.utils.translation" file="/django/utils/translation/__init__.pyc"><doc><![CDATA[
Internationalization support.
]]></doc>
<depends name="warnings"></depends>
<depends name="posixpath"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<attribute name="__all__" type="list"><value><![CDATA[['gettext', 'gettext_noop', 'gettext_lazy', 'ngettext', 'ngettext_lazy', 'string_concat', 'activate', 'deactivate', 'get_language', 'get_language_bidi', 'get_date_formats', 'get_partial_date_formats', 'check_for_language', 'to_locale', 'get_language_from_request', 'templatize', 'ugettext', 'ugettext_lazy', 'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy', 'deactivate_all', 'get_language_info']]]></value>
</attribute>
<attribute name="trans_real" type="module"><value><![CDATA[<module 'django.utils.translation.trans_real' from '/usr/local/lib/python2.7/dist-packages/django/utils/translation/trans_real.pyc'>]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="path" type="module"><value><![CDATA[<module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'>]]></value>
</attribute>
<attribute name="_trans" type="Trans"><value><![CDATA[<django.utils.translation.Trans object at 0x8f870ac>]]></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="activate"><doc></doc>
<argument name="language"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc></doc>
</function>
<function name="ugettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="pgettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="check_for_language"><doc></doc>
<argument name="lang_code"></argument>
</function>
<function name="ungettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="deactivate"><doc></doc>
</function>
<function name="ngettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="templatize"><doc></doc>
<argument name="src"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="deactivate_all"><doc></doc>
</function>
<function name="to_locale"><doc></doc>
<argument name="language"></argument>
</function>
<function name="_string_concat" args="strings"><doc><![CDATA[
    Lazy variant of string concatenation, needed for translations that are
    constructed from multiple parts.
    ]]></doc>
</function>
<function name="string_concat" args="args" kwargs="kw"><doc><![CDATA[
    Lazy variant of string concatenation, needed for translations that are
    constructed from multiple parts.
    ]]></doc>
</function>
<function name="gettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="ungettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="ngettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="get_language_bidi"><doc></doc>
</function>
<function name="npgettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="get_language_info"><doc></doc>
<argument name="lang_code"></argument>
</function>
<function name="get_partial_date_formats"><doc></doc>
</function>
<function name="ugettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_date_formats"><doc></doc>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
</package>
<package name="django.utils.translation.trans_null" file="/django/utils/translation/trans_null.pyc"><doc></doc>
<depends name="warnings"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="TECHNICAL_ID_MAP" type="dict"><value><![CDATA[{'DATETIME_FORMAT': 'N j, Y, P', 'DATE_FORMAT': 'N j, Y', 'MONTH_DAY_FORMAT': 'F j', 'DATE_WITH_TIME_FULL': 'N j, Y, P', 'TIME_FORMAT': 'P', 'YEAR_MONTH_FORMAT': 'F Y'}]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="check_for_language"><doc></doc>
<argument name="x"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc></doc>
</function>
<function name="activate"><doc></doc>
<argument name="x"></argument>
</function>
<function name="ungettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="deactivate"><doc></doc>
</function>
<function name="ngettext_lazy"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="deactivate_all"><doc></doc>
</function>
<function name="to_locale"><doc></doc>
<argument name="language"></argument>
</function>
<function name="gettext_lazy"><doc></doc>
<argument name="message"></argument>
</function>
<function name="ngettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="get_language_bidi"><doc></doc>
</function>
<function name="_"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_partial_date_formats"><doc></doc>
</function>
<function name="get_date_formats"><doc></doc>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
</package>
<package name="django.utils.translation.trans_real" file="/django/utils/translation/trans_real.pyc"><doc><![CDATA[Translation helper functions.]]></doc>
<depends name="locale"></depends>
<depends name="gettext"></depends>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="sys"></depends>
<depends name="os"></depends>
<depends name="thread"></depends>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="local" module="thread"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="locale" type="module"><value><![CDATA[<module 'locale' from '/usr/lib/python2.7/locale.pyc'>]]></value>
</attribute>
<attribute name="plural_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6e8b9c0>]]></value>
</attribute>
<attribute name="inline_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8fc4238>]]></value>
</attribute>
<attribute name="gettext_module" type="module"><value><![CDATA[<module 'gettext' from '/usr/lib/python2.7/gettext.pyc'>]]></value>
</attribute>
<attribute name="accept_language_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8fc4f30>]]></value>
</attribute>
<attribute name="endblock_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f40590>]]></value>
</attribute>
<attribute name="CONTEXT_SEPARATOR" type="unicode"><value><![CDATA[\x04]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="_default" type="NoneType"><value></value>
</attribute>
<attribute name="_accepted" type="dict"><value></value>
</attribute>
<attribute name="block_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8fc7fa0>]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="constant_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6e769d0>]]></value>
</attribute>
<attribute name="_active" type="_local"><value><![CDATA[<thread._local object at 0x8f94c8c>]]></value>
</attribute>
<attribute name="dot_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f8dcb8>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<attribute name="_translations" type="dict"><value><![CDATA[{'ru-ru': <DjangoTranslation lang:ru-ru>, 'en-us': <DjangoTranslation lang:en-us>}]]></value>
</attribute>
<function name="gettext_noop"><doc><![CDATA[
    Marks strings for translation but doesn't translate them now. This can be
    used to store strings in global variables that should stay in the base
    language (because they might be used externally) and will be translated
    later.
    ]]></doc>
<argument name="message"></argument>
</function>
<function name="to_language"><doc><![CDATA[Turns a locale name (en_US) into a language name (en-us).]]></doc>
<argument name="locale"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc><![CDATA[
    Analyzes the request to find what language the user wants the system to
    show. Only languages listed in settings.LANGUAGES are taken into account.
    If the user requests a sublanguage where we have a main language, we send
    out the main language.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc><![CDATA[Returns the currently selected language.]]></doc>
</function>
<function name="activate"><doc><![CDATA[
    Fetches the translation object for a given tuple of application name and
    language and installs it as the current translation object for the current
    thread.
    ]]></doc>
<argument name="language"></argument>
</function>
<function name="all_locale_paths"><doc><![CDATA[
    Returns a list of paths to user-provides languages files.
    ]]></doc>
</function>
<function name="ungettext"><doc><![CDATA[
    Returns a unicode strings of the translation of either the singular or
    plural, based on the number.
    ]]></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="templatize"><doc><![CDATA[
    Turns a Django template into something that is understood by xgettext. It
    does so by translating the Django translation tags into standard gettext
    function invocations.
    ]]></doc>
<argument name="src"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="check_for_language"><doc><![CDATA[
    Checks whether there is a global language file for the given language
    code. This is used to decide whether a user-provided language is
    available. This is only used for language codes from either the cookies or
    session and during format localization.
    ]]></doc>
<argument name="lang_code"></argument>
</function>
<function name="deactivate_all"><doc><![CDATA[
    Makes the active translation object a NullTranslations() instance. This is
    useful when we want delayed translations to appear as the original string
    for some reason.
    ]]></doc>
</function>
<function name="to_locale"><doc><![CDATA[
    Turns a language name (en-us) into a locale name (en_US). If 'to_lower' is
    True, the last component is lower-cased (en_us).
    ]]></doc>
<argument name="language"></argument>
<argument name="to_lower" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="blankout"><doc><![CDATA[
    Changes every non-whitespace character to the given char.
    Used in the templatize function.
    ]]></doc>
<argument name="src"></argument>
<argument name="char"></argument>
</function>
<function name="ngettext"><doc><![CDATA[
    Returns a UTF-8 bytestring of the translation of either the singular or
    plural, based on the number.
    ]]></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="catalog"><doc><![CDATA[
    Returns the current active catalog for further processing.
    This can be used if you need to modify the catalog or want to access the
    whole message catalog instead of just translating one string.
    ]]></doc>
</function>
<function name="get_language_bidi"><doc><![CDATA[
    Returns selected language's BiDi layout.

    * False = left-to-right layout
    * True = right-to-left layout
    ]]></doc>
</function>
<function name="translation"><doc><![CDATA[
    Returns a translation object.

    This translation object will be constructed out of multiple GNUTranslations
    objects by merging their catalogs. It will construct a object for the
    requested language and add a fallback to the default language, if it's
    different from the requested language.
    ]]></doc>
<argument name="language"></argument>
</function>
<function name="get_partial_date_formats"><doc><![CDATA[
    Checks whether translation files provide a translation for some technical
    message ID to store partial date formats. If it doesn't contain one, the
    formats provided in the settings will be used.
    ]]></doc>
</function>
<function name="do_translate"><doc><![CDATA[
    Translates 'message' using the given 'translation_function' name -- which
    will be either gettext or ugettext. It uses the current thread to find the
    translation object to use. If no current translation is activated, the
    message will be run through the default translation object.
    ]]></doc>
<argument name="message"></argument>
<argument name="translation_function"></argument>
</function>
<function name="get_date_formats"><doc><![CDATA[
    Checks whether translation files provide a translation for some technical
    message ID to store date and time formats. If it doesn't contain one, the
    formats provided in the settings will be used.
    ]]></doc>
</function>
<function name="parse_accept_lang_header"><doc><![CDATA[
    Parses the lang_string, which is the body of an HTTP Accept-Language
    header, and returns a list of (lang, q-value), ordered by 'q' values.

    Any format errors in lang_string results in an empty list being returned.
    ]]></doc>
<argument name="lang_string"></argument>
</function>
<function name="deactivate"><doc><![CDATA[
    Deinstalls the currently active translation object so that further _ calls
    will resolve against the default translation object, again.
    ]]></doc>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="do_ntranslate"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
<argument name="translation_function"></argument>
</function>
<class name="DjangoTranslation"></class>
<doc><![CDATA[
    This class sets up the GNUTranslations context with regard to output
    charset. Django uses a defined DEFAULT_CHARSET as the output charset on
    Python 2.4.
    ]]></doc>
<function name="language"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_language"><doc></doc>
<argument name="self"></argument>
</function>
<function name="set_language"><doc></doc>
<argument name="self"></argument>
<argument name="language"></argument>
</function>
<function name="merge"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kw"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.utils.termcolors" file="/django/utils/termcolors.pyc"><doc><![CDATA[
termcolors.py
]]></doc>
<attribute name="RESET" type="str"><value><![CDATA[0]]></value>
</attribute>
<attribute name="foreground" type="dict"><value><![CDATA[{'blue': '34', 'yellow': '33', 'green': '32', 'cyan': '36', 'black': '30', 'magenta': '35', 'white': '37', 'red': '31'}]]></value>
</attribute>
<attribute name="DEFAULT_PALETTE" type="str"><value><![CDATA[dark]]></value>
</attribute>
<attribute name="NOCOLOR_PALETTE" type="str"><value><![CDATA[nocolor]]></value>
</attribute>
<attribute name="DARK_PALETTE" type="str"><value><![CDATA[dark]]></value>
</attribute>
<attribute name="color_names" type="tuple"><value><![CDATA[('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')]]></value>
</attribute>
<attribute name="background" type="dict"><value><![CDATA[{'blue': '44', 'yellow': '43', 'green': '42', 'cyan': '46', 'black': '40', 'magenta': '45', 'white': '47', 'red': '41'}]]></value>
</attribute>
<attribute name="x" type="int"><value><![CDATA[7]]></value>
</attribute>
<attribute name="PALETTES" type="dict"><value><![CDATA[{'dark': {'NOTICE': {'fg': 'red'}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {'fg': 'green'}, 'ERROR': {'opts': ('bold',), 'fg': 'red'}, 'HTTP_NOT_MODIFIED': {'fg': 'cyan'}, 'HTTP_SERVER_ERROR': {'opts': ('bold',), 'fg': 'magenta'}, 'SQL_TABLE': {'opts': ('bold',)}, 'SQL_COLTYPE': {'fg': 'green'}, 'HTTP_NOT_FOUND': {'fg': 'yellow'}, 'HTTP_BAD_REQUEST': {'opts': ('bold',), 'fg': 'red'}, 'SQL_FIELD': {'opts': ('bold',), 'fg': 'green'}, 'HTTP_INFO': {'opts': ('bold',)}, 'SQL_KEYWORD': {'fg': 'yellow'}}, 'light': {'NOTICE': {'fg': 'red'}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {'opts': ('bold',), 'fg': 'green'}, 'ERROR': {'opts': ('bold',), 'fg': 'red'}, 'HTTP_NOT_MODIFIED': {'fg': 'green'}, 'HTTP_SERVER_ERROR': {'opts': ('bold',), 'fg': 'magenta'}, 'SQL_TABLE': {'opts': ('bold',)}, 'SQL_COLTYPE': {'fg': 'green'}, 'HTTP_NOT_FOUND': {'fg': 'red'}, 'HTTP_BAD_REQUEST': {'opts': ('bold',), 'fg': 'red'}, 'SQL_FIELD': {'opts': ('bold',), 'fg': 'green'}, 'HTTP_INFO': {'opts': ('bold',)}, 'SQL_KEYWORD': {'fg': 'blue'}}, 'nocolor': {'NOTICE': {}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {}, 'ERROR': {}, 'HTTP_NOT_MODIFIED': {}, 'HTTP_SERVER_ERROR': {}, 'SQL_TABLE': {}, 'SQL_COLTYPE': {}, 'HTTP_NOT_FOUND': {}, 'HTTP_BAD_REQUEST': {}, 'SQL_FIELD': {}, 'HTTP_INFO': {}, 'SQL_KEYWORD': {}}}]]></value>
</attribute>
<attribute name="LIGHT_PALETTE" type="str"><value><![CDATA[light]]></value>
</attribute>
<attribute name="opt_dict" type="dict"><value><![CDATA[{'conceal': '8', 'reverse': '7', 'bold': '1', 'underscore': '4', 'blink': '5'}]]></value>
</attribute>
<function name="colorize" kwargs="kwargs"><doc><![CDATA[
    Returns your text, enclosed in ANSI graphics codes.

    Depends on the keyword arguments 'fg' and 'bg', and the contents of
    the opts tuple/list.

    Returns the RESET code if no parameters are given.

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold'
        'underscore'
        'blink'
        'reverse'
        'conceal'
        'noreset' - string will not be auto-terminated with the RESET code

    Examples:
        colorize('hello', fg='red', bg='blue', opts=('blink',))
        colorize()
        colorize('goodbye', opts=('underscore',))
        print colorize('first line', fg='red', opts=('noreset',))
        print 'this should be red too'
        print colorize('and so should this')
        print 'this should not be red'
    ]]></doc>
<argument name="text" type="str"><value></value>
</argument>
<argument name="opts" type="tuple"><value></value>
</argument>
</function>
<function name="parse_color_setting"><doc><![CDATA[Parse a DJANGO_COLORS environment variable to produce the system palette

    The general form of a pallete definition is:

        "palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option"

    where:
        palette is a named palette; one of 'light', 'dark', or 'nocolor'.
        role is a named style used by Django
        fg is a background color.
        bg is a background color.
        option is a display options.

    Specifying a named palette is the same as manually specifying the individual
    definitions for each role. Any individual definitions following the pallete
    definition will augment the base palette definition.

    Valid roles:
        'error', 'notice', 'sql_field', 'sql_coltype', 'sql_keyword', 'sql_table',
        'http_info', 'http_success', 'http_redirect', 'http_bad_request',
        'http_not_found', 'http_server_error'

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold', 'underscore', 'blink', 'reverse', 'conceal'

    ]]></doc>
<argument name="config_string"></argument>
</function>
<function name="make_style" kwargs="kwargs"><doc><![CDATA[
    Returns a function with default parameters for colorize()

    Example:
        bold_red = make_style(opts=('bold',), fg='red')
        print bold_red('hello')
        KEYWORD = make_style(fg='yellow')
        COMMENT = make_style(fg='blue', opts=('bold',))
    ]]></doc>
<argument name="opts" type="tuple"><value></value>
</argument>
</function>
</package>
<package name="django.utils.dateformat" file="/django/utils/dateformat.pyc"><doc><![CDATA[
PHP date() style date formatting
See http://www.php.net/date for format strings

Usage:
>>> import datetime
>>> d = datetime.datetime.now()
>>> df = DateFormat(d)
>>> print df.format('jS F Y H:i')
7th October 2003 11:39
>>>
]]></doc>
<depends name="calendar"></depends>
<depends name="re"></depends>
<depends name="time"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="LocalTimezone" module="django.utils.tzinfo"></import_class>
<attribute name="calendar" type="module"><value><![CDATA[<module 'calendar' from '/usr/lib/python2.7/calendar.pyc'>]]></value>
</attribute>
<attribute name="MONTHS_ALT" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908ddac>, 2: <django.utils.functional.__proxy__ object at 0x908ddcc>, 3: <django.utils.functional.__proxy__ object at 0x908ddec>, 4: <django.utils.functional.__proxy__ object at 0x908de0c>, 5: <django.utils.functional.__proxy__ object at 0x908de2c>, 6: <django.utils.functional.__proxy__ object at 0x908de4c>, 7: <django.utils.functional.__proxy__ object at 0x908de6c>, 8: <django.utils.functional.__proxy__ object at 0x908de8c>, 9: <django.utils.functional.__proxy__ object at 0x908deac>, 10: <django.utils.functional.__proxy__ object at 0x908decc>, 11: <django.utils.functional.__proxy__ object at 0x908deec>, 12: <django.utils.functional.__proxy__ object at 0x908df0c>}]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="MONTHS_3" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908d2ac>, 2: <django.utils.functional.__proxy__ object at 0x908d2ec>, 3: <django.utils.functional.__proxy__ object at 0x908d32c>, 4: <django.utils.functional.__proxy__ object at 0x908d36c>, 5: <django.utils.functional.__proxy__ object at 0x908d3ac>, 6: <django.utils.functional.__proxy__ object at 0x908d3ec>, 7: <django.utils.functional.__proxy__ object at 0x908d42c>, 8: <django.utils.functional.__proxy__ object at 0x908d46c>, 9: <django.utils.functional.__proxy__ object at 0x908d4ac>, 10: <django.utils.functional.__proxy__ object at 0x908d4ec>, 11: <django.utils.functional.__proxy__ object at 0x908d52c>, 12: <django.utils.functional.__proxy__ object at 0x908d56c>}]]></value>
</attribute>
<attribute name="re_escaped" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9085090>]]></value>
</attribute>
<attribute name="MONTHS_AP" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x908d58c>, 2: <django.utils.functional.__proxy__ object at 0x908d5ac>, 3: <django.utils.functional.__proxy__ object at 0x908d5cc>, 4: <django.utils.functional.__proxy__ object at 0x908dc8c>, 5: <django.utils.functional.__proxy__ object at 0x908dcac>, 6: <django.utils.functional.__proxy__ object at 0x908dccc>, 7: <django.utils.functional.__proxy__ object at 0x908dcec>, 8: <django.utils.functional.__proxy__ object at 0x908dd0c>, 9: <django.utils.functional.__proxy__ object at 0x908dd2c>, 10: <django.utils.functional.__proxy__ object at 0x908dd4c>, 11: <django.utils.functional.__proxy__ object at 0x908dd6c>, 12: <django.utils.functional.__proxy__ object at 0x908dd8c>}]]></value>
</attribute>
<attribute name="re_formatchars" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8fadf20>]]></value>
</attribute>
<attribute name="MONTHS" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9087f8c>, 2: <django.utils.functional.__proxy__ object at 0x9087fcc>, 3: <django.utils.functional.__proxy__ object at 0x908d02c>, 4: <django.utils.functional.__proxy__ object at 0x908d06c>, 5: <django.utils.functional.__proxy__ object at 0x908d0ac>, 6: <django.utils.functional.__proxy__ object at 0x908d0ec>, 7: <django.utils.functional.__proxy__ object at 0x908d12c>, 8: <django.utils.functional.__proxy__ object at 0x908d16c>, 9: <django.utils.functional.__proxy__ object at 0x908d1ac>, 10: <django.utils.functional.__proxy__ object at 0x908d1ec>, 11: <django.utils.functional.__proxy__ object at 0x908d22c>, 12: <django.utils.functional.__proxy__ object at 0x908d26c>}]]></value>
</attribute>
<attribute name="WEEKDAYS_ABBR" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9087dcc>, 1: <django.utils.functional.__proxy__ object at 0x9087e0c>, 2: <django.utils.functional.__proxy__ object at 0x9087e4c>, 3: <django.utils.functional.__proxy__ object at 0x9087e8c>, 4: <django.utils.functional.__proxy__ object at 0x9087ecc>, 5: <django.utils.functional.__proxy__ object at 0x9087f0c>, 6: <django.utils.functional.__proxy__ object at 0x9087f4c>}]]></value>
</attribute>
<attribute name="WEEKDAYS" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9081f2c>, 1: <django.utils.functional.__proxy__ object at 0x9081f4c>, 2: <django.utils.functional.__proxy__ object at 0x9087c8c>, 3: <django.utils.functional.__proxy__ object at 0x9087ccc>, 4: <django.utils.functional.__proxy__ object at 0x9087d0c>, 5: <django.utils.functional.__proxy__ object at 0x9087d4c>, 6: <django.utils.functional.__proxy__ object at 0x9087d8c>}]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="format"><doc><![CDATA[Convenience function]]></doc>
<argument name="value"></argument>
<argument name="format_string"></argument>
</function>
<function name="time_format"><doc><![CDATA[Convenience function]]></doc>
<argument name="value"></argument>
<argument name="format_string"></argument>
</function>
<class name="Formatter"></class>
<doc></doc>
<function name="format"><doc></doc>
<argument name="self"></argument>
<argument name="formatstr"></argument>
</function>
<class name="DateFormat"></class>
<doc></doc>
<attribute name="year_days" type="list"><value><![CDATA[[None, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]]]></value>
</attribute>
<function name="E"><doc><![CDATA[Alternative month names as required by some locales. Proprietary extension.]]></doc>
<argument name="self"></argument>
</function>
<function name="D"><doc><![CDATA[Day of the week, textual, 3 letters; e.g. 'Fri']]></doc>
<argument name="self"></argument>
</function>
<function name="F"><doc><![CDATA[Month, textual, long; e.g. 'January']]></doc>
<argument name="self"></argument>
</function>
<function name="I"><doc><![CDATA['1' if Daylight Savings Time, '0' otherwise.]]></doc>
<argument name="self"></argument>
</function>
<function name="M"><doc><![CDATA[Month, textual, 3 letters; e.g. 'Jan']]></doc>
<argument name="self"></argument>
</function>
<function name="L"><doc><![CDATA[Boolean for whether it is a leap year; i.e. True or False]]></doc>
<argument name="self"></argument>
</function>
<function name="O"><doc><![CDATA[Difference to Greenwich time in hours; e.g. '+0200']]></doc>
<argument name="self"></argument>
</function>
<function name="N"><doc><![CDATA[Month abbreviation in Associated Press style. Proprietary extension.]]></doc>
<argument name="self"></argument>
</function>
<function name="S"><doc><![CDATA[English ordinal suffix for the day of the month, 2 characters; i.e. 'st', 'nd', 'rd' or 'th']]></doc>
<argument name="self"></argument>
</function>
<function name="U"><doc><![CDATA[Seconds since the Unix epoch (January 1 1970 00:00:00 GMT)]]></doc>
<argument name="self"></argument>
</function>
<function name="T"><doc><![CDATA[Time zone of this machine; e.g. 'EST' or 'MDT']]></doc>
<argument name="self"></argument>
</function>
<function name="W"><doc><![CDATA[ISO-8601 week number of year, weeks starting on Monday]]></doc>
<argument name="self"></argument>
</function>
<function name="Y"><doc><![CDATA[Year, 4 digits; e.g. '1999']]></doc>
<argument name="self"></argument>
</function>
<function name="Z"><doc><![CDATA[
        Time zone offset in seconds (i.e. '-43200' to '43200'). The offset for
        timezones west of UTC is always negative, and for those east of UTC is
        always positive.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="c"><doc><![CDATA[
        ISO 8601 Format
        Example : '2008-01-02T10:30:00.000123'
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="b"><doc><![CDATA[Month, textual, 3 letters, lowercase; e.g. 'jan']]></doc>
<argument name="self"></argument>
</function>
<function name="d"><doc><![CDATA[Day of the month, 2 digits with leading zeros; i.e. '01' to '31']]></doc>
<argument name="self"></argument>
</function>
<function name="j"><doc><![CDATA[Day of the month without leading zeros; i.e. '1' to '31']]></doc>
<argument name="self"></argument>
</function>
<function name="m"><doc><![CDATA[Month; i.e. '01' to '12']]></doc>
<argument name="self"></argument>
</function>
<function name="l"><doc><![CDATA[Day of the week, textual, long; e.g. 'Friday']]></doc>
<argument name="self"></argument>
</function>
<function name="n"><doc><![CDATA[Month without leading zeros; i.e. '1' to '12']]></doc>
<argument name="self"></argument>
</function>
<function name="r"><doc><![CDATA[RFC 2822 formatted date; e.g. 'Thu, 21 Dec 2000 16:01:07 +0200']]></doc>
<argument name="self"></argument>
</function>
<function name="t"><doc><![CDATA[Number of days in the given month; i.e. '28' to '31']]></doc>
<argument name="self"></argument>
</function>
<function name="w"><doc><![CDATA[Day of the week, numeric, i.e. '0' (Sunday) to '6' (Saturday)]]></doc>
<argument name="self"></argument>
</function>
<function name="y"><doc><![CDATA[Year, 2 digits; e.g. '99']]></doc>
<argument name="self"></argument>
</function>
<function name="z"><doc><![CDATA[Day of the year; i.e. '0' to '365']]></doc>
<argument name="self"></argument>
</function>
<class name="TimeFormat"></class>
<doc></doc>
<function name="a"><doc><![CDATA['a.m.' or 'p.m.']]></doc>
<argument name="self"></argument>
</function>
<function name="A"><doc><![CDATA['AM' or 'PM']]></doc>
<argument name="self"></argument>
</function>
<function name="B"><doc><![CDATA[Swatch Internet time]]></doc>
<argument name="self"></argument>
</function>
<function name="g"><doc><![CDATA[Hour, 12-hour format without leading zeros; i.e. '1' to '12']]></doc>
<argument name="self"></argument>
</function>
<function name="G"><doc><![CDATA[Hour, 24-hour format without leading zeros; i.e. '0' to '23']]></doc>
<argument name="self"></argument>
</function>
<function name="f"><doc><![CDATA[
        Time, in 12-hour hours and minutes, with minutes left off if they're
        zero.
        Examples: '1', '1:30', '2:05', '2'
        Proprietary extension.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="i"><doc><![CDATA[Minutes; i.e. '00' to '59']]></doc>
<argument name="self"></argument>
</function>
<function name="h"><doc><![CDATA[Hour, 12-hour format; i.e. '01' to '12']]></doc>
<argument name="self"></argument>
</function>
<function name="P"><doc><![CDATA[
        Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off
        if they're zero and the strings 'midnight' and 'noon' if appropriate.
        Examples: '1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'
        Proprietary extension.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="s"><doc><![CDATA[Seconds; i.e. '00' to '59']]></doc>
<argument name="self"></argument>
</function>
<function name="u"><doc><![CDATA[Microseconds]]></doc>
<argument name="self"></argument>
</function>
<function name="H"><doc><![CDATA[Hour, 24-hour format; i.e. '00' to '23']]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="t"></argument>
</function>
</package>
<package name="django.utils.http" file="/django/utils/http.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="calendar"></depends>
<depends name="re"></depends>
<depends name="urllib"></depends>
<depends name="sys"></depends>
<depends name="urlparse"></depends>
<depends name="email.utils"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="formatdate" module="email.utils"></import_function>
<attribute name="__Y2" type="str"><value><![CDATA[(?P<year>\d{2})]]></value>
</attribute>
<attribute name="ASCTIME_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9040b60>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="RFC850_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x90392d8>]]></value>
</attribute>
<attribute name="ETAG_MATCH" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9000430>]]></value>
</attribute>
<attribute name="calendar" type="module"><value><![CDATA[<module 'calendar' from '/usr/lib/python2.7/calendar.pyc'>]]></value>
</attribute>
<attribute name="__D2" type="str"><value><![CDATA[(?P<day>[ \d]\d)]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="__M" type="str"><value><![CDATA[(?P<mon>\w{3})]]></value>
</attribute>
<attribute name="__D" type="str"><value><![CDATA[(?P<day>\d{2})]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="__T" type="str"><value><![CDATA[(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})]]></value>
</attribute>
<attribute name="__Y" type="str"><value><![CDATA[(?P<year>\d{4})]]></value>
</attribute>
<attribute name="MONTHS" type="list"><value><![CDATA[['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']]]></value>
</attribute>
<attribute name="RFC1123_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x903e5f8>]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<function name="urlencode"><doc><![CDATA[
    A version of Python's urllib.urlencode() function that can operate on
    unicode strings. The parameters are first case to UTF-8 encoded strings and
    then encoded as per normal.
    ]]></doc>
<argument name="query"></argument>
<argument name="doseq" type="int"><value></value>
</argument>
</function>
<function name="quote_etag"><doc><![CDATA[
    Wraps a string in double quotes escaping contents as necesary.
    ]]></doc>
<argument name="etag"></argument>
</function>
<function name="int_to_base36"><doc><![CDATA[
    Converts an integer to a base36 string
    ]]></doc>
<argument name="i"></argument>
</function>
<function name="http_date"><doc><![CDATA[
    Formats the time to match the RFC1123 date format as specified by HTTP
    RFC2616 section 3.3.1.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.
    ]]></doc>
<argument name="epoch_seconds" type="NoneType"><value></value>
</argument>
</function>
<function name="parse_http_date_safe"><doc><![CDATA[
    Same as parse_http_date, but returns None if the input is invalid.
    ]]></doc>
<argument name="date"></argument>
</function>
<function name="same_origin"><doc><![CDATA[
        Checks if two URLs are 'same-origin'
        ]]></doc>
<argument name="url1"></argument>
<argument name="url2"></argument>
</function>
<function name="cookie_date"><doc><![CDATA[
    Formats the time to ensure compatibility with Netscape's cookie standard.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.
    ]]></doc>
<argument name="epoch_seconds" type="NoneType"><value></value>
</argument>
</function>
<function name="parse_etags"><doc><![CDATA[
    Parses a string with one or several etags passed in If-None-Match and
    If-Match headers by the rules in RFC 2616. Returns a list of etags
    without surrounding double quotes (") and unescaped from \<CHAR>.
    ]]></doc>
<argument name="etag_str"></argument>
</function>
<function name="base36_to_int"><doc><![CDATA[
    Converts a base 36 string to an ``int``. Raises ``ValueError` if the
    input won't fit into an int.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="urlquote" args="args" kwargs="kwargs"><doc><![CDATA[
    A version of Python's urllib.quote() function that can operate on unicode
    strings. The url is first UTF-8 encoded before quoting. The returned string
    can safely be used as part of an argument to a subsequent iri_to_uri() call
    without double-quoting occurring.
    ]]></doc>
</function>
<function name="parse_http_date"><doc><![CDATA[
    Parses a date format as specified by HTTP RFC2616 section 3.3.1.

    The three formats allowed by the RFC are accepted, even if only the first
    one is still in widespread use.

    Returns an floating point number expressed in seconds since the epoch, in
    UTC.
    ]]></doc>
<argument name="date"></argument>
</function>
<function name="urlquote_plus" args="args" kwargs="kwargs"><doc><![CDATA[
    A version of Python's urllib.quote_plus() function that can operate on
    unicode strings. The url is first UTF-8 encoded before quoting. The
    returned string can safely be used as part of an argument to a subsequent
    iri_to_uri() call without double-quoting occurring.
    ]]></doc>
</function>
</package>
<package name="django.utils.decorators" file="/django/utils/decorators.pyc"><doc><![CDATA[Functions that help with dynamically creating decorators for views.]]></doc>
<depends name="functools"></depends>
<import_function name="wraps" module="functools"></import_function>
<import_function name="update_wrapper" module="functools"></import_function>
<attribute name="WRAPPER_ASSIGNMENTS" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</attribute>
<function name="available_attrs"><doc><![CDATA[
    Return the list of functools-wrappable attributes on a callable.
    This is required as a workaround for http://bugs.python.org/issue3445.
    ]]></doc>
<argument name="fn"></argument>
</function>
<function name="decorator_from_middleware"><doc><![CDATA[
    Given a middleware class (not an instance), returns a view decorator. This
    lets you use middleware functionality on a per-view basis. The middleware
    is created with no params passed.
    ]]></doc>
<argument name="middleware_class"></argument>
</function>
<function name="make_middleware_decorator"><doc></doc>
<argument name="middleware_class"></argument>
</function>
<function name="decorator_from_middleware_with_args"><doc><![CDATA[
    Like decorator_from_middleware, but returns a function
    that accepts the arguments to be passed to the middleware_class.
    Use like::

         cache_page = decorator_from_middleware_with_args(CacheMiddleware)
         # ...

         @cache_page(3600)
         def my_view(request):
             # ...
    ]]></doc>
<argument name="middleware_class"></argument>
</function>
<function name="method_decorator"><doc><![CDATA[
    Converts a function decorator into a method decorator
    ]]></doc>
<argument name="decorator"></argument>
</function>
<class name="classonlymethod"></class>
<doc></doc>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="owner"></argument>
</function>
</package>
<package name="django.utils.tzinfo" file="/django/utils/tzinfo.pyc"><doc><![CDATA[Implementation of tzinfo classes for use with datetime.datetime.]]></doc>
<depends name="time"></depends>
<depends name="datetime"></depends>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="timedelta" module="datetime"></import_class>
<import_class name="tzinfo" module="datetime"></import_class>
<attribute name="DEFAULT_LOCALE_ENCODING" type="str"><value><![CDATA[UTF8]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<class name="FixedOffset"></class>
<doc><![CDATA[Fixed offset in minutes east from UTC.]]></doc>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="tzname"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="dst"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="utcoffset"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="offset"></argument>
</function>
<class name="LocalTimezone"></class>
<doc><![CDATA[Proxy timezone information from time module.]]></doc>
<function name="_isdst"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="utcoffset"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="dst"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="tzname"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
</package>
<package name="django.utils.text" file="/django/utils/text.pyc"><doc></doc>
<depends name="re"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="_entity_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x912cd00>]]></value>
</attribute>
<attribute name="ustring_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9137f60>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="smart_split_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9145328>]]></value>
</attribute>
<attribute name="name2codepoint" type="dict"><value><![CDATA[{'aring': 229, 'gt': 62, 'sup': 8835, 'Ntilde': 209, 'upsih': 978, 'Yacute': 221, 'Atilde': 195, 'radic': 8730, 'otimes': 8855, 'aelig': 230, 'Psi': 936, 'Uuml': 220, 'Epsilon': 917, 'Icirc': 206, 'Eacute': 201, 'Lambda': 923, 'Prime': 8243, 'Kappa': 922, 'sigmaf': 962, 'lrm': 8206, 'cedil': 184, 'ensp': 8194, 'AElig': 198, 'prime': 8242, 'Tau': 932, 'lceil': 8968, 'dArr': 8659, 'ge': 8805, 'sdot': 8901, 'lfloor': 8970, 'lArr': 8656, 'Auml': 196, 'brvbar': 166, 'Otilde': 213, 'Theta': 920, 'Pi': 928, 'OElig': 338, 'Scaron': 352, 'egrave': 232, 'sub': 8834, 'iexcl': 161, 'ordf': 170, 'sum': 8721, 'ntilde': 241, 'atilde': 227, 'theta': 952, 'nsub': 8836, 'hArr': 8660, 'Oslash': 216, 'THORN': 222, 'yuml': 255, 'Mu': 924, 'thinsp': 8201, 'ecirc': 234, 'bdquo': 8222, 'Aring': 197, 'nabla': 8711, 'permil': 8240, 'Ugrave': 217, 'eta': 951, 'Agrave': 192, 'forall': 8704, 'eth': 240, 'rceil': 8969, 'iuml': 239, 'Egrave': 200, 'divide': 247, 'igrave': 236, 'otilde': 245, 'pound': 163, 'frasl': 8260, 'ETH': 208, 'lowast': 8727, 'chi': 967, 'Aacute': 193, 'cent': 162, 'Beta': 914, 'perp': 8869, 'there4': 8756, 'pi': 960, 'empty': 8709, 'euml': 235, 'notin': 8713, 'uuml': 252, 'icirc': 238, 'bull': 8226, 'upsilon': 965, 'Oacute': 211, 'kappa': 954, 'ccedil': 231, 'cap': 8745, 'mu': 956, 'deg': 176, 'tau': 964, 'emsp': 8195, 'hellip': 8230, 'ucirc': 251, 'ugrave': 249, 'cong': 8773, 'Iota': 921, 'quot': 34, 'rarr': 8594, 'Rho': 929, 'uacute': 250, 'acirc': 226, 'sim': 8764, 'phi': 966, 'diams': 9830, 'Euml': 203, 'Ccedil': 199, 'Eta': 919, 'Gamma': 915, 'euro': 8364, 'thetasym': 977, 'sect': 167, 'ldquo': 8220, 'hearts': 9829, 'oacute': 243, 'zwnj': 8204, 'yen': 165, 'ograve': 242, 'Chi': 935, 'trade': 8482, 'xi': 958, 'nbsp': 160, 'tilde': 732, 'lsaquo': 8249, 'oelig': 339, 'equiv': 8801, 'le': 8804, 'auml': 228, 'cup': 8746, 'Yuml': 376, 'lt': 60, 'Upsilon': 933, 'ndash': 8211, 'yacute': 253, 'real': 8476, 'psi': 968, 'rsaquo': 8250, 'darr': 8595, 'Alpha': 913, 'not': 172, 'amp': 38, 'oslash': 248, 'acute': 180, 'zwj': 8205, 'laquo': 171, 'rdquo': 8221, 'Igrave': 204, 'micro': 181, 'shy': 173, 'supe': 8839, 'szlig': 223, 'clubs': 9827, 'agrave': 224, 'Ocirc': 212, 'harr': 8596, 'larr': 8592, 'frac12': 189, 'prop': 8733, 'circ': 710, 'ocirc': 244, 'asymp': 8776, 'uml': 168, 'prod': 8719, 'reg': 174, 'rlm': 8207, 'infin': 8734, 'Sigma': 931, 'mdash': 8212, 'uarr': 8593, 'times': 215, 'rArr': 8658, 'or': 8744, 'gamma': 947, 'lambda': 955, 'rang': 9002, 'sup3': 179, 'dagger': 8224, 'Ouml': 214, 'image': 8465, 'alefsym': 8501, 'sube': 8838, 'alpha': 945, 'Nu': 925, 'plusmn': 177, 'sup1': 185, 'sup2': 178, 'frac34': 190, 'oline': 8254, 'Delta': 916, 'loz': 9674, 'iota': 953, 'iacute': 237, 'para': 182, 'ordm': 186, 'epsilon': 949, 'weierp': 8472, 'part': 8706, 'delta': 948, 'omicron': 959, 'copy': 169, 'Iuml': 207, 'Xi': 926, 'Dagger': 8225, 'Ograve': 210, 'Ucirc': 219, 'scaron': 353, 'lsquo': 8216, 'isin': 8712, 'Zeta': 918, 'minus': 8722, 'and': 8743, 'ang': 8736, 'curren': 164, 'int': 8747, 'rfloor': 8971, 'crarr': 8629, 'exist': 8707, 'oplus': 8853, 'Acirc': 194, 'piv': 982, 'ni': 8715, 'Phi': 934, 'Iacute': 205, 'Uacute': 218, 'Omicron': 927, 'ne': 8800, 'iquest': 191, 'sbquo': 8218, 'Ecirc': 202, 'zeta': 950, 'Omega': 937, 'nu': 957, 'macr': 175, 'frac14': 188, 'aacute': 225, 'uArr': 8657, 'beta': 946, 'fnof': 402, 'rho': 961, 'eacute': 233, 'omega': 969, 'middot': 183, 'lang': 9001, 'spades': 9824, 'rsquo': 8217, 'thorn': 254, 'ouml': 246, 'raquo': 187, 'sigma': 963}]]></value>
</attribute>
<function name="wrap" args="args" kwargs="kwargs"><doc><![CDATA[
    A word-wrap function that preserves existing line breaks and most spaces in
    the text. Expects that existing line breaks are posix newlines.
    ]]></doc>
</function>
<function name="recapitalize" args="args" kwargs="kwargs"><doc><![CDATA[Recapitalizes text, placing caps after end-of-sentence punctuation.]]></doc>
</function>
<function name="smart_split" args="args" kwargs="kwargs"><doc><![CDATA[
    Generator that splits a string by spaces, leaving quoted phrases together.
    Supports both single and double quotes, and supports escaping quotes with
    backslashes. In the output, strings will keep their initial and trailing
    quote marks and escaped quotes will remain escaped (the results can then
    be further processed with unescape_string_literal()).

    >>> list(smart_split(r'This is "a person\'s" test.'))
    [u'This', u'is', u'"a person\\\'s"', u'test.']
    >>> list(smart_split(r"Another 'person\'s' test."))
    [u'Another', u"'person\\'s'", u'test.']
    >>> list(smart_split(r'A "\"funky\" style" test.'))
    [u'A', u'"\\"funky\\" style"', u'test.']
    ]]></doc>
</function>
<function name="capfirst" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="unescape_entities" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="javascript_quote" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="compress_string"><doc></doc>
<argument name="s"></argument>
</function>
<function name="get_valid_filename" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the given string converted to a string that can be used for a clean
    filename. Specifically, leading and trailing spaces are removed; other
    spaces are converted to underscores; and anything that is not a unicode
    alphanumeric, dash, underscore, or dot, is removed.
    >>> get_valid_filename("john's portrait in 2004.jpg")
    u'johns_portrait_in_2004.jpg'
    ]]></doc>
</function>
<function name="get_text_list" args="args" kwargs="kwargs"><doc><![CDATA[
    >>> get_text_list(['a', 'b', 'c', 'd'])
    u'a, b, c or d'
    >>> get_text_list(['a', 'b', 'c'], 'and')
    u'a, b and c'
    >>> get_text_list(['a', 'b'], 'and')
    u'a and b'
    >>> get_text_list(['a'])
    u'a'
    >>> get_text_list([])
    u''
    ]]></doc>
</function>
<function name="_replace_entity"><doc></doc>
<argument name="match"></argument>
</function>
<function name="unescape_string_literal" args="args" kwargs="kwargs"><doc><![CDATA[
    Convert quoted string literals to unquoted strings with escaped quotes and
    backslashes unquoted::

        >>> unescape_string_literal('"abc"')
        'abc'
        >>> unescape_string_literal("'abc'")
        'abc'
        >>> unescape_string_literal('"a \"bc\""')
        'a "bc"'
        >>> unescape_string_literal("'\'ab\' c'")
        "'ab' c"
    ]]></doc>
</function>
<function name="truncate_html_words" args="args" kwargs="kwargs"><doc><![CDATA[Truncates HTML to a certain number of words (not counting tags and
    comments). Closes opened tags if they were correctly closed in the given
    html. Takes an optional argument of what should be used to notify that the
    string has been truncated, defaulting to ellipsis (...).

    Newlines in the HTML are preserved.
    ]]></doc>
</function>
<function name="normalize_newlines" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="phone2numeric" args="args" kwargs="kwargs"><doc><![CDATA[Converts a phone number with letters into its numeric equivalent.]]></doc>
</function>
<function name="truncate_words" args="args" kwargs="kwargs"><doc><![CDATA[Truncates a string after a certain number of words. Takes an optional
    argument of what should be used to notify that the string has been
    truncated, defaulting to ellipsis (...)

    Newlines in the string will be stripped.
    ]]></doc>
</function>
</package>
<package name="django.utils.version" file="/django/utils/version.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="os"></depends>
<attribute name="django" type="module"><value><![CDATA[<module 'django' from '/usr/local/lib/python2.7/dist-packages/django/__init__.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="get_svn_revision"><doc><![CDATA[
    Returns the SVN revision in the form SVN-XXXX,
    where XXXX is the revision number.

    Returns SVN-unknown if anything goes wrong, such as an unexpected
    format of internal SVN files.

    If path is provided, it should be a directory whose SVN info you want to
    inspect. If it's not provided, this will use the root django/ package
    directory.
    ]]></doc>
<argument name="path" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.numberformat" file="/django/utils/numberformat.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<function name="format"><doc><![CDATA[
    Gets a number (as a number or string), and returns it as a string,
    using formats definied as arguments:

    * decimal_sep: Decimal separator symbol (for example ".")
    * decimal_pos: Number of decimal positions
    * grouping: Number of digits in every group limited by thousand separator
    * thousand_sep: Thousand separator symbol (for example ",")

    ]]></doc>
<argument name="number"></argument>
<argument name="decimal_sep"></argument>
<argument name="decimal_pos"></argument>
<argument name="grouping" type="int"><value></value>
</argument>
<argument name="thousand_sep" type="str"><value></value>
</argument>
</function>
</package>
<package name="django.utils.importlib" file="/django/utils/importlib.pyc"><doc></doc>
<depends name="sys"></depends>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<function name="_resolve_name"><doc><![CDATA[Return the absolute name of the module to be imported.]]></doc>
<argument name="name"></argument>
<argument name="package"></argument>
<argument name="level"></argument>
</function>
<function name="import_module"><doc><![CDATA[Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.

    ]]></doc>
<argument name="name"></argument>
<argument name="package" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.datetime_safe" file="/django/utils/datetime_safe.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="time"></depends>
<depends name="datetime"></depends>
<import_class name="real_date" module="datetime"></import_class>
<import_class name="real_datetime" module="datetime"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="_illegal_formatting" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6e68a70>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="new_date"><doc><![CDATA[Generate a safe date from a datetime.date object.]]></doc>
<argument name="d"></argument>
</function>
<function name="_findall"><doc></doc>
<argument name="text"></argument>
<argument name="substr"></argument>
</function>
<function name="strftime"><doc></doc>
<argument name="dt"></argument>
<argument name="fmt"></argument>
</function>
<function name="new_datetime"><doc><![CDATA[
    Generate a safe datetime from a datetime.date or datetime.datetime object.
    ]]></doc>
<argument name="d"></argument>
</function>
<class name="date"></class>
<doc></doc>
<function name="strftime"><doc></doc>
<argument name="self"></argument>
<argument name="fmt"></argument>
</function>
<class name="datetime"></class>
<doc></doc>
<function name="combine"><doc></doc>
<argument name="self"></argument>
<argument name="date"></argument>
<argument name="time"></argument>
</function>
<function name="date"><doc></doc>
<argument name="self"></argument>
</function>
<function name="strftime"><doc></doc>
<argument name="self"></argument>
<argument name="fmt"></argument>
</function>
</package>
<package name="django.utils.functional" file="/django/utils/functional.pyc"><doc></doc>
<depends name="__builtin__"></depends>
<attribute name="WRAPPER_ASSIGNMENTS" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</attribute>
<attribute name="WRAPPER_UPDATES" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</attribute>
<function name="wraps"><doc><![CDATA[Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying curry() to
       update_wrapper().
    ]]></doc>
<argument name="wrapped"></argument>
<argument name="assigned" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</argument>
<argument name="updated" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</argument>
</function>
<function name="_lazy_proxy_unpickle" args="resultclasses"><doc></doc>
<argument name="func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="update_wrapper"><doc><![CDATA[Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes off the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    ]]></doc>
<argument name="wrapper"></argument>
<argument name="wrapped"></argument>
<argument name="assigned" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</argument>
<argument name="updated" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</argument>
</function>
<function name="lazy" args="resultclasses"><doc><![CDATA[
    Turns any callable into a lazy evaluated callable. You need to give result
    classes or types -- at least one is needed so that the automatic forcing of
    the lazy evaluation code is triggered. Results are not memoized; the
    function is evaluated on every access.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="allow_lazy" args="resultclasses"><doc><![CDATA[
    A decorator that allows a function to be called with one or more lazy
    arguments. If none of the args are lazy, the function is evaluated
    immediately, otherwise a __proxy__ is returned that will evaluate the
    function when needed.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="memoize"><doc><![CDATA[
    Wrap a function so that results for any argument tuple are stored in
    'cache'. Note that the args to the function must be usable as dictionary
    keys.

    Only the first num_args are considered when creating the key.
    ]]></doc>
<argument name="func"></argument>
<argument name="cache"></argument>
<argument name="num_args"></argument>
</function>
<function name="curry" args="args" kwargs="kwargs"><doc></doc>
<argument name="_curried_func"></argument>
</function>
<class name="SimpleLazyObject"></class>
<doc><![CDATA[
    A lazy object initialised from any function.

    Designed for compound objects of unknown type. For builtins or objects of
    known type, use django.utils.functional.lazy.
    ]]></doc>
<import_attribute name="__class__" type="type" module="__builtin__"></import_attribute>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_setup"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__hash__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_SimpleLazyObject__get_class"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Pass in a callable that returns the object to be wrapped.

        If copies are made of the resulting SimpleLazyObject, which can happen
        in various circumstances within Django, then you must ensure that the
        callable can be safely run more than once and will return the same
        value.
        ]]></doc>
<argument name="self"></argument>
<argument name="func"></argument>
</function>
<class name="Promise"></class>
<doc><![CDATA[
    This is just a base class for the proxy class created in
    the closure of the lazy function. It can be used to recognize
    promises in code.
    ]]></doc>
<class name="LazyObject"></class>
<doc><![CDATA[
    A wrapper for another class that can be used to delay instantiation of the
    wrapped class.

    By subclassing, you have the opportunity to intercept and alter the
    instantiation. If you don't need to do that, use SimpleLazyObject.
    ]]></doc>
<attribute name="__members__" type="property"><value><![CDATA[<property object at 0xb6ebb554>]]></value>
</attribute>
<function name="_setup"><doc><![CDATA[
        Must be implemented by subclasses to initialise the wrapped object.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__setattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<function name="__getattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__delattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__dir__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.utils.tree" file="/django/utils/tree.pyc"><doc><![CDATA[
A class for storing a tree graph. Primarily used for filter constructs in the
ORM.
]]></doc>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<class name="Node"></class>
<doc><![CDATA[
    A single internal node in the tree graph. A Node should be viewed as a
    connection (the root) with the children being either leaf nodes or other
    Node instances.
    ]]></doc>
<attribute name="default" type="str"><value><![CDATA[DEFAULT]]></value>
</attribute>
<attribute name="_new_instance" type="instancemethod"><value><![CDATA[<bound method type._new_instance of <class 'django.utils.tree.Node'>>]]></value>
</attribute>
<function name="__nonzero__"><doc><![CDATA[
        For truth value testing.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="start_subtree"><doc><![CDATA[
        Sets up internal state so that new nodes are added to a subtree of the
        current node. The conn_type specifies how the sub-tree is joined to the
        existing children.
        ]]></doc>
<argument name="self"></argument>
<argument name="conn_type"></argument>
</function>
<function name="__contains__"><doc><![CDATA[
        Returns True is 'other' is a direct child of this instance.
        ]]></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__deepcopy__"><doc><![CDATA[
        Utility method used by copy.deepcopy().
        ]]></doc>
<argument name="self"></argument>
<argument name="memodict"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add"><doc><![CDATA[
        Adds a new node to the tree. If the conn_type is the same as the root's
        current connector type, the node is added to the first level.
        Otherwise, the whole tree is pushed down one level and a new root
        connector is created, connecting the existing tree and the new node.
        ]]></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="conn_type"></argument>
</function>
<function name="__init__"><doc><![CDATA[
        Constructs a new Node. If no connector is given, the default will be
        used.

        Warning: You probably don't want to pass in the 'negated' parameter. It
        is NOT the same as constructing a node and calling negate() on the
        result.
        ]]></doc>
<argument name="self"></argument>
<argument name="children" type="NoneType"><value></value>
</argument>
<argument name="connector" type="NoneType"><value></value>
</argument>
<argument name="negated" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="negate"><doc><![CDATA[
        Negate the sense of the root connector. This reorganises the children
        so that the current node has a single child: a negated node containing
        all the previous children. This slightly odd construction makes adding
        new children behave more intuitively.

        Interpreting the meaning of this negate is up to client code. This
        method is useful for implementing "not" arrangements.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__len__"><doc><![CDATA[
        The size of a node if the number of children it has.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="end_subtree"><doc><![CDATA[
        Closes off the most recently unmatched start_subtree() call.

        This puts the current state into a node of the parent tree and returns
        the current instances state to be the parent.
        ]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.utils.encoding" file="/django/utils/encoding.pyc"><doc></doc>
<depends name="urllib"></depends>
<depends name="locale"></depends>
<depends name="codecs"></depends>
<depends name="datetime"></depends>
<depends name="types"></depends>
<depends name="decimal"></depends>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="Promise" module="django.utils.functional"></import_class>
<attribute name="DEFAULT_LOCALE_ENCODING" type="str"><value><![CDATA[UTF8]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="locale" type="module"><value><![CDATA[<module 'locale' from '/usr/lib/python2.7/locale.pyc'>]]></value>
</attribute>
<attribute name="codecs" type="module"><value><![CDATA[<module 'codecs' from '/usr/lib/python2.7/codecs.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="types" type="module"><value><![CDATA[<module 'types' from '/usr/lib/python2.7/types.pyc'>]]></value>
</attribute>
<function name="force_unicode"><doc><![CDATA[
    Similar to smart_unicode, except that lazy instances are resolved to
    strings, rather than kept as lazy objects.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<function name="is_protected_type"><doc><![CDATA[Determine if the object instance is of a protected type.

    Objects of protected types are preserved as-is when passed to
    force_unicode(strings_only=True).
    ]]></doc>
<argument name="obj"></argument>
</function>
<function name="smart_str"><doc><![CDATA[
    Returns a bytestring version of 's', encoded as specified in 'encoding'.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<function name="iri_to_uri"><doc><![CDATA[
    Convert an Internationalized Resource Identifier (IRI) portion to a URI
    portion that is suitable for inclusion in a URL.

    This is the algorithm from section 3.1 of RFC 3987.  However, since we are
    assuming input is either UTF-8 or unicode already, we can simplify things a
    little from the full method.

    Returns an ASCII string containing the encoded result.
    ]]></doc>
<argument name="iri"></argument>
</function>
<function name="filepath_to_uri"><doc><![CDATA[Convert an file system path to a URI portion that is suitable for
    inclusion in a URL.

    We are assuming input is either UTF-8 or unicode already.

    This method will encode certain chars that would normally be recognized as
    special chars for URIs.  Note that this method does not encode the '
    character, as it is a valid character within URIs.  See
    encodeURIComponent() JavaScript function for more details.

    Returns an ASCII string containing the encoded result.
    ]]></doc>
<argument name="path"></argument>
</function>
<function name="smart_unicode"><doc><![CDATA[
    Returns a unicode object representing 's'. Treats bytestrings using the
    'encoding' codec.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<class name="StrAndUnicode"></class>
<doc><![CDATA[
    A class whose __str__ returns its __unicode__ as a UTF-8 bytestring.

    Useful as a mix-in.
    ]]></doc>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="DjangoUnicodeDecodeError"></class>
<doc></doc>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
</package>
<package name="django.utils.datastructures" file="/django/utils/datastructures.pyc"><doc></doc>
<depends name="copy"></depends>
<depends name="__builtin__"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="GeneratorType" module="__builtin__"></import_class>
<class name="ImmutableList"></class>
<doc><![CDATA[
    A tuple-like object that raises useful errors when it is asked to mutate.

    Example::

        >>> a = ImmutableList(range(5), warning="You cannot mutate this.")
        >>> a[3] = '4'
        Traceback (most recent call last):
            ...
        AttributeError: You cannot mutate this.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9006bfc>]]></value>
</attribute>
<function name="sort" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="extend" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="insert" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pop" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__setitem__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__imul__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iadd__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="complain" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="append" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reverse" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__delitem__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__delslice__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__setslice__" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="remove" args="wargs" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultiValueDictKeyError"></class>
<doc></doc>
<class name="DotExpandedDict"></class>
<doc><![CDATA[
    A special dictionary constructor that takes a dictionary in which the keys
    may contain dots to specify inner dictionaries. It's confusing, but this
    example should make sense.

    >>> d = DotExpandedDict({'person.1.firstname': ['Simon'],             'person.1.lastname': ['Willison'],             'person.2.firstname': ['Adrian'],             'person.2.lastname': ['Holovaty']})
    >>> d
    {'person': {'1': {'lastname': ['Willison'], 'firstname': ['Simon']}, '2': {'lastname': ['Holovaty'], 'firstname': ['Adrian']}}}
    >>> d['person']
    {'1': {'lastname': ['Willison'], 'firstname': ['Simon']}, '2': {'lastname': ['Holovaty'], 'firstname': ['Adrian']}}
    >>> d['person']['1']
    {'lastname': ['Willison'], 'firstname': ['Simon']}

    # Gotcha: Results are unpredictable if the dots are "uneven":
    >>> DotExpandedDict({'c.1': 2, 'c.2': 3, 'c': 1})
    {'c': 1}
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="key_to_list_mapping"></argument>
</function>
<class name="SortedDict"></class>
<doc><![CDATA[
    A dictionary that keeps its keys in the order in which they're inserted.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x900625c>]]></value>
</attribute>
<function name="__delitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="keys"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="iteritems"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_for_index"><doc><![CDATA[Returns the value of the item at the given zero-based index.]]></doc>
<argument name="self"></argument>
<argument name="index"></argument>
</function>
<function name="pop" args="args"><doc></doc>
<argument name="self"></argument>
<argument name="k"></argument>
</function>
<function name="update"><doc></doc>
<argument name="self"></argument>
<argument name="dict_"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="popitem"><doc></doc>
<argument name="self"></argument>
</function>
<function name="copy"><doc><![CDATA[Returns a copy of this object.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
</function>
<function name="setdefault"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default"></argument>
</function>
<function name="insert"><doc><![CDATA[Inserts the key, value pair before the item with the given index.]]></doc>
<argument name="self"></argument>
<argument name="index"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="items"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clear"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="values"><doc></doc>
<argument name="self"></argument>
</function>
<function name="iterkeys"><doc></doc>
<argument name="self"></argument>
</function>
<function name="itervalues"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc><![CDATA[
        Replaces the normal dict.__repr__ with a version that returns the keys
        in their sorted order.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="DictWrapper"></class>
<doc><![CDATA[
    Wraps accesses to a dictionary so that certain values (those starting with
    the specified prefix) are passed through a function before being returned.
    The prefix is removed before looking up the real value.

    Used by the SQL construction code to ensure that values are correctly
    quoted before being used.
    ]]></doc>
<function name="__getitem__"><doc><![CDATA[
        Retrieves the real value after stripping the prefix string (if
        present). If the prefix is present, pass the value through self.func
        before returning, otherwise return the raw value.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="func"></argument>
<argument name="prefix"></argument>
</function>
<class name="MultiValueDict"></class>
<doc><![CDATA[
    A subclass of dictionary customized to handle multiple values for the
    same key.

    >>> d = MultiValueDict({'name': ['Adrian', 'Simon'], 'position': ['Developer']})
    >>> d['name']
    'Simon'
    >>> d.getlist('name')
    ['Adrian', 'Simon']
    >>> d.get('lastname', 'nonexistent')
    'nonexistent'
    >>> d.setlist('lastname', ['Holovaty', 'Willison'])

    This class exists to solve the irritating problem raised by cgi.parse_qs,
    which returns a list for every key, even though most Web forms submit
    single name-value pairs.
    ]]></doc>
<function name="iterlists"><doc><![CDATA[Yields (key, list) pairs.]]></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[
        Returns the last data value for this key, or [] if it's an empty list;
        raises KeyError if not found.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="get"><doc><![CDATA[
        Returns the last data value for the passed key. If key doesn't exist
        or value is an empty list, then default is returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo" type="NoneType"><value></value>
</argument>
</function>
<function name="appendlist"><doc><![CDATA[Appends an item to the internal list associated with key.]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="getlist"><doc><![CDATA[
        Returns the list of values for the passed key. If key doesn't exist,
        then an empty list is returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="update" args="args" kwargs="kwargs"><doc><![CDATA[
        update() extends rather than replaces existing key lists.
        Also accepts keyword args.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="lists"><doc><![CDATA[Returns a list of (key, list) pairs.]]></doc>
<argument name="self"></argument>
</function>
<function name="__setitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="iteritems"><doc><![CDATA[
        Yields (key, value) pairs, where value is the last item in the list
        associated with the key.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="copy"><doc><![CDATA[Returns a shallow copy of this object.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="key_to_list_mapping" type="tuple"><value></value>
</argument>
</function>
<function name="__copy__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="setdefault"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="items"><doc><![CDATA[
        Returns a list of (key, value) pairs, where value is the last item in
        the list associated with the key.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__setstate__"><doc></doc>
<argument name="self"></argument>
<argument name="obj_dict"></argument>
</function>
<function name="setlist"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="list_"></argument>
</function>
<function name="values"><doc><![CDATA[Returns a list of the last value on every key list.]]></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="itervalues"><doc><![CDATA[Yield the last value on every key list.]]></doc>
<argument name="self"></argument>
</function>
<function name="setlistdefault"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default_list" type="tuple"><value></value>
</argument>
</function>
<function name="__getstate__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MergeDict"></class>
<doc><![CDATA[
    A simple class for creating new "virtual" dictionaries that actually look
    up values in more than one dictionary, passed in the constructor.

    If a key appears in more than one of the given dictionaries, only the
    first occurrence will be used.
    ]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="keys"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc><![CDATA[
        Returns something like

            "{'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}"

        instead of the generic "<object meta-data>" inherited from object.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="getlist"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="iteritems"><doc></doc>
<argument name="self"></argument>
</function>
<function name="copy"><doc><![CDATA[Returns a copy of this object.]]></doc>
<argument name="self"></argument>
</function>
<function name="iterkeys"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__contains__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="items"><doc></doc>
<argument name="self"></argument>
</function>
<function name="values"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="dicts"><doc></doc>
<argument name="self"></argument>
</function>
<function name="itervalues"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__copy__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc><![CDATA[
        Returns something like

            MergeDict({'key1': 'val1', 'key2': 'val2'}, {'key3': 'val3'})

        instead of generic "<object meta-data>" inherited from object.
        ]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.conf" file="/django/conf/__init__.pyc"><doc><![CDATA[
Settings and configuration for Django.

Values will be read from the module specified by the DJANGO_SETTINGS_MODULE environment
variable, and then from django.conf.global_settings; see the global settings file for
a list of all possible variables.
]]></doc>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="global_settings" type="module"><value><![CDATA[<module 'django.conf.global_settings' from '/usr/local/lib/python2.7/dist-packages/django/conf/global_settings.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="settings" type="LazySettings"><value><![CDATA[<django.conf.LazySettings object at 0xb6ec184c>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<attribute name="ENVIRONMENT_VARIABLE" type="str"><value><![CDATA[DJANGO_SETTINGS_MODULE]]></value>
</attribute>
<class name="LazySettings"></class>
<doc><![CDATA[
    A lazy proxy for either global Django settings or a custom settings object.
    The user can manually configure settings prior to using them. Otherwise,
    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.
    ]]></doc>
<attribute name="configured" type="property"><value><![CDATA[<property object at 0xb6ec216c>]]></value>
</attribute>
<function name="_setup"><doc><![CDATA[
        Load the settings module pointed to by the environment variable. This
        is used the first time we need any settings at all, if the user has not
        previously configured the settings manually.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="configure" kwargs="options"><doc><![CDATA[
        Called to manually configure the settings. The 'default_settings'
        parameter sets where to retrieve any unspecified values from (its
        argument must support attribute access (__getattr__)).
        ]]></doc>
<argument name="self"></argument>
<argument name="default_settings" type="module"><value><![CDATA[<module 'django.conf.global_settings' from '/usr/local/lib/python2.7/dist-packages/django/conf/global_settings.pyc'>]]></value>
</argument>
</function>
<class name="BaseSettings"></class>
<doc><![CDATA[
    Common logic for settings whether set by a module or by the user.
    ]]></doc>
<function name="__setattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<class name="UserSettingsHolder"></class>
<doc><![CDATA[
    Holder for user configured settings.
    ]]></doc>
<attribute name="__members__" type="property"><value><![CDATA[<property object at 0xb6ec225c>]]></value>
</attribute>
<attribute name="SETTINGS_MODULE" type="NoneType"><value></value>
</attribute>
<function name="__init__"><doc><![CDATA[
        Requests for configuration variables not in this class are satisfied
        from the module specified in default_settings (if possible).
        ]]></doc>
<argument name="self"></argument>
<argument name="default_settings"></argument>
</function>
<function name="__dir__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getattr__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="Settings"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="settings_module"></argument>
</function>
</package>
<package name="django.conf.global_settings" file="/django/conf/global_settings.pyc"><doc></doc>
<import_function name="get_version" module="django"></import_function>
<attribute name="EMAIL_USE_TLS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LANGUAGE_CODE" type="str"><value><![CDATA[en-us]]></value>
</attribute>
<attribute name="LOGIN_URL" type="str"><value><![CDATA[/accounts/login/]]></value>
</attribute>
<attribute name="DEFAULT_CHARSET" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<attribute name="STATIC_ROOT" type="str"><value></value>
</attribute>
<attribute name="TEST_DATABASE_CHARSET" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST" type="str"><value><![CDATA[localhost]]></value>
</attribute>
<attribute name="MESSAGE_STORAGE" type="str"><value><![CDATA[django.contrib.messages.storage.user_messages.LegacyFallbackStorage]]></value>
</attribute>
<attribute name="DATABASE_HOST" type="str"><value></value>
</attribute>
<attribute name="EMAIL_SUBJECT_PREFIX" type="str"><value><![CDATA[[Django] ]]></value>
</attribute>
<attribute name="SEND_BROKEN_LINK_EMAILS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="URL_VALIDATOR_USER_AGENT" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</attribute>
<attribute name="TEST_RUNNER" type="str"><value><![CDATA[django.test.simple.DjangoTestSuiteRunner]]></value>
</attribute>
<attribute name="SESSION_COOKIE_DOMAIN" type="NoneType"><value></value>
</attribute>
<attribute name="STATIC_URL" type="NoneType"><value></value>
</attribute>
<attribute name="ADMIN_FOR" type="tuple"><value></value>
</attribute>
<attribute name="TIME_INPUT_FORMATS" type="tuple"><value><![CDATA[('%H:%M:%S', '%H:%M')]]></value>
</attribute>
<attribute name="DATABASES" type="dict"><value></value>
</attribute>
<attribute name="TEST_DATABASE_NAME" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_UPLOAD_PERMISSIONS" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_UPLOAD_HANDLERS" type="tuple"><value><![CDATA[('django.core.files.uploadhandler.MemoryFileUploadHandler', 'django.core.files.uploadhandler.TemporaryFileUploadHandler')]]></value>
</attribute>
<attribute name="DEFAULT_CONTENT_TYPE" type="str"><value><![CDATA[text/html]]></value>
</attribute>
<attribute name="APPEND_SLASH" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="FIRST_DAY_OF_WEEK" type="int"><value></value>
</attribute>
<attribute name="DATABASE_ROUTERS" type="list"><value></value>
</attribute>
<attribute name="YEAR_MONTH_FORMAT" type="str"><value><![CDATA[F Y]]></value>
</attribute>
<attribute name="STATICFILES_STORAGE" type="str"><value><![CDATA[django.contrib.staticfiles.storage.StaticFilesStorage]]></value>
</attribute>
<attribute name="CACHES" type="dict"><value><![CDATA[{'default': {'LOCATION': '', 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}}]]></value>
</attribute>
<attribute name="SERVER_EMAIL" type="str"><value><![CDATA[root@localhost]]></value>
</attribute>
<attribute name="SESSION_COOKIE_PATH" type="str"><value><![CDATA[/]]></value>
</attribute>
<attribute name="IGNORABLE_404_ENDS" type="tuple"><value><![CDATA[('mail.pl', 'mailform.pl', 'mail.cgi', 'mailform.cgi', 'favicon.ico', '.php')]]></value>
</attribute>
<attribute name="MIDDLEWARE_CLASSES" type="tuple"><value><![CDATA[('django.middleware.common.CommonMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware')]]></value>
</attribute>
<attribute name="USE_I18N" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="THOUSAND_SEPARATOR" type="str"><value><![CDATA[,]]></value>
</attribute>
<attribute name="SECRET_KEY" type="str"><value></value>
</attribute>
<attribute name="LANGUAGE_COOKIE_NAME" type="str"><value><![CDATA[django_language]]></value>
</attribute>
<attribute name="FILE_UPLOAD_TEMP_DIR" type="NoneType"><value></value>
</attribute>
<attribute name="TRANSACTIONS_MANAGED" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LOGGING_CONFIG" type="str"><value><![CDATA[django.utils.log.dictConfig]]></value>
</attribute>
<attribute name="TEMPLATE_LOADERS" type="tuple"><value><![CDATA[('django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader')]]></value>
</attribute>
<attribute name="TEMPLATE_DEBUG" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CSRF_COOKIE_NAME" type="str"><value><![CDATA[csrftoken]]></value>
</attribute>
<attribute name="TEST_DATABASE_COLLATION" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST_PASSWORD" type="str"><value></value>
</attribute>
<attribute name="USE_X_FORWARDED_HOST" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_COOKIE_SECURE" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CSRF_COOKIE_DOMAIN" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_CHARSET" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<attribute name="DEBUG" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_FILE_PATH" type="NoneType"><value></value>
</attribute>
<attribute name="DEFAULT_FILE_STORAGE" type="str"><value><![CDATA[django.core.files.storage.FileSystemStorage]]></value>
</attribute>
<attribute name="INSTALLED_APPS" type="tuple"><value></value>
</attribute>
<attribute name="LANGUAGES" type="tuple"><value><![CDATA[(('ar', 'Arabic'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('bn', 'Bengali'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-gb', 'British English'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy-nl', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('id', 'Indonesian'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('nl', 'Dutch'), ('no', 'Norwegian'), ('nb', 'Norwegian Bokmal'), ('nn', 'Norwegian Nynorsk'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-tw', 'Traditional Chinese'))]]></value>
</attribute>
<attribute name="DATABASE_ENGINE" type="str"><value></value>
</attribute>
<attribute name="DATABASE_NAME" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_FIRST_FEW" type="int"><value></value>
</attribute>
<attribute name="PREPEND_WWW" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TEMPLATE_CONTEXT_PROCESSORS" type="tuple"><value><![CDATA[('django.contrib.auth.context_processors.auth', 'django.core.context_processors.debug', 'django.core.context_processors.i18n', 'django.core.context_processors.media', 'django.core.context_processors.static', 'django.contrib.messages.context_processors.messages')]]></value>
</attribute>
<attribute name="DATABASE_PORT" type="str"><value></value>
</attribute>
<attribute name="DEBUG_PROPAGATE_EXCEPTIONS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="MONTH_DAY_FORMAT" type="str"><value><![CDATA[F j]]></value>
</attribute>
<attribute name="MANAGERS" type="tuple"><value></value>
</attribute>
<attribute name="SESSION_EXPIRE_AT_BROWSER_CLOSE" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TIME_FORMAT" type="str"><value><![CDATA[P]]></value>
</attribute>
<attribute name="DATE_INPUT_FORMATS" type="tuple"><value><![CDATA[('%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y', '%b %d %Y', '%b %d, %Y', '%d %b %Y', '%d %b, %Y', '%B %d %Y', '%B %d, %Y', '%d %B %Y', '%d %B, %Y')]]></value>
</attribute>
<attribute name="AUTHENTICATION_BACKENDS" type="tuple"><value><![CDATA[('django.contrib.auth.backends.ModelBackend',)]]></value>
</attribute>
<attribute name="USE_THOUSAND_SEPARATOR" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="PASSWORD_RESET_TIMEOUT_DAYS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="SESSION_SAVE_EVERY_REQUEST" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="ADMIN_MEDIA_PREFIX" type="str"><value><![CDATA[/static/admin/]]></value>
</attribute>
<attribute name="NUMBER_GROUPING" type="int"><value></value>
</attribute>
<attribute name="SESSION_ENGINE" type="str"><value><![CDATA[django.contrib.sessions.backends.db]]></value>
</attribute>
<attribute name="CSRF_FAILURE_VIEW" type="str"><value><![CDATA[django.views.csrf.csrf_failure]]></value>
</attribute>
<attribute name="LOCALE_PATHS" type="tuple"><value></value>
</attribute>
<attribute name="LOGIN_REDIRECT_URL" type="str"><value><![CDATA[/accounts/profile/]]></value>
</attribute>
<attribute name="DECIMAL_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_KEY_PREFIX" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_SKETCHY_USERS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="TEMPLATE_STRING_IF_INVALID" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_ALLOW_PROFANITIES" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LOGOUT_URL" type="str"><value><![CDATA[/accounts/logout/]]></value>
</attribute>
<attribute name="USE_L10N" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TEMPLATE_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="FIXTURE_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="FORCE_SCRIPT_NAME" type="NoneType"><value></value>
</attribute>
<attribute name="DATE_FORMAT" type="str"><value><![CDATA[N j, Y]]></value>
</attribute>
<attribute name="MEDIA_ROOT" type="str"><value></value>
</attribute>
<attribute name="ADMINS" type="tuple"><value></value>
</attribute>
<attribute name="FORMAT_MODULE_PATH" type="NoneType"><value></value>
</attribute>
<attribute name="DEFAULT_FROM_EMAIL" type="str"><value><![CDATA[webmaster@localhost]]></value>
</attribute>
<attribute name="STATICFILES_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="MEDIA_URL" type="str"><value></value>
</attribute>
<attribute name="DATETIME_FORMAT" type="str"><value><![CDATA[N j, Y, P]]></value>
</attribute>
<attribute name="IGNORABLE_404_STARTS" type="tuple"><value><![CDATA[('/cgi-bin/', '/_vti_bin', '/_vti_inf')]]></value>
</attribute>
<attribute name="DISALLOWED_USER_AGENTS" type="tuple"><value></value>
</attribute>
<attribute name="ALLOWED_INCLUDE_ROOTS" type="tuple"><value></value>
</attribute>
<attribute name="LOGGING" type="dict"><value><![CDATA[{'loggers': {'django.request': {'level': 'ERROR', 'propagate': True, 'handlers': ['mail_admins']}}, 'version': 1, 'disable_existing_loggers': False, 'handlers': {'mail_admins': {'class': 'django.utils.log.AdminEmailHandler', 'level': 'ERROR'}}}]]></value>
</attribute>
<attribute name="SHORT_DATE_FORMAT" type="str"><value><![CDATA[m/d/Y]]></value>
</attribute>
<attribute name="DATABASE_USER" type="str"><value></value>
</attribute>
<attribute name="STATICFILES_FINDERS" type="tuple"><value><![CDATA[('django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder')]]></value>
</attribute>
<attribute name="TIME_ZONE" type="str"><value><![CDATA[America/Chicago]]></value>
</attribute>
<attribute name="FILE_UPLOAD_MAX_MEMORY_SIZE" type="int"><value><![CDATA[2621440]]></value>
</attribute>
<attribute name="EMAIL_BACKEND" type="str"><value><![CDATA[django.core.mail.backends.smtp.EmailBackend]]></value>
</attribute>
<attribute name="DEFAULT_TABLESPACE" type="str"><value></value>
</attribute>
<attribute name="SESSION_COOKIE_HTTPONLY" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_COOKIE_AGE" type="int"><value><![CDATA[1209600]]></value>
</attribute>
<attribute name="USE_ETAGS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LANGUAGES_BIDI" type="tuple"><value><![CDATA[('he', 'ar', 'fa')]]></value>
</attribute>
<attribute name="DEFAULT_INDEX_TABLESPACE" type="str"><value></value>
</attribute>
<attribute name="INTERNAL_IPS" type="tuple"><value></value>
</attribute>
<attribute name="SESSION_COOKIE_NAME" type="str"><value><![CDATA[sessionid]]></value>
</attribute>
<attribute name="EMAIL_PORT" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="SHORT_DATETIME_FORMAT" type="str"><value><![CDATA[m/d/Y P]]></value>
</attribute>
<attribute name="ABSOLUTE_URL_OVERRIDES" type="dict"><value></value>
</attribute>
<attribute name="DATABASE_OPTIONS" type="dict"><value></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_SECONDS" type="int"><value><![CDATA[600]]></value>
</attribute>
<attribute name="BANNED_IPS" type="tuple"><value></value>
</attribute>
<attribute name="DATETIME_INPUT_FORMATS" type="tuple"><value><![CDATA[('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d', '%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M', '%m/%d/%Y', '%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M', '%m/%d/%y')]]></value>
</attribute>
<attribute name="DATABASE_PASSWORD" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_MODERATORS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="COMMENTS_BANNED_USERS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST_USER" type="str"><value></value>
</attribute>
<attribute name="PROFANITIES_LIST" type="tuple"><value></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="s"></argument>
</function>
</package>
<package name="django.forms" file="/django/forms/__init__.pyc"><doc><![CDATA[
Django validation and HTML form handling.

TODO:
    Default value for field
    Field labels
    Nestable Forms
    FatalValidationError -- short-circuits all other validators on a form
    ValidationWarning
    "This form field requires foo.js" and form.js_includes()
]]></doc>
<import_function name="save_instance" module="django.forms.models"></import_function>
<import_function name="fields_for_model" module="django.forms.models"></import_function>
<import_function name="model_to_dict" module="django.forms.models"></import_function>
<import_class name="DateField" module="django.forms.fields"></import_class>
<import_class name="ModelMultipleChoiceField" module="django.forms.models"></import_class>
<import_class name="IPAddressField" module="django.forms.fields"></import_class>
<import_class name="MultipleChoiceField" module="django.forms.fields"></import_class>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="TypedChoiceField" module="django.forms.fields"></import_class>
<import_class name="SlugField" module="django.forms.fields"></import_class>
<import_class name="FloatField" module="django.forms.fields"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="EmailField" module="django.forms.fields"></import_class>
<import_class name="TimeField" module="django.forms.fields"></import_class>
<import_class name="MultiWidget" module="django.forms.widgets"></import_class>
<import_class name="BaseForm" module="django.forms.forms"></import_class>
<import_class name="Widget" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="Form" module="django.forms.forms"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="MediaDefiningClass" module="django.forms.widgets"></import_class>
<import_class name="CheckboxInput" module="django.forms.widgets"></import_class>
<import_class name="CheckboxSelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="NullBooleanField" module="django.forms.fields"></import_class>
<import_class name="RadioSelect" module="django.forms.widgets"></import_class>
<import_class name="SplitDateTimeField" module="django.forms.fields"></import_class>
<import_class name="TimeInput" module="django.forms.widgets"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="DecimalField" module="django.forms.fields"></import_class>
<import_class name="MultiValueField" module="django.forms.fields"></import_class>
<import_class name="Textarea" module="django.forms.widgets"></import_class>
<import_class name="BaseModelForm" module="django.forms.models"></import_class>
<import_class name="ModelChoiceField" module="django.forms.models"></import_class>
<import_class name="ClearableFileInput" module="django.forms.widgets"></import_class>
<import_class name="BooleanField" module="django.forms.fields"></import_class>
<import_class name="FileInput" module="django.forms.widgets"></import_class>
<import_class name="PasswordInput" module="django.forms.widgets"></import_class>
<import_class name="ComboField" module="django.forms.fields"></import_class>
<import_class name="ChoiceField" module="django.forms.fields"></import_class>
<import_class name="FileField" module="django.forms.fields"></import_class>
<import_class name="CharField" module="django.forms.fields"></import_class>
<import_class name="RegexField" module="django.forms.fields"></import_class>
<import_class name="SplitDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="TypedMultipleChoiceField" module="django.forms.fields"></import_class>
<import_class name="NullBooleanSelect" module="django.forms.widgets"></import_class>
<import_class name="URLField" module="django.forms.fields"></import_class>
<import_class name="DateInput" module="django.forms.widgets"></import_class>
<import_class name="DateTimeInput" module="django.forms.widgets"></import_class>
<import_class name="IntegerField" module="django.forms.fields"></import_class>
<import_class name="FilePathField" module="django.forms.fields"></import_class>
<import_class name="DateTimeField" module="django.forms.fields"></import_class>
<import_class name="ModelForm" module="django.forms.models"></import_class>
<import_class name="Select" module="django.forms.widgets"></import_class>
<import_class name="ImageField" module="django.forms.fields"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/forms.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.forms.models' from '/usr/local/lib/python2.7/dist-packages/django/forms/models.pyc'>]]></value>
</attribute>
<attribute name="widgets" type="module"><value><![CDATA[<module 'django.forms.widgets' from '/usr/local/lib/python2.7/dist-packages/django/forms/widgets.pyc'>]]></value>
</attribute>
<attribute name="util" type="module"><value><![CDATA[<module 'django.forms.util' from '/usr/local/lib/python2.7/dist-packages/django/forms/util.pyc'>]]></value>
</attribute>
<attribute name="fields" type="module"><value><![CDATA[<module 'django.forms.fields' from '/usr/local/lib/python2.7/dist-packages/django/forms/fields.pyc'>]]></value>
</attribute>
<attribute name="formsets" type="module"><value><![CDATA[<module 'django.forms.formsets' from '/usr/local/lib/python2.7/dist-packages/django/forms/formsets.pyc'>]]></value>
</attribute>
</package>
<package name="django.forms.formsets" file="/django/forms/formsets.pyc"><doc></doc>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="IntegerField" module="django.forms.fields"></import_class>
<import_class name="Form" module="django.forms.forms"></import_class>
<import_class name="BooleanField" module="django.forms.fields"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<attribute name="ORDERING_FIELD_NAME" type="str"><value><![CDATA[ORDER]]></value>
</attribute>
<attribute name="INITIAL_FORM_COUNT" type="str"><value><![CDATA[INITIAL_FORMS]]></value>
</attribute>
<attribute name="DELETION_FIELD_NAME" type="str"><value><![CDATA[DELETE]]></value>
</attribute>
<attribute name="MAX_NUM_FORM_COUNT" type="str"><value><![CDATA[MAX_NUM_FORMS]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('BaseFormSet', 'all_valid')]]></value>
</attribute>
<attribute name="TOTAL_FORM_COUNT" type="str"><value><![CDATA[TOTAL_FORMS]]></value>
</attribute>
<function name="formset_factory"><doc><![CDATA[Return a FormSet for the given form class.]]></doc>
<argument name="form"></argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.formsets.BaseFormSet'>]]></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
</function>
<function name="all_valid"><doc><![CDATA[Returns true if every formset in formsets is valid.]]></doc>
<argument name="formsets"></argument>
</function>
<class name="ManagementForm"></class>
<doc><![CDATA[
    ``ManagementForm`` is used to keep track of how many form instances
    are displayed on the page. If adding new forms via javascript, you should
    increment the count field of this form as well.
    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9113dc4>]]></value>
</attribute>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="BaseFormSet"></class>
<doc><![CDATA[
    A collection of instances of the same Form class.
    ]]></doc>
<attribute name="management_form" type="property"><value><![CDATA[<property object at 0x9113dec>]]></value>
</attribute>
<attribute name="errors" type="property"><value><![CDATA[<property object at 0x9113f04>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9113f2c>]]></value>
</attribute>
<attribute name="ordered_forms" type="property"><value><![CDATA[<property object at 0x9113edc>]]></value>
</attribute>
<attribute name="deleted_forms" type="property"><value><![CDATA[<property object at 0x9113eb4>]]></value>
</attribute>
<attribute name="cleaned_data" type="property"><value><![CDATA[<property object at 0x9113e8c>]]></value>
</attribute>
<attribute name="initial_forms" type="property"><value><![CDATA[<property object at 0x9113e14>]]></value>
</attribute>
<attribute name="extra_forms" type="property"><value><![CDATA[<property object at 0x9113e3c>]]></value>
</attribute>
<attribute name="get_default_prefix" type="instancemethod"><value><![CDATA[<bound method type.get_default_prefix of <class 'django.forms.formsets.BaseFormSet'>>]]></value>
</attribute>
<attribute name="empty_form" type="property"><value><![CDATA[<property object at 0x9113e64>]]></value>
</attribute>
<function name="as_ul"><doc><![CDATA[Returns this formset rendered as HTML <li>s.]]></doc>
<argument name="self"></argument>
</function>
<function name="initial_form_count"><doc><![CDATA[Returns the number of forms that are required in this FormSet.]]></doc>
<argument name="self"></argument>
</function>
<function name="_construct_forms"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_errors"><doc><![CDATA[
        Returns a list of form.errors for every form in self.forms.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="full_clean"><doc><![CDATA[
        Cleans all of self.data and populates self._errors.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_extra_forms"><doc><![CDATA[Return a list of all the extra forms in this formset.]]></doc>
<argument name="self"></argument>
</function>
<function name="_management_form"><doc><![CDATA[Returns the ManagementForm instance for this FormSet.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
<argument name="files" type="NoneType"><value></value>
</argument>
<argument name="auto_id" type="str"><value><![CDATA[id_%s]]></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="error_class" type="type"><value><![CDATA[<class 'django.forms.util.ErrorList'>]]></value>
</argument>
</function>
<function name="_get_media"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_valid"><doc><![CDATA[
        Returns True if form.errors is empty for every form in self.forms.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_construct_form" kwargs="kwargs"><doc><![CDATA[
        Instantiates and returns the i-th form instance in a formset.
        ]]></doc>
<argument name="self"></argument>
<argument name="i"></argument>
</function>
<function name="_get_deleted_forms"><doc><![CDATA[
        Returns a list of forms that have been marked for deletion. Raises an
        AttributeError if deletion is not allowed.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[Returns the form at the given index, based on the rendering order]]></doc>
<argument name="self"></argument>
<argument name="index"></argument>
</function>
<function name="_should_delete_form"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
</function>
<function name="non_form_errors"><doc><![CDATA[
        Returns an ErrorList of errors that aren't associated with a particular
        form -- i.e., from formset.clean(). Returns an empty ErrorList if there
        are none.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc><![CDATA[Yields the forms in the order they should be rendered]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_ordered_forms"><doc><![CDATA[
        Returns a list of form in the order specified by the incoming data.
        Raises an AttributeError if ordering is not allowed.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_empty_form" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="as_table"><doc><![CDATA[Returns this formset rendered as HTML <tr>s -- excluding the <table></table>.]]></doc>
<argument name="self"></argument>
</function>
<function name="is_multipart"><doc><![CDATA[
        Returns True if the formset needs to be multipart-encrypted, i.e. it
        has FileInput. Otherwise, False.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="total_form_count"><doc><![CDATA[Returns the total number of forms in this FormSet.]]></doc>
<argument name="self"></argument>
</function>
<function name="add_fields"><doc><![CDATA[A hook for adding extra fields on to each form instance.]]></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="index"></argument>
</function>
<function name="__len__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clean"><doc><![CDATA[
        Hook for doing any extra formset-wide cleaning after Form.clean() has
        been called on every form. Any ValidationError raised by this method
        will not be associated with a particular form; it will be accesible
        via formset.non_form_errors()
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_p"><doc><![CDATA[Returns this formset rendered as HTML <p>s.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_initial_forms"><doc><![CDATA[Return a list of all the initial forms in this formset.]]></doc>
<argument name="self"></argument>
</function>
<function name="add_prefix"><doc></doc>
<argument name="self"></argument>
<argument name="index"></argument>
</function>
<function name="_get_cleaned_data"><doc><![CDATA[
        Returns a list of form.cleaned_data dicts for every form in self.forms.
        ]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.forms.fields" file="/django/forms/fields.pyc"><doc><![CDATA[
Field classes.
]]></doc>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="time"></depends>
<depends name="urlparse"></depends>
<depends name="os"></depends>
<depends name="decimal"></depends>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="DecimalException" module="decimal"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="SplitHiddenDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="CheckboxInput" module="django.forms.widgets"></import_class>
<import_class name="TimeInput" module="django.forms.widgets"></import_class>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="ClearableFileInput" module="django.forms.widgets"></import_class>
<import_class name="PasswordInput" module="django.forms.widgets"></import_class>
<import_class name="SplitDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="NullBooleanSelect" module="django.forms.widgets"></import_class>
<import_class name="DateInput" module="django.forms.widgets"></import_class>
<import_class name="DateTimeInput" module="django.forms.widgets"></import_class>
<import_class name="Select" module="django.forms.widgets"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="validators" type="module"><value><![CDATA[<module 'django.core.validators' from '/usr/local/lib/python2.7/dist-packages/django/core/validators.pyc'>]]></value>
</attribute>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="FILE_INPUT_CONTRADICTION" type="object"><value><![CDATA[<object object at 0xb73b5598>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'TimeField', 'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField', 'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField')]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<attribute name="formats" type="module"><value><![CDATA[<module 'django.utils.formats' from '/usr/local/lib/python2.7/dist-packages/django/utils/formats.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="en_format"><doc><![CDATA[
    Helper function to stay backward compatible.
    ]]></doc>
<argument name="name"></argument>
</function>
<class name="DateField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f62ac>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that the input can be converted to a date. Returns a Python
        datetime.date object.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="input_formats" type="NoneType"><value></value>
</argument>
</function>
<class name="FloatField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f60ac>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that float() can be called on the input. Returns the result
        of float(). Returns None for empty values.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="MultipleChoiceField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<import_class name="hidden_widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_list': <django.utils.functional.__proxy__ object at 0x90f682c>, 'invalid_choice': <django.utils.functional.__proxy__ object at 0x90f67ec>}]]></value>
</attribute>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="validate"><doc><![CDATA[
        Validates that the input is a list or tuple.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="TypedChoiceField"></class>
<doc></doc>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc><![CDATA[
        Validates that the value is in self.choices and can be coerced to the
        right type.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="SlugField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f6a8c>}]]></value>
</attribute>
<attribute name="default_validators" type="list"><value><![CDATA[[<django.core.validators.RegexValidator object at 0x90edfac>]]]></value>
</attribute>
<class name="Field"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<import_class name="hidden_widget" module="django.forms.widgets"></import_class>
<attribute name="creation_counter" type="int"><value><![CDATA[28]]></value>
</attribute>
<attribute name="default_validators" type="list"><value></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'required': <django.utils.functional.__proxy__ object at 0x9097d2c>, 'invalid': <django.utils.functional.__proxy__ object at 0x90a420c>}]]></value>
</attribute>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="prepare_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="widget_attrs"><doc><![CDATA[
        Given a Widget instance (*not* a Widget class), returns a dictionary of
        any HTML attributes that should be added to the Widget, based on this
        Field.
        ]]></doc>
<argument name="self"></argument>
<argument name="widget"></argument>
</function>
<function name="bound_data"><doc><![CDATA[
        Return the value that should be shown for this field on render of a
        bound form, given the submitted POST data for the field and the initial
        data, if any.

        For most fields, this will simply be data; FileFields need to handle it
        a bit differently.
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="initial"></argument>
</function>
<function name="clean"><doc><![CDATA[
        Validates the given value and returns its "cleaned" value as an
        appropriate Python object.

        Raises ValidationError for any errors.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="run_validators"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="required" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="label" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="NoneType"><value></value>
</argument>
<argument name="error_messages" type="NoneType"><value></value>
</argument>
<argument name="show_hidden_initial" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="validators" type="list"><value></value>
</argument>
<argument name="localize" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="EmailField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f644c>}]]></value>
</attribute>
<attribute name="default_validators" type="list"><value><![CDATA[[<django.core.validators.EmailValidator object at 0x90edb2c>]]]></value>
</attribute>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="TimeField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f632c>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that the input can be converted to a time. Returns a Python
        datetime.time object.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="input_formats" type="NoneType"><value></value>
</argument>
</function>
<class name="IPAddressField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f6a2c>}]]></value>
</attribute>
<attribute name="default_validators" type="list"><value><![CDATA[[<django.core.validators.RegexValidator object at 0x90b43ec>]]]></value>
</attribute>
<class name="IntegerField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'max_value': <django.utils.functional.__proxy__ object at 0x90f4f0c>, 'min_value': <django.utils.functional.__proxy__ object at 0x90f604c>, 'invalid': <django.utils.functional.__proxy__ object at 0x90f4dac>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that int() can be called on the input. Returns the result
        of int(). Returns None for empty values.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="max_value" type="NoneType"><value></value>
</argument>
<argument name="min_value" type="NoneType"><value></value>
</argument>
</function>
<class name="NullBooleanField"></class>
<doc><![CDATA[
    A field whose valid values are None, True and False. Invalid values are
    cleaned to None.
    ]]></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="to_python"><doc><![CDATA[
        Explicitly checks for the string 'True' and 'False', which is what a
        hidden field will submit for True and False, and for '1' and '0', which
        is what a RadioField will submit. Unlike the Booleanfield we need to
        explicitly check for True, because we are not using the bool() function
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="CharField"></class>
<doc></doc>
<function name="widget_attrs"><doc></doc>
<argument name="self"></argument>
<argument name="widget"></argument>
</function>
<function name="to_python"><doc><![CDATA[Returns a Unicode object.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="max_length" type="NoneType"><value></value>
</argument>
<argument name="min_length" type="NoneType"><value></value>
</argument>
</function>
<class name="URLField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_link': <django.utils.functional.__proxy__ object at 0x90f66cc>, 'invalid': <django.utils.functional.__proxy__ object at 0x90f668c>}]]></value>
</attribute>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="max_length" type="NoneType"><value></value>
</argument>
<argument name="min_length" type="NoneType"><value></value>
</argument>
<argument name="verify_exists" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="validator_user_agent" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</argument>
</function>
<class name="SplitDateTimeField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<import_class name="hidden_widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_time': <django.utils.functional.__proxy__ object at 0x90f69cc>, 'invalid_date': <django.utils.functional.__proxy__ object at 0x90f698c>}]]></value>
</attribute>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="input_date_formats" type="NoneType"><value></value>
</argument>
<argument name="input_time_formats" type="NoneType"><value></value>
</argument>
</function>
<function name="compress"><doc></doc>
<argument name="self"></argument>
<argument name="data_list"></argument>
</function>
<class name="DecimalField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'max_value': <django.utils.functional.__proxy__ object at 0x90f614c>, 'min_value': <django.utils.functional.__proxy__ object at 0x90f618c>, 'invalid': <django.utils.functional.__proxy__ object at 0x90f610c>, 'max_digits': <django.utils.functional.__proxy__ object at 0x90f61cc>, 'max_decimal_places': <django.utils.functional.__proxy__ object at 0x90f620c>, 'max_whole_digits': <django.utils.functional.__proxy__ object at 0x90f624c>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that the input is a decimal number. Returns a Decimal
        instance. Returns None for empty values. Ensures that there are no more
        than max_digits in the number, and no more than decimal_places digits
        after the decimal point.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="max_value" type="NoneType"><value></value>
</argument>
<argument name="min_value" type="NoneType"><value></value>
</argument>
<argument name="max_digits" type="NoneType"><value></value>
</argument>
<argument name="decimal_places" type="NoneType"><value></value>
</argument>
</function>
<class name="MultiValueField"></class>
<doc><![CDATA[
    A Field that aggregates the logic of multiple Fields.

    Its clean() method takes a "decompressed" list of values, which are then
    cleaned into a single value according to self.fields. Each value in
    this list is cleaned by the corresponding field -- the first value is
    cleaned by the first field, the second value is cleaned by the second
    field, etc. Once all fields are cleaned, the list of clean values is
    "compressed" into a single value.

    Subclasses should not have to implement clean(). Instead, they must
    implement compress(), which takes a list of valid values and returns a
    "compressed" version of those values -- a single value.

    You'll probably want to use this with MultiWidget.
    ]]></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f68ec>}]]></value>
</attribute>
<function name="clean"><doc><![CDATA[
        Validates every value in the given list. A value is validated against
        the corresponding Field in self.fields.

        For example, if this MultiValueField was instantiated with
        fields=(DateField(), TimeField()), clean() would call
        DateField.clean(value[0]) and TimeField.clean(value[1]).
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="compress"><doc><![CDATA[
        Returns a single value for the given list of values. The values can be
        assumed to be valid.

        For example, if this MultiValueField was instantiated with
        fields=(DateField(), TimeField()), this might return a datetime
        object created by combining the date and time in data_list.
        ]]></doc>
<argument name="self"></argument>
<argument name="data_list"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="fields" type="tuple"><value></value>
</argument>
</function>
<class name="DateTimeField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x90f63ac>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Validates that the input can be converted to a datetime. Returns a
        Python datetime.datetime object.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="input_formats" type="NoneType"><value></value>
</argument>
</function>
<class name="ChoiceField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<attribute name="choices" type="property"><value><![CDATA[<property object at 0x90f05a4>]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_choice': <django.utils.functional.__proxy__ object at 0x90f676c>}]]></value>
</attribute>
<function name="_get_choices"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc><![CDATA[Returns a Unicode object.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_set_choices"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="validate"><doc><![CDATA[
        Validates that the input is in self.choices.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="valid_value"><doc><![CDATA[Check to see if the provided value is a valid choice]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="choices" type="tuple"><value></value>
</argument>
<argument name="required" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="label" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="NoneType"><value></value>
</argument>
</function>
<class name="FileField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'contradiction': <django.utils.functional.__proxy__ object at 0x90f65ac>, 'max_length': <django.utils.functional.__proxy__ object at 0x90f656c>, 'empty': <django.utils.functional.__proxy__ object at 0x90f652c>, 'invalid': <django.utils.functional.__proxy__ object at 0x90f64ac>, 'missing': <django.utils.functional.__proxy__ object at 0x90f64ec>}]]></value>
</attribute>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="bound_data"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="initial"></argument>
</function>
<class name="RegexField"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc><![CDATA[
        regex can be either a string or a compiled regular expression object.
        error_message is an optional error message to use, if
        'Enter a valid value' is too generic for you.
        ]]></doc>
<argument name="self"></argument>
<argument name="regex"></argument>
<argument name="max_length" type="NoneType"><value></value>
</argument>
<argument name="min_length" type="NoneType"><value></value>
</argument>
<argument name="error_message" type="NoneType"><value></value>
</argument>
</function>
<class name="BooleanField"></class>
<doc></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<function name="to_python"><doc><![CDATA[Returns a Python boolean object.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="TypedMultipleChoiceField"></class>
<doc></doc>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc><![CDATA[
        Validates that the values are in self.choices and can be coerced to the
        right type.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="ComboField"></class>
<doc><![CDATA[
    A Field whose clean() method calls multiple Field clean() methods.
    ]]></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="fields" type="tuple"><value></value>
</argument>
</function>
<function name="clean"><doc><![CDATA[
        Validates the given value against all of self.fields, which is a
        list of Field instances.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="FilePathField"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="match" type="NoneType"><value></value>
</argument>
<argument name="recursive" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="required" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="label" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="NoneType"><value></value>
</argument>
</function>
<class name="ImageField"></class>
<doc></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_image': <django.utils.functional.__proxy__ object at 0x90f662c>}]]></value>
</attribute>
<function name="to_python"><doc><![CDATA[
        Checks that the file-upload field data contains a valid image (GIF, JPG,
        PNG, possibly others -- whatever the Python Imaging Library supports).
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
</package>
<package name="django.core.validators" file="/django/core/validators.pyc"><doc></doc>
<depends name="platform"></depends>
<depends name="re"></depends>
<depends name="urllib2"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<attribute name="slug_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x90f3df0>]]></value>
</attribute>
<attribute name="validate_slug" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x90edfac>]]></value>
</attribute>
<attribute name="validate_ipv4_address" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x90b43ec>]]></value>
</attribute>
<attribute name="platform" type="module"><value><![CDATA[<module 'platform' from '/usr/lib/python2.7/platform.pyc'>]]></value>
</attribute>
<attribute name="email_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x912fa78>]]></value>
</attribute>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="URL_VALIDATOR_USER_AGENT" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</attribute>
<attribute name="urllib2" type="module"><value><![CDATA[<module 'urllib2' from '/usr/lib/python2.7/urllib2.pyc'>]]></value>
</attribute>
<attribute name="validate_email" type="EmailValidator"><value><![CDATA[<django.core.validators.EmailValidator object at 0x90edb2c>]]></value>
</attribute>
<attribute name="ipv4_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9130370>]]></value>
</attribute>
<attribute name="validate_comma_separated_integer_list" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x90b48ec>]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<attribute name="comma_separated_int_list_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x90f3e78>]]></value>
</attribute>
<function name="validate_integer"><doc></doc>
<argument name="value"></argument>
</function>
<class name="MaxLengthValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="code" type="str"><value><![CDATA[max_length]]></value>
</attribute>
<function name="compare"><doc></doc>
<argument name="self"></argument>
<argument name="a"></argument>
<argument name="b"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="x"></argument>
</function>
<class name="RegexValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="regex" type="str"><value></value>
</attribute>
<attribute name="code" type="str"><value><![CDATA[invalid]]></value>
</attribute>
<function name="__call__"><doc><![CDATA[
        Validates that the input matches the regular expression.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="regex" type="NoneType"><value></value>
</argument>
<argument name="message" type="NoneType"><value></value>
</argument>
<argument name="code" type="NoneType"><value></value>
</argument>
</function>
<class name="URLValidator"></class>
<doc></doc>
<attribute name="regex" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x912ef48>]]></value>
</attribute>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="verify_exists" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="validator_user_agent" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</argument>
</function>
<class name="EmailValidator"></class>
<doc></doc>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="MaxValueValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="code" type="str"><value><![CDATA[max_value]]></value>
</attribute>
<function name="compare"><doc></doc>
<argument name="self"></argument>
<argument name="a"></argument>
<argument name="b"></argument>
</function>
<class name="BaseValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="code" type="str"><value><![CDATA[limit_value]]></value>
</attribute>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="x"></argument>
</function>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="compare"><doc></doc>
<argument name="self"></argument>
<argument name="a"></argument>
<argument name="b"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="limit_value"></argument>
</function>
<class name="MinLengthValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="code" type="str"><value><![CDATA[min_length]]></value>
</attribute>
<function name="compare"><doc></doc>
<argument name="self"></argument>
<argument name="a"></argument>
<argument name="b"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="x"></argument>
</function>
<class name="MinValueValidator"></class>
<doc></doc>
<import_attribute name="message" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="code" type="str"><value><![CDATA[min_value]]></value>
</attribute>
<function name="compare"><doc></doc>
<argument name="self"></argument>
<argument name="a"></argument>
<argument name="b"></argument>
</function>
</package>
<package name="django.forms.util" file="/django/forms/util.pyc"><doc></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<function name="flatatt"><doc><![CDATA[
    Convert a dictionary of attributes to a single string.
    The returned string will contain a leading space followed by key="value",
    XML-style pairs.  It is assumed that the keys do not need to be XML-escaped.
    If the passed dictionary is empty, then return an empty string.
    ]]></doc>
<argument name="attrs"></argument>
</function>
<class name="ErrorDict"></class>
<doc><![CDATA[
    A collection of errors that knows how to display itself in various formats.

    The dictionary keys are the field names, and the values are the errors.
    ]]></doc>
<function name="as_ul"><doc></doc>
<argument name="self"></argument>
</function>
<function name="as_text"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="ErrorList"></class>
<doc><![CDATA[
    A collection of errors that knows how to display itself in various formats.
    ]]></doc>
<function name="as_ul"><doc></doc>
<argument name="self"></argument>
</function>
<function name="as_text"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.forms.widgets" file="/django/forms/widgets.pyc"><doc><![CDATA[
HTML Widget classes
]]></doc>
<depends name="datetime"></depends>
<depends name="time"></depends>
<depends name="itertools"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="urljoin" module="urlparse"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="chain" module="itertools"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="MergeDict" module="django.utils.datastructures"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput', 'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect', 'CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget')]]></value>
</attribute>
<attribute name="FILE_INPUT_CONTRADICTION" type="object"><value><![CDATA[<object object at 0xb73b5598>]]></value>
</attribute>
<attribute name="formats" type="module"><value><![CDATA[<module 'django.utils.formats' from '/usr/local/lib/python2.7/dist-packages/django/utils/formats.pyc'>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="MEDIA_TYPES" type="tuple"><value><![CDATA[('css', 'js')]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="media_property"><doc></doc>
<argument name="cls"></argument>
</function>
<class name="Media"></class>
<doc></doc>
<function name="render_css"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[Returns a Media object that only contains media of the given type]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="add_css"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="absolute_path"><doc></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__add__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="render_js"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="media" type="NoneType"><value></value>
</argument>
</function>
<function name="add_js"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<class name="HiddenInput"></class>
<doc></doc>
<attribute name="input_type" type="str"><value><![CDATA[hidden]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083af4>]]></value>
</attribute>
<attribute name="is_hidden" type="bool"><value><![CDATA[True]]></value>
</attribute>
<class name="Input"></class>
<doc><![CDATA[
    Base class for all <input> widgets (except type='checkbox' and
    type='radio', which are special).
    ]]></doc>
<attribute name="input_type" type="NoneType"><value></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x90839b4>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_format_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="MultiWidget"></class>
<doc><![CDATA[
    A widget that is composed of multiple widgets.

    Its render() method is different than other widgets', because it has to
    figure out how to split a single value for display in multiple widgets.
    The ``value`` argument can be one of two things:

        * A list.
        * A normal value (e.g., a string) that has been "compressed" from
          a list of values.

    In the second case -- i.e., if the value is NOT a list -- render() will
    first "decompress" the value into a list before rendering it. It does so by
    calling the decompress() method, which MultiWidget subclasses must
    implement. This method takes a single "compressed" value and returns a
    list.

    When render() does its HTML rendering, each value in the list is rendered
    with the corresponding widget -- the first value is rendered in the first
    widget, the second value is rendered in the second widget, etc.

    Subclasses may implement format_output(), which takes the list of rendered
    widgets and returns a string of HTML that formats them any way you'd like.

    You'll probably want to use this class with MultiValueField.
    ]]></doc>
<attribute name="id_for_label" type="instancemethod"><value><![CDATA[<bound method MediaDefiningClass.id_for_label of <class 'django.forms.widgets.MultiWidget'>>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9095194>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_media"><doc><![CDATA[Media for a multiwidget is the combination of all media of the subwidgets]]></doc>
<argument name="self"></argument>
</function>
<function name="format_output"><doc><![CDATA[
        Given a list of rendered widgets (as strings), returns a Unicode string
        representing the HTML for the whole lot.

        This hook allows you to format the HTML design of the widgets, if
        needed.
        ]]></doc>
<argument name="self"></argument>
<argument name="rendered_widgets"></argument>
</function>
<function name="decompress"><doc><![CDATA[
        Returns a list of decompressed values for the given compressed value.
        The given value can be assumed to be valid, but not necessarily
        non-empty.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="widgets"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="Widget"></class>
<doc></doc>
<attribute name="needs_multipart_form" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="id_for_label" type="instancemethod"><value><![CDATA[<bound method MediaDefiningClass.id_for_label of <class 'django.forms.widgets.Widget'>>]]></value>
</attribute>
<attribute name="is_localized" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x908393c>]]></value>
</attribute>
<attribute name="is_hidden" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="is_required" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="render"><doc><![CDATA[
        Returns this Widget rendered as HTML, as a Unicode string.

        The 'value' given is not guaranteed to be valid input, so subclass
        implementations should program defensively.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="build_attrs" kwargs="kwargs"><doc><![CDATA[Helper function for building an attribute dictionary.]]></doc>
<argument name="self"></argument>
<argument name="extra_attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_has_changed"><doc><![CDATA[
        Return True if data differs from initial.
        ]]></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="value_from_datadict"><doc><![CDATA[
        Given a dictionary of data and this widget's name, returns the value
        of this widget. Returns None if it's not provided.
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="__metaclass__"></class>
<doc><![CDATA[Metaclass for classes that can have media definitions]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9093064>]]></value>
</attribute>
<class name="MultipleHiddenInput"></class>
<doc><![CDATA[
    A widget that handles <input type="hidden"> for fields that have a list
    of values.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083b44>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<class name="MediaDefiningClass"></class>
<doc><![CDATA[Metaclass for classes that can have media definitions]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9093064>]]></value>
</attribute>
<class name="CheckboxInput"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083e64>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="check_test" type="type"><value><![CDATA[<type 'bool'>]]></value>
</argument>
</function>
<class name="RadioSelect"></class>
<doc></doc>
<attribute name="id_for_label" type="instancemethod"><value><![CDATA[<bound method MediaDefiningClass.id_for_label of <class 'django.forms.widgets.RadioSelect'>>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x909511c>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="get_renderer"><doc><![CDATA[Returns an instance of the renderer.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="renderer"></class>
<doc><![CDATA[
    An object used by RadioSelect to enable customization of radio widgets.
    ]]></doc>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="idx"></argument>
</function>
<function name="render"><doc><![CDATA[Outputs a <ul> for this set of radio fields.]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs"></argument>
<argument name="choices"></argument>
</function>
<class name="TimeInput"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083dec>]]></value>
</attribute>
<attribute name="format" type="str"><value><![CDATA[%H:%M:%S]]></value>
</attribute>
<attribute name="input_type" type="str"><value><![CDATA[text]]></value>
</attribute>
<function name="_format_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="format" type="NoneType"><value></value>
</argument>
</function>
<class name="TextInput"></class>
<doc></doc>
<attribute name="input_type" type="str"><value><![CDATA[text]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083a04>]]></value>
</attribute>
<class name="RadioInput"></class>
<doc><![CDATA[
    An object used by RadioFieldRenderer that represents a single
    <input type='radio'>.
    ]]></doc>
<function name="tag"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_checked"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs"></argument>
<argument name="choice"></argument>
<argument name="index"></argument>
</function>
<class name="Textarea"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083c84>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="SplitHiddenDateTimeWidget"></class>
<doc><![CDATA[
    A Widget that splits datetime input into two <input type="hidden"> inputs.
    ]]></doc>
<attribute name="is_hidden" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x90952fc>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="date_format" type="NoneType"><value></value>
</argument>
<argument name="time_format" type="NoneType"><value></value>
</argument>
</function>
<class name="RadioFieldRenderer"></class>
<doc><![CDATA[
    An object used by RadioSelect to enable customization of radio widgets.
    ]]></doc>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="idx"></argument>
</function>
<function name="render"><doc><![CDATA[Outputs a <ul> for this set of radio fields.]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs"></argument>
<argument name="choices"></argument>
</function>
<class name="ClearableFileInput"></class>
<doc></doc>
<import_attribute name="initial_text" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_attribute name="clear_checkbox_label" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_attribute name="input_text" type="__proxy__" module="django.utils.functional"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083c0c>]]></value>
</attribute>
<attribute name="template_with_initial" type="unicode"><value><![CDATA[%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s]]></value>
</attribute>
<attribute name="template_with_clear" type="unicode"><value><![CDATA[%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>]]></value>
</attribute>
<function name="clear_checkbox_name"><doc><![CDATA[
        Given the name of the file input, return the name of the clear checkbox
        input.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="clear_checkbox_id"><doc><![CDATA[
        Given the name of the clear checkbox input, return the HTML id for it.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<class name="FileInput"></class>
<doc></doc>
<attribute name="needs_multipart_form" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083bbc>]]></value>
</attribute>
<attribute name="input_type" type="str"><value><![CDATA[file]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="value_from_datadict"><doc><![CDATA[File widgets take data from FILES, not POST]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<class name="PasswordInput"></class>
<doc></doc>
<attribute name="input_type" type="str"><value><![CDATA[password]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083a7c>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="render_value" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="SplitDateTimeWidget"></class>
<doc><![CDATA[
    A Widget that splits datetime input into two <input type="text"> boxes.
    ]]></doc>
<attribute name="time_format" type="str"><value><![CDATA[%H:%M:%S]]></value>
</attribute>
<attribute name="date_format" type="str"><value><![CDATA[%Y-%m-%d]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9095284>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="date_format" type="NoneType"><value></value>
</argument>
<argument name="time_format" type="NoneType"><value></value>
</argument>
</function>
<function name="decompress"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="CheckboxSelectMultiple"></class>
<doc></doc>
<attribute name="id_for_label" type="instancemethod"><value><![CDATA[<bound method MediaDefiningClass.id_for_label of <class 'django.forms.widgets.CheckboxSelectMultiple'>>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x909516c>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<class name="SelectMultiple"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083fcc>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<class name="NullBooleanSelect"></class>
<doc><![CDATA[
    A Select Widget intended to be used with NullBooleanField.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083f54>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="DateInput"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083cfc>]]></value>
</attribute>
<attribute name="format" type="str"><value><![CDATA[%Y-%m-%d]]></value>
</attribute>
<attribute name="input_type" type="str"><value><![CDATA[text]]></value>
</attribute>
<function name="_format_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="format" type="NoneType"><value></value>
</argument>
</function>
<class name="DateTimeInput"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083d74>]]></value>
</attribute>
<attribute name="format" type="str"><value><![CDATA[%Y-%m-%d %H:%M:%S]]></value>
</attribute>
<attribute name="input_type" type="str"><value><![CDATA[text]]></value>
</attribute>
<function name="_format_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="format" type="NoneType"><value></value>
</argument>
</function>
<class name="Select"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9083edc>]]></value>
</attribute>
<function name="render_options"><doc></doc>
<argument name="self"></argument>
<argument name="choices"></argument>
<argument name="selected_choices"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="render_option"><doc></doc>
<argument name="self"></argument>
<argument name="selected_choices"></argument>
<argument name="option_value"></argument>
<argument name="option_label"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
</package>
<package name="django.forms.models" file="/django/forms/models.pyc"><doc><![CDATA[
Helper functions for creating Form classes from Django models
and database field objects.
]]></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="media_property" module="django.forms.widgets"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="get_declared_fields" module="django.forms.forms"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="formset_factory" module="django.forms.formsets"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="BaseForm" module="django.forms.forms"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="BaseFormSet" module="django.forms.formsets"></import_class>
<import_class name="ChoiceField" module="django.forms.fields"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance', 'ModelChoiceField', 'ModelMultipleChoiceField')]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<function name="construct_instance"><doc><![CDATA[
    Constructs and returns a model instance from the bound ``form``'s
    ``cleaned_data``, but does not save the returned instance to the
    database.
    ]]></doc>
<argument name="form"></argument>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_foreign_key"><doc><![CDATA[
    Finds and returns the ForeignKey from model to parent if there is one
    (returns None if can_fail is True and no such field exists). If fk_name is
    provided, assume it is the name of the ForeignKey field. Unles can_fail is
    True, an exception is raised if there is no ForeignKey from model to
    parent_model.
    ]]></doc>
<argument name="parent_model"></argument>
<argument name="model"></argument>
<argument name="fk_name" type="NoneType"><value></value>
</argument>
<argument name="can_fail" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="model_to_dict"><doc><![CDATA[
    Returns a dict containing the data in ``instance`` suitable for passing as
    a Form's ``initial`` keyword argument.

    ``fields`` is an optional list of field names. If provided, only the named
    fields will be included in the returned dict.

    ``exclude`` is an optional list of field names. If provided, the named
    fields will be excluded from the returned dict, even if they are listed in
    the ``fields`` argument.
    ]]></doc>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="modelform_factory"><doc></doc>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="fields_for_model"><doc><![CDATA[
    Returns a ``SortedDict`` containing form fields for the given model.

    ``fields`` is an optional list of field names. If provided, only the named
    fields will be included in the returned fields.

    ``exclude`` is an optional list of field names. If provided, the named
    fields will be excluded from the returned fields, even if they are listed
    in the ``fields`` argument.
    ]]></doc>
<argument name="model"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="widgets" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="inlineformset_factory"><doc><![CDATA[
    Returns an ``InlineFormSet`` for the given kwargs.

    You must provide ``fk_name`` if ``model`` has more than one ``ForeignKey``
    to ``parent_model``.
    ]]></doc>
<argument name="parent_model"></argument>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.models.BaseInlineFormSet'>]]></value>
</argument>
<argument name="fk_name" type="NoneType"><value></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[3]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="save_instance"><doc><![CDATA[
    Saves bound Form ``form``'s cleaned_data into model instance ``instance``.

    If commit=True, then the changes to ``instance`` will be saved to the
    database. Returns ``instance``.

    If construct=False, assume ``instance`` has already been constructed and
    just needs to be saved.
    ]]></doc>
<argument name="form"></argument>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="fail_message" type="str"><value><![CDATA[saved]]></value>
</argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="construct" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="modelformset_factory"><doc><![CDATA[
    Returns a FormSet class for the given Django model class.
    ]]></doc>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.models.BaseModelFormSet'>]]></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelMultipleChoiceField"></class>
<doc><![CDATA[A MultipleChoiceField whose choices are a model QuerySet.]]></doc>
<import_class name="widget" module="django.forms.widgets"></import_class>
<import_class name="hidden_widget" module="django.forms.widgets"></import_class>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_choice': <django.utils.functional.__proxy__ object at 0x9114a4c>, 'list': <django.utils.functional.__proxy__ object at 0x9114a0c>, 'invalid_pk_value': <django.utils.functional.__proxy__ object at 0x9114a8c>}]]></value>
</attribute>
<function name="prepare_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="queryset"></argument>
<argument name="cache_choices" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="required" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="label" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseModelFormSet"></class>
<doc><![CDATA[
    A ``FormSet`` for editing a queryset and/or adding new objects to it.
    ]]></doc>
<attribute name="model" type="NoneType"><value></value>
</attribute>
<function name="initial_form_count"><doc><![CDATA[Returns the number of forms that are required in this FormSet.]]></doc>
<argument name="self"></argument>
</function>
<function name="save_new"><doc><![CDATA[Saves and returns a new model instance for the given form.]]></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="save_existing_objects"><doc></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_queryset"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_existing_object"><doc></doc>
<argument name="self"></argument>
<argument name="pk"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
<argument name="files" type="NoneType"><value></value>
</argument>
<argument name="auto_id" type="str"><value><![CDATA[id_%s]]></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="queryset" type="NoneType"><value></value>
</argument>
</function>
<function name="save_existing"><doc><![CDATA[Saves and returns an existing model instance for the given form.]]></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="instance"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="save_new_objects"><doc></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_unique_error_message"><doc></doc>
<argument name="self"></argument>
<argument name="unique_check"></argument>
</function>
<function name="validate_unique"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_form_error"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add_fields"><doc><![CDATA[Add a hidden field for the object's primary key.]]></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="index"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_construct_form" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="i"></argument>
</function>
<function name="get_date_error_message"><doc></doc>
<argument name="self"></argument>
<argument name="date_check"></argument>
</function>
<function name="save"><doc><![CDATA[Saves model instances for every form, adding and changing instances
        as necessary, and returns the list of instances.
        ]]></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="ModelChoiceIterator"></class>
<doc></doc>
<function name="choice"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__len__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<class name="ModelFormMetaclass"></class>
<doc></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9115d4c>]]></value>
</attribute>
<class name="ModelFormOptions"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="options" type="NoneType"><value></value>
</argument>
</function>
<class name="InlineForeignKeyHiddenInput"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x911916c>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<class name="BaseInlineFormSet"></class>
<doc><![CDATA[A formset for child objects related to a parent.]]></doc>
<attribute name="get_default_prefix" type="instancemethod"><value><![CDATA[<bound method type.get_default_prefix of <class 'django.forms.models.BaseInlineFormSet'>>]]></value>
</attribute>
<function name="initial_form_count"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_unique_error_message"><doc></doc>
<argument name="self"></argument>
<argument name="unique_check"></argument>
</function>
<function name="save_new"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="add_fields"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="index"></argument>
</function>
<function name="_construct_form" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="i"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
<argument name="files" type="NoneType"><value></value>
</argument>
<argument name="instance" type="NoneType"><value></value>
</argument>
<argument name="save_as_new" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="queryset" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseModelForm"></class>
<doc></doc>
<function name="_update_errors"><doc></doc>
<argument name="self"></argument>
<argument name="message_dict"></argument>
</function>
<function name="validate_unique"><doc><![CDATA[
        Calls the instance's validate_unique() method and updates the form's
        validation errors if any were raised.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_validation_exclusions"><doc><![CDATA[
        For backwards-compatibility, several types of fields need to be
        excluded from model validation. See the following tickets for
        details: #12507, #12521, #12553
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_post_clean"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc><![CDATA[
        Saves this ``form``'s cleaned_data into model instance
        ``self.instance``.

        If commit=True, then the changes to ``instance`` will be saved to the
        database. Returns ``instance``.
        ]]></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
<argument name="files" type="NoneType"><value></value>
</argument>
<argument name="auto_id" type="str"><value><![CDATA[id_%s]]></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="error_class" type="type"><value><![CDATA[<class 'django.forms.util.ErrorList'>]]></value>
</argument>
<argument name="label_suffix" type="str"><value><![CDATA[:]]></value>
</argument>
<argument name="empty_permitted" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="instance" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelChoiceField"></class>
<doc><![CDATA[A ChoiceField whose choices are a model QuerySet.]]></doc>
<attribute name="queryset" type="property"><value><![CDATA[<property object at 0x91191e4>]]></value>
</attribute>
<attribute name="choices" type="property"><value><![CDATA[<property object at 0x911920c>]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_choice': <django.utils.functional.__proxy__ object at 0x91149ac>}]]></value>
</attribute>
<function name="_get_choices"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_queryset"><doc></doc>
<argument name="self"></argument>
<argument name="queryset"></argument>
</function>
<function name="_get_queryset"><doc></doc>
<argument name="self"></argument>
</function>
<function name="prepare_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="label_from_instance"><doc><![CDATA[
        This method is used to convert objects into strings; it's used to
        generate the labels for the choices presented by this object. Subclasses
        can override this method to customize the display of the choices.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="queryset"></argument>
<argument name="empty_label" type="unicode"><value><![CDATA[---------]]></value>
</argument>
<argument name="cache_choices" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="required" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="label" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="NoneType"><value></value>
</argument>
<argument name="to_field_name" type="NoneType"><value></value>
</argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="InlineForeignKeyField"></class>
<doc><![CDATA[
    A basic integer field that deals with validating the given value to a
    given parent instance in an inline.
    ]]></doc>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_choice': <django.utils.functional.__proxy__ object at 0x91148ec>}]]></value>
</attribute>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="parent_instance"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="ModelForm"></class>
<doc></doc>
<class name="__metaclass__"></class>
<doc></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9115d4c>]]></value>
</attribute>
</package>
<package name="django.forms.forms" file="/django/forms/forms.pyc"><doc><![CDATA[
Form classes
]]></doc>
<depends name="copy"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="media_property" module="django.forms.widgets"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="Textarea" module="django.forms.widgets"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="FileField" module="django.forms.fields"></import_class>
<import_class name="ErrorDict" module="django.forms.util"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('BaseForm', 'Form')]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<function name="get_declared_fields"><doc><![CDATA[
    Create a list of form field instances from the passed in 'attrs', plus any
    similar fields on the base classes (in 'bases'). This is used by both the
    Form and ModelForm metclasses.

    If 'with_base_fields' is True, all fields from the bases are used.
    Otherwise, only fields in the 'declared_fields' attribute on the bases are
    used. The distinction is useful in ModelForm subclassing.
    Also integrates any additional media definitions
    ]]></doc>
<argument name="bases"></argument>
<argument name="attrs"></argument>
<argument name="with_base_fields" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="pretty_name"><doc><![CDATA[Converts 'first_name' to 'First name']]></doc>
<argument name="name"></argument>
</function>
<class name="BoundField"></class>
<doc><![CDATA[A Field plus data]]></doc>
<attribute name="data" type="property"><value><![CDATA[<property object at 0x90fd1e4>]]></value>
</attribute>
<attribute name="is_hidden" type="property"><value><![CDATA[<property object at 0x90fd20c>]]></value>
</attribute>
<attribute name="auto_id" type="property"><value><![CDATA[<property object at 0x90fd234>]]></value>
</attribute>
<attribute name="errors" type="property"><value><![CDATA[<property object at 0x90fd1bc>]]></value>
</attribute>
<attribute name="id_for_label" type="property"><value><![CDATA[<property object at 0x90fd25c>]]></value>
</attribute>
<function name="as_text" kwargs="kwargs"><doc><![CDATA[
        Returns a string of HTML for representing this as an <input type="text">.
        ]]></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_id_for_label"><doc><![CDATA[
        Wrapper around the field widget's `id_for_label` class method.
        Useful, for example, for focusing on this field regardless of whether
        it has a single widget or a MutiWidget.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="label_tag"><doc><![CDATA[
        Wraps the given contents in a <label>, if the field has an ID attribute.
        Does not HTML-escape the contents. If contents aren't given, uses the
        field's HTML-escaped label.

        If attrs are given, they're used as HTML attributes on the <label> tag.
        ]]></doc>
<argument name="self"></argument>
<argument name="contents" type="NoneType"><value></value>
</argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_auto_id"><doc><![CDATA[
        Calculates and returns the ID attribute for this BoundField, if the
        associated Form has specified auto_id. Returns an empty string otherwise.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_widget"><doc><![CDATA[
        Renders the field by rendering the passed widget, adding any HTML
        attributes passed as attrs.  If no widget is specified, then the
        field's default widget will be used.
        ]]></doc>
<argument name="self"></argument>
<argument name="widget" type="NoneType"><value></value>
</argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="only_initial" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_data"><doc><![CDATA[
        Returns the data for this BoundField, or None if it wasn't given.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="field"></argument>
<argument name="name"></argument>
</function>
<function name="as_hidden" kwargs="kwargs"><doc><![CDATA[
        Returns a string of HTML for representing this as an <input type="hidden">.
        ]]></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="value"><doc><![CDATA[
        Returns the value for this BoundField, using the initial value if
        the form is not bound or the data otherwise.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_errors"><doc><![CDATA[
        Returns an ErrorList for this field. Returns an empty ErrorList
        if there are none.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_is_hidden"><doc><![CDATA[Returns True if this BoundField's widget is hidden.]]></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc><![CDATA[Renders this field as an HTML widget.]]></doc>
<argument name="self"></argument>
</function>
<function name="css_classes"><doc><![CDATA[
        Returns a string of space-separated CSS classes for this field.
        ]]></doc>
<argument name="self"></argument>
<argument name="extra_classes" type="NoneType"><value></value>
</argument>
</function>
<function name="as_textarea" kwargs="kwargs"><doc><![CDATA[Returns a string of HTML for representing this as a <textarea>.]]></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseForm"></class>
<doc></doc>
<attribute name="errors" type="property"><value><![CDATA[<property object at 0x90fd02c>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x90fd07c>]]></value>
</attribute>
<attribute name="changed_data" type="property"><value><![CDATA[<property object at 0x90fd054>]]></value>
</attribute>
<function name="add_initial_prefix"><doc><![CDATA[
        Add a 'initial' prefix for checking dynamic initial values
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
</function>
<function name="_get_media"><doc><![CDATA[
        Provide a description of all media required to render the widgets on this form
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_ul"><doc><![CDATA[Returns this form rendered as HTML <li>s -- excluding the <ul></ul>.]]></doc>
<argument name="self"></argument>
</function>
<function name="non_field_errors"><doc><![CDATA[
        Returns an ErrorList of errors that aren't associated with a particular
        field -- i.e., from Form.clean(). Returns an empty ErrorList if there
        are none.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_errors"><doc><![CDATA[Returns an ErrorDict for the data provided for the form]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="full_clean"><doc><![CDATA[
        Cleans all of self.data and populates self._errors and
        self.cleaned_data.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_post_clean"><doc><![CDATA[
        An internal hook for performing additional cleaning after form cleaning
        is complete. Used for model validation in model forms.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_clean_fields"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="data" type="NoneType"><value></value>
</argument>
<argument name="files" type="NoneType"><value></value>
</argument>
<argument name="auto_id" type="str"><value><![CDATA[id_%s]]></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="initial" type="NoneType"><value></value>
</argument>
<argument name="error_class" type="type"><value><![CDATA[<class 'django.forms.util.ErrorList'>]]></value>
</argument>
<argument name="label_suffix" type="str"><value><![CDATA[:]]></value>
</argument>
<argument name="empty_permitted" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="as_table"><doc><![CDATA[Returns this form rendered as HTML <tr>s -- excluding the <table></table>.]]></doc>
<argument name="self"></argument>
</function>
<function name="_html_output"><doc><![CDATA[Helper function for outputting HTML. Used by as_table(), as_ul(), as_p().]]></doc>
<argument name="self"></argument>
<argument name="normal_row"></argument>
<argument name="error_row"></argument>
<argument name="row_ender"></argument>
<argument name="help_text_html"></argument>
<argument name="errors_on_separate_row"></argument>
</function>
<function name="has_changed"><doc><![CDATA[
        Returns True if data differs from initial.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[Returns a BoundField with the given name.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="_clean_form"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add_prefix"><doc><![CDATA[
        Returns the field name with a prefix appended, if this Form has a
        prefix set.

        Subclasses may wish to override.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
</function>
<function name="is_multipart"><doc><![CDATA[
        Returns True if the form needs to be multipart-encrypted, i.e. it has
        FileInput. Otherwise, False.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_raw_value"><doc><![CDATA[
        Returns the raw_value for a particular field name. This is just a
        convenient wrapper around widget.value_from_datadict.
        ]]></doc>
<argument name="self"></argument>
<argument name="fieldname"></argument>
</function>
<function name="is_valid"><doc><![CDATA[
        Returns True if the form has no errors. Otherwise, False. If errors are
        being ignored, returns False.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="visible_fields"><doc><![CDATA[
        Returns a list of BoundField objects that aren't hidden fields.
        The opposite of the hidden_fields() method.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clean"><doc><![CDATA[
        Hook for doing any extra form-wide cleaning after Field.clean() been
        called on every field. Any ValidationError raised by this method will
        not be associated with a particular field; it will have a special-case
        association with the field named '__all__'.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_p"><doc><![CDATA[Returns this form rendered as HTML <p>s.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_changed_data"><doc></doc>
<argument name="self"></argument>
</function>
<function name="hidden_fields"><doc><![CDATA[
        Returns a list of all the BoundField objects that are hidden fields.
        Useful for manual form layout in templates.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="DeclarativeFieldsMetaclass"></class>
<doc><![CDATA[
    Metaclass that converts Field attributes to a dictionary called
    'base_fields', taking into account parent class 'base_fields' as well.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x90f8994>]]></value>
</attribute>
<class name="Form"></class>
<doc><![CDATA[A collection of Fields, plus their associated data.]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x90fd194>]]></value>
</attribute>
<class name="__metaclass__"></class>
<doc><![CDATA[
    Metaclass that converts Field attributes to a dictionary called
    'base_fields', taking into account parent class 'base_fields' as well.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x90f8994>]]></value>
</attribute>
</package>
<package name="django.dispatch" file="/django/dispatch/__init__.pyc"><doc><![CDATA[Multi-consumer multi-producer dispatching mechanism

Originally based on pydispatch (BSD) http://pypi.python.org/pypi/PyDispatcher/2.0.1
See license.txt for original license.

Heavily modified for Django's purposes.
]]></doc>
<import_function name="receiver" module="django.dispatch.dispatcher"></import_function>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
<attribute name="dispatcher" type="module"><value><![CDATA[<module 'django.dispatch.dispatcher' from '/usr/local/lib/python2.7/dist-packages/django/dispatch/dispatcher.pyc'>]]></value>
</attribute>
<attribute name="saferef" type="module"><value><![CDATA[<module 'django.dispatch.saferef' from '/usr/local/lib/python2.7/dist-packages/django/dispatch/saferef.pyc'>]]></value>
</attribute>
</package>
<package name="django.db" file="/django/db/__init__.pyc"><doc></doc>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="load_backend" module="django.db.utils"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<import_class name="ConnectionRouter" module="django.db.utils"></import_class>
<import_class name="ConnectionHandler" module="django.db.utils"></import_class>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.db.utils' from '/usr/local/lib/python2.7/dist-packages/django/db/utils.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="backend" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3.base' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/base.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('backend', 'connection', 'connections', 'router', 'DatabaseError', 'IntegrityError', 'DEFAULT_DB_ALIAS')]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.core.signals' from '/usr/local/lib/python2.7/dist-packages/django/core/signals.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="backends" type="module"><value><![CDATA[<module 'django.db.backends' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/__init__.pyc'>]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="database" type="dict"><value><![CDATA[{'ENGINE': 'django.db.backends.sqlite3', 'TEST_MIRROR': None, 'NAME': '/tmp/local2.db', 'TEST_CHARSET': None, 'TIME_ZONE': 'Europe/Moscow', 'TEST_COLLATION': None, 'PORT': '', 'HOST': '', 'USER': '', 'TEST_NAME': None, 'PASSWORD': '', 'OPTIONS': {}}]]></value>
</attribute>
<attribute name="alias" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="_rollback_on_exception" kwargs="kwargs"><doc></doc>
</function>
<function name="reset_queries" kwargs="kwargs"><doc></doc>
</function>
<function name="close_connection" kwargs="kwargs"><doc></doc>
</function>
</package>
<package name="django.db.backends" file="/django/db/backends/__init__.pyc"><doc></doc>
<depends name="thread"></depends>
<depends name="decimal"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="local" module="thread"></import_class>
<import_class name="TransactionManagementError" module="django.db.transaction"></import_class>
<attribute name="creation" type="module"><value><![CDATA[<module 'django.db.backends.creation' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/creation.pyc'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.backends.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/signals.pyc'>]]></value>
</attribute>
<attribute name="sqlite3" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/__init__.pyc'>]]></value>
</attribute>
<attribute name="util" type="module"><value><![CDATA[<module 'django.db.backends.util' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/util.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="thread" type="module"><value><![CDATA[<module 'thread' (built-in)>]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<class name="BaseDatabaseFeatures"></class>
<doc></doc>
<attribute name="can_return_id_from_insert" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_long_model_names" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="update_can_self_select" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="related_fields_match_type" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_regex_backreferencing" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="requires_rollback_on_dirty_transaction" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="allows_group_by_pk" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_bitwise_or" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="requires_explicit_null_ordering_when_grouping" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="test_db_allows_multiple_connections" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_transactions" type="NoneType"><value></value>
</attribute>
<attribute name="uses_autocommit" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_forward_references" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_date_lookup_using_string" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="has_real_datatype" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="empty_fetchmany_value" type="list"><value></value>
</attribute>
<attribute name="supports_stddev" type="NoneType"><value></value>
</attribute>
<attribute name="supports_microsecond_precision" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="allow_sliced_subqueries" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="needs_datetime_string_cast" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_timezones" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="can_introspect_foreign_keys" type="NoneType"><value></value>
</attribute>
<attribute name="can_use_chunked_reads" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="_confirmed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="allows_primary_key_0" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_1000_query_parameters" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="ignores_nulls_in_unique_constraints" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="can_defer_constraint_checks" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_subqueries_in_group_by" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_unspecified_pk" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_mixed_date_datetime_comparisons" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="interprets_empty_strings_as_nulls" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="uses_savepoints" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="_supports_stddev"><doc><![CDATA[Confirm support for STDDEV and related stats functions]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<function name="_supports_transactions"><doc><![CDATA[Confirm support for transactions]]></doc>
<argument name="self"></argument>
</function>
<function name="confirm"><doc><![CDATA[Perform manual checks of any database features that might vary between installs]]></doc>
<argument name="self"></argument>
</function>
<function name="_can_introspect_foreign_keys"><doc><![CDATA[Confirm support for introspected foreign keys]]></doc>
<argument name="self"></argument>
</function>
<class name="BaseDatabaseOperations"></class>
<doc><![CDATA[
    This class encapsulates all backend-specific differences, such as the way
    a backend performs ordering or calculates the ID of a recently-inserted
    row.
    ]]></doc>
<attribute name="compiler_module" type="str"><value><![CDATA[django.db.models.sql.compiler]]></value>
</attribute>
<function name="date_extract_sql"><doc><![CDATA[
        Given a lookup_type of 'year', 'month' or 'day', returns the SQL that
        extracts a value from the given date field field_name.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="field_name"></argument>
</function>
<function name="drop_foreignkey_sql"><doc><![CDATA[
        Returns the SQL command that drops a foreign key.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="lookup_cast"><doc><![CDATA[
        Returns the string to use in a query when performing lookups
        ("contains", "like", etc). The resulting string should contain a '%s'
        placeholder for the column being searched against.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
</function>
<function name="max_name_length"><doc><![CDATA[
        Returns the maximum length of table and column names, or None if there
        is no limit.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="process_clob"><doc><![CDATA[
        Returns the value of a CLOB column, for backends that return a locator
        object that requires additional processing.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="field_cast_sql"><doc><![CDATA[
        Given a column type (e.g. 'BLOB', 'VARCHAR'), returns the SQL necessary
        to cast it before using it in a WHERE statement. Note that the
        resulting string should contain a '%s' placeholder for the column being
        searched against.
        ]]></doc>
<argument name="self"></argument>
<argument name="db_type"></argument>
</function>
<function name="deferrable_sql"><doc><![CDATA[
        Returns the SQL necessary to make a constraint "initially deferred"
        during a CREATE TABLE statement.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="sql_flush"><doc><![CDATA[
        Returns a list of SQL statements required to remove all data from
        the given database tables (without actually removing the tables
        themselves).

        The `style` argument is a Style object as returned by either
        color_style() or no_style() in django.core.management.color.
        ]]></doc>
<argument name="self"></argument>
<argument name="style"></argument>
<argument name="tables"></argument>
<argument name="sequences"></argument>
</function>
<function name="pk_default_value"><doc><![CDATA[
        Returns the value to use during an INSERT statement to specify that
        the field should use its default value.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="year_lookup_bounds_for_date_field"><doc><![CDATA[
        Returns a two-elements list with the lower and upper bound to be used
        with a BETWEEN operator to query a DateField value using a year lookup

        `value` is an int, containing the looked-up year.

        By default, it just calls `self.year_lookup_bounds`. Some backends need
        this hook because on their DB date fields can't be compared to values
        which include a time part.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="max_in_list_size"><doc><![CDATA[
        Returns the maximum number of items that can be passed in a single 'IN'
        list condition, or None if the backend does not impose a limit.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="value_to_db_decimal"><doc><![CDATA[
        Transform a decimal.Decimal value to an object compatible with what is
        expected by the backend driver for decimal (numeric) columns.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="max_digits"></argument>
<argument name="decimal_places"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="force_no_ordering"><doc><![CDATA[
        Returns a list used in the "ORDER BY" clause to force no ordering at
        all. Returning an empty list means that nothing will be included in the
        ordering.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="end_transaction_sql"><doc></doc>
<argument name="self"></argument>
<argument name="success" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="last_insert_id"><doc><![CDATA[
        Given a cursor object that has just performed an INSERT statement into
        a table that has an auto-incrementing ID, returns the newly created ID.

        This method also receives the table name and the name of the primary-key
        column.
        ]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="table_name"></argument>
<argument name="pk_name"></argument>
</function>
<function name="tablespace_sql"><doc><![CDATA[
        Returns the SQL that will be appended to tables or rows to define
        a tablespace. Returns '' if the backend doesn't use tablespaces.
        ]]></doc>
<argument name="self"></argument>
<argument name="tablespace"></argument>
<argument name="inline" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="regex_lookup"><doc><![CDATA[
        Returns the string to use in a query when performing regular expression
        lookups (using "regex" or "iregex"). The resulting string should
        contain a '%s' placeholder for the column being searched against.

        If the feature is not supported (or part of it is not supported), a
        NotImplementedError exception can be raised.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
</function>
<function name="combine_expression"><doc><![CDATA[Combine a list of subexpressions into a single expression, using
        the provided connecting operator. This is required because operators
        can vary between backends (e.g., Oracle with %% and &) and between
        subexpression types (e.g., date expressions)
        ]]></doc>
<argument name="self"></argument>
<argument name="connector"></argument>
<argument name="sub_expressions"></argument>
</function>
<function name="last_executed_query"><doc><![CDATA[
        Returns a string of the query last executed by the given cursor, with
        placeholders replaced with actual values.

        `sql` is the raw query containing placeholders, and `params` is the
        sequence of parameters. These are used by default, but this method
        exists for database backends to provide a better implementation
        according to their own quoting schemes.
        ]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="sql"></argument>
<argument name="params"></argument>
</function>
<function name="compiler"><doc><![CDATA[
        Returns the SQLCompiler class corresponding to the given name,
        in the namespace corresponding to the `compiler_module` attribute
        on this backend.
        ]]></doc>
<argument name="self"></argument>
<argument name="compiler_name"></argument>
</function>
<function name="date_trunc_sql"><doc><![CDATA[
        Given a lookup_type of 'year', 'month' or 'day', returns the SQL that
        truncates the given date field field_name to a DATE object with only
        the given specificity.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="field_name"></argument>
</function>
<function name="drop_sequence_sql"><doc><![CDATA[
        Returns any SQL necessary to drop the sequence for the given table.
        Returns None if no SQL is necessary.
        ]]></doc>
<argument name="self"></argument>
<argument name="table"></argument>
</function>
<function name="datetime_cast_sql"><doc><![CDATA[
        Returns the SQL necessary to cast a datetime value so that it will be
        retrieved as a Python datetime object instead of a string.

        This SQL should include a '%s' in place of the field's name.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="date_interval_sql"><doc><![CDATA[
        Implements the date interval functionality for expressions
        ]]></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="connector"></argument>
<argument name="timedelta"></argument>
</function>
<function name="prep_for_iexact_query"><doc><![CDATA[Prepares a value for use in a LIKE query.]]></doc>
<argument name="self"></argument>
<argument name="x"></argument>
</function>
<function name="convert_values"><doc><![CDATA[Coerce the value returned by the database backend into a consistent type that
        is compatible with the field type.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="field"></argument>
</function>
<function name="no_limit_value"><doc><![CDATA[
        Returns the value to use for the LIMIT when we are wanting "LIMIT
        infinity". Returns None if the limit clause can be omitted in this case.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="autoinc_sql"><doc><![CDATA[
        Returns any SQL needed to support auto-incrementing primary keys, or
        None if no SQL is necessary.

        This SQL is executed when a table is created.
        ]]></doc>
<argument name="self"></argument>
<argument name="table"></argument>
<argument name="column"></argument>
</function>
<function name="check_aggregate_support"><doc><![CDATA[Check that the backend supports the provided aggregate

        This is used on specific backends to rule out known aggregates
        that are known to have faulty implementations. If the named
        aggregate function has a known problem, the backend should
        raise NotImplemented.
        ]]></doc>
<argument name="self"></argument>
<argument name="aggregate_func"></argument>
</function>
<function name="savepoint_commit_sql"><doc><![CDATA[
        Returns the SQL for committing the given savepoint.
        ]]></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="value_to_db_datetime"><doc><![CDATA[
        Transform a datetime value to an object compatible with what is expected
        by the backend driver for datetime columns.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="savepoint_create_sql"><doc><![CDATA[
        Returns the SQL for starting a new savepoint. Only required if the
        "uses_savepoints" feature is True. The "sid" parameter is a string
        for the savepoint id.
        ]]></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="quote_name"><doc><![CDATA[
        Returns a quoted version of the given table, index or column name. Does
        not quote the given name if it's already been quoted.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="savepoint_rollback_sql"><doc><![CDATA[
        Returns the SQL for rolling back the given savepoint.
        ]]></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="fetch_returned_insert_id"><doc><![CDATA[
        Given a cursor object that has just performed an INSERT...RETURNING
        statement into a table that has an auto-incrementing ID, returns the
        newly created ID.
        ]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
</function>
<function name="prep_for_like_query"><doc><![CDATA[Prepares a value for use in a LIKE query.]]></doc>
<argument name="self"></argument>
<argument name="x"></argument>
</function>
<function name="value_to_db_date"><doc><![CDATA[
        Transform a date value to an object compatible with what is expected
        by the backend driver for date columns.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="fulltext_search_sql"><doc><![CDATA[
        Returns the SQL WHERE clause to use in order to perform a full-text
        search of the given field_name. Note that the resulting string should
        contain a '%s' placeholder for the value being searched against.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
</function>
<function name="random_function_sql"><doc><![CDATA[
        Returns a SQL expression that returns a random value.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="return_insert_id"><doc><![CDATA[
        For backends that support returning the last insert ID as part
        of an insert query, this method returns the SQL and params to
        append to the INSERT query. The returned fragment should
        contain a format string to hold the appropriate column.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="sequence_reset_sql"><doc><![CDATA[
        Returns a list of the SQL statements required to reset sequences for
        the given models.

        The `style` argument is a Style object as returned by either
        color_style() or no_style() in django.core.management.color.
        ]]></doc>
<argument name="self"></argument>
<argument name="style"></argument>
<argument name="model_list"></argument>
</function>
<function name="start_transaction_sql"><doc><![CDATA[
        Returns the SQL statement required to start a transaction.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="value_to_db_time"><doc><![CDATA[
        Transform a datetime value to an object compatible with what is expected
        by the backend driver for time columns.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="year_lookup_bounds"><doc><![CDATA[
        Returns a two-elements list with the lower and upper bound to be used
        with a BETWEEN operator to query a field value using a year lookup

        `value` is an int, containing the looked-up year.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="BaseDatabaseIntrospection"></class>
<doc><![CDATA[
    This class encapsulates all backend-specific introspection utilities
    ]]></doc>
<attribute name="data_types_reverse" type="dict"><value></value>
</attribute>
<function name="installed_models"><doc><![CDATA[Returns a set of all models represented by the provided list of table names.]]></doc>
<argument name="self"></argument>
<argument name="tables"></argument>
</function>
<function name="get_field_type"><doc><![CDATA[Hook for a database backend to use the cursor description to
        match a Django field type to a database column.

        For Oracle, the column data_type on its own is insufficient to
        distinguish between a FloatField and IntegerField, for example.]]></doc>
<argument name="self"></argument>
<argument name="data_type"></argument>
<argument name="description"></argument>
</function>
<function name="sequence_list"><doc><![CDATA[Returns a list of information about all DB sequences for all models in all apps.]]></doc>
<argument name="self"></argument>
</function>
<function name="table_names"><doc><![CDATA[Returns a list of names of all tables that exist in the database.]]></doc>
<argument name="self"></argument>
</function>
<function name="django_table_names"><doc><![CDATA[
        Returns a list of all table names that have associated Django models and
        are in INSTALLED_APPS.

        If only_existing is True, the resulting list will only include the tables
        that actually exist in the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="only_existing" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="table_name_converter"><doc><![CDATA[Apply a conversion to the name for the purposes of comparison.

        The default table name converter is for case sensitive comparison.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<class name="BaseDatabaseValidation"></class>
<doc><![CDATA[
    This class encapsualtes all backend-specific model validation.
    ]]></doc>
<function name="validate_field"><doc><![CDATA[By default, there is no backend-specific validation]]></doc>
<argument name="self"></argument>
<argument name="errors"></argument>
<argument name="opts"></argument>
<argument name="f"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<class name="BaseDatabaseWrapper"></class>
<doc><![CDATA[
    Represents a database connection.
    ]]></doc>
<attribute name="vendor" type="str"><value><![CDATA[unknown]]></value>
</attribute>
<attribute name="ops" type="NoneType"><value></value>
</attribute>
<function name="managed"><doc><![CDATA[
        Puts the transaction manager into a manual state: managed transactions have
        to be committed explicitly by the user. If you switch off transaction
        management and there is a pending commit/rollback, the data will be
        commited.
        ]]></doc>
<argument name="self"></argument>
<argument name="flag" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="savepoint_commit"><doc><![CDATA[
        Commits the most recent savepoint (if one exists). Does nothing if
        savepoints are not supported.
        ]]></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="set_dirty"><doc><![CDATA[
        Sets a dirty flag for the current thread and code streak. This can be used
        to decide in a managed block of code to decide whether there are open
        changes waiting for commit.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="is_dirty"><doc><![CDATA[
        Returns True if the current transaction requires a commit for changes to
        happen.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="enter_transaction_management"><doc><![CDATA[
        Enters transaction management for a running thread. It must be balanced with
        the appropriate leave_transaction_management call, since the actual state is
        managed as a stack.

        The state and dirty flag are carried over from the surrounding block or
        from the settings, if there is no surrounding block (dirty is always false
        when no current block is running).
        ]]></doc>
<argument name="self"></argument>
<argument name="managed" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="make_debug_cursor"><doc></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
</function>
<function name="_commit"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_rollback"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_savepoint_commit"><doc></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_enter_transaction_management"><doc><![CDATA[
        A hook for backend-specific changes required when entering manual
        transaction handling.
        ]]></doc>
<argument name="self"></argument>
<argument name="managed"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="settings_dict"></argument>
<argument name="alias" type="str"><value><![CDATA[default]]></value>
</argument>
</function>
<function name="leave_transaction_management"><doc><![CDATA[
        Leaves transaction management for a running thread. A dirty flag is carried
        over to the surrounding block, as a commit will commit all changes, even
        those from outside. (Commits are on connection level.)
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__ne__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="rollback"><doc><![CDATA[
        This function does the rollback itself and resets the dirty flag.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_savepoint"><doc></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="savepoint"><doc><![CDATA[
        Creates a savepoint (if supported and required by the backend) inside the
        current transaction. Returns an identifier for the savepoint that will be
        used for the subsequent rollback or commit.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="clean_savepoints"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_savepoint_rollback"><doc></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="_leave_transaction_management"><doc><![CDATA[
        A hook for backend-specific changes required when leaving manual
        transaction handling. Will usually be implemented only when
        _enter_transaction_management() is also required.
        ]]></doc>
<argument name="self"></argument>
<argument name="managed"></argument>
</function>
<function name="set_clean"><doc><![CDATA[
        Resets a dirty flag for the current thread and code streak. This can be used
        to decide in a managed block of code to decide whether a commit or rollback
        should happen.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="savepoint_rollback"><doc><![CDATA[
        Rolls back the most recent savepoint (if one exists). Does nothing if
        savepoints are not supported.
        ]]></doc>
<argument name="self"></argument>
<argument name="sid"></argument>
</function>
<function name="rollback_unless_managed"><doc><![CDATA[
        Rolls back changes if the system is not in managed transaction mode.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="commit_unless_managed"><doc><![CDATA[
        Commits changes if the system is not in managed transaction mode.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="cursor"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_managed"><doc><![CDATA[
        Checks whether the transaction manager is in manual or in auto state.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="commit"><doc><![CDATA[
        Does the commit itself and resets the dirty flag.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="BaseDatabaseClient"></class>
<doc><![CDATA[
    This class encapsulates all backend-specific methods for opening a
    client shell.
    ]]></doc>
<attribute name="executable_name" type="NoneType"><value></value>
</attribute>
<function name="runshell"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
</package>
<package name="django.db.backends.util" file="/django/db/backends/util.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="decimal"></depends>
<depends name="_hashlib"></depends>
<depends name="logging"></depends>
<depends name="time"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="time" type="builtin_function_or_method" module="time"></import_attribute>
<import_function name="getLogger" module="logging"></import_function>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<function name="rev_typecast_boolean"><doc></doc>
<argument name="obj"></argument>
<argument name="d"></argument>
</function>
<function name="rev_typecast_decimal"><doc></doc>
<argument name="d"></argument>
</function>
<function name="format_number"><doc><![CDATA[
    Formats a number into a string with the requisite number of digits and
    decimal places.
    ]]></doc>
<argument name="value"></argument>
<argument name="max_digits"></argument>
<argument name="decimal_places"></argument>
</function>
<function name="typecast_timestamp"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_boolean"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_time"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_decimal"><doc></doc>
<argument name="s"></argument>
</function>
<function name="truncate_name"><doc><![CDATA[Shortens a string to a repeatable mangled version with the given length.
    ]]></doc>
<argument name="name"></argument>
<argument name="length" type="NoneType"><value></value>
</argument>
<argument name="hash_len" type="int"><value><![CDATA[4]]></value>
</argument>
</function>
<function name="typecast_date"><doc></doc>
<argument name="s"></argument>
</function>
<class name="CursorWrapper"></class>
<doc></doc>
<function name="__getattr__"><doc></doc>
<argument name="self"></argument>
<argument name="attr"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="db"></argument>
</function>
<class name="CursorDebugWrapper"></class>
<doc></doc>
<function name="executemany"><doc></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="param_list"></argument>
</function>
<function name="execute"><doc></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="params" type="tuple"><value></value>
</argument>
</function>
</package>
<package name="django.db.backends.sqlite3" file="/django/db/backends/sqlite3/__init__.pyc"><doc></doc>
<attribute name="creation" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3.creation' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/creation.pyc'>]]></value>
</attribute>
<attribute name="introspection" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3.introspection' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/introspection.pyc'>]]></value>
</attribute>
<attribute name="client" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3.client' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/client.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3.base' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/base.pyc'>]]></value>
</attribute>
</package>
<package name="django.db.backends.sqlite3.client" file="/django/db/backends/sqlite3/client.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_class name="BaseDatabaseClient" module="django.db.backends"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="DatabaseClient"></class>
<doc></doc>
<attribute name="executable_name" type="str"><value><![CDATA[sqlite3]]></value>
</attribute>
<function name="runshell"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.db.backends.sqlite3.introspection" file="/django/db/backends/sqlite3/introspection.pyc"><doc></doc>
<depends name="re"></depends>
<import_class name="BaseDatabaseIntrospection" module="django.db.backends"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<class name="DatabaseIntrospection"></class>
<doc></doc>
<attribute name="data_types_reverse" type="FlexibleFieldLookupDict"><value><![CDATA[<django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict object at 0x8ff206c>]]></value>
</attribute>
<function name="get_relations"><doc><![CDATA[
        Returns a dictionary of {field_index: (field_index_other_table, other_table)}
        representing all relationships to the given table. Indexes are 0-based.
        ]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="table_name"></argument>
</function>
<function name="get_indexes"><doc><![CDATA[
        Returns a dictionary of fieldname -> infodict for the given table,
        where each infodict is in the format:
            {'primary_key': boolean representing whether it's the primary key,
             'unique': boolean representing whether it's a unique index}
        ]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="table_name"></argument>
</function>
<function name="_table_info"><doc></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="name"></argument>
</function>
<function name="get_table_list"><doc><![CDATA[Returns a list of table names in the current database.]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
</function>
<function name="get_table_description"><doc><![CDATA[Returns a description of the table, with the DB-API cursor.description interface.]]></doc>
<argument name="self"></argument>
<argument name="cursor"></argument>
<argument name="table_name"></argument>
</function>
<class name="FlexibleFieldLookupDict"></class>
<doc></doc>
<attribute name="base_data_types_reverse" type="dict"><value><![CDATA[{'smallint': 'SmallIntegerField', 'smallinteger': 'SmallIntegerField', 'int': 'IntegerField', 'text': 'TextField', 'decimal': 'DecimalField', 'bigint': 'BigIntegerField', 'integer unsigned': 'PositiveIntegerField', 'char': 'CharField', 'date': 'DateField', 'boolean': 'BooleanField', 'bool': 'BooleanField', 'time': 'TimeField', 'real': 'FloatField', 'integer': 'IntegerField', 'datetime': 'DateTimeField', 'smallint unsigned': 'PositiveSmallIntegerField'}]]></value>
</attribute>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
</package>
<package name="django.db.backends.sqlite3.creation" file="/django/db/backends/sqlite3/creation.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_class name="BaseDatabaseCreation" module="django.db.backends.creation"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="DatabaseCreation"></class>
<doc></doc>
<attribute name="data_types" type="dict"><value><![CDATA[{'DateField': 'date', 'FloatField': 'real', 'BigIntegerField': 'bigint', 'IPAddressField': 'char(15)', 'IntegerField': 'integer', 'PositiveIntegerField': 'integer unsigned', 'SmallIntegerField': 'smallint', 'SlugField': 'varchar(%(max_length)s)', 'DateTimeField': 'datetime', 'TimeField': 'time', 'NullBooleanField': 'bool', 'OneToOneField': 'integer', 'PositiveSmallIntegerField': 'smallint unsigned', 'FilePathField': 'varchar(%(max_length)s)', 'CharField': 'varchar(%(max_length)s)', 'AutoField': 'integer', 'FileField': 'varchar(%(max_length)s)', 'BooleanField': 'bool', 'TextField': 'text', 'CommaSeparatedIntegerField': 'varchar(%(max_length)s)', 'DecimalField': 'decimal'}]]></value>
</attribute>
<function name="_create_test_db"><doc></doc>
<argument name="self"></argument>
<argument name="verbosity"></argument>
<argument name="autoclobber"></argument>
</function>
<function name="_destroy_test_db"><doc></doc>
<argument name="self"></argument>
<argument name="test_database_name"></argument>
<argument name="verbosity"></argument>
</function>
<function name="_get_test_db_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="sql_for_pending_references"><doc><![CDATA[SQLite3 doesn't support constraints]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="style"></argument>
<argument name="pending_references"></argument>
</function>
<function name="sql_remove_table_constraints"><doc><![CDATA[SQLite3 doesn't support constraints]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="references_to_delete"></argument>
<argument name="style"></argument>
</function>
</package>
<package name="django.db.backends.signals" file="/django/db/backends/signals.pyc"><doc></doc>
<import_attribute name="connection_created" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.db.backends.creation" file="/django/db/backends/creation.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="time"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<attribute name="TEST_DATABASE_PREFIX" type="str"><value><![CDATA[test_]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<class name="BaseDatabaseCreation"></class>
<doc><![CDATA[
    This class encapsulates all backend-specific differences that pertain to
    database *creation*, such as the column types to use for particular Django
    Fields, the SQL used to create and destroy tables, and the creation and
    destruction of test databases.
    ]]></doc>
<attribute name="data_types" type="dict"><value></value>
</attribute>
<function name="destroy_test_db"><doc><![CDATA[
        Destroy a test database, prompting the user for confirmation if the
        database already exists. Returns the name of the test database created.
        ]]></doc>
<argument name="self"></argument>
<argument name="old_database_name"></argument>
<argument name="verbosity" type="int"><value><![CDATA[1]]></value>
</argument>
</function>
<function name="sql_for_inline_many_to_many_references"><doc><![CDATA[Create the references to other tables required by a many-to-many table]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="field"></argument>
<argument name="style"></argument>
</function>
<function name="_get_test_db_name"><doc><![CDATA[
        Internal implementation - returns the name of the test DB that will be
        created. Only useful when called from create_test_db() and
        _create_test_db() and when no external munging is done with the 'NAME'
        or 'TEST_NAME' settings.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="sql_indexes_for_field"><doc><![CDATA[Return the CREATE INDEX SQL statements for a single model field]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="f"></argument>
<argument name="style"></argument>
</function>
<function name="sql_for_pending_references"><doc><![CDATA[Returns any ALTER TABLE statements to add constraints after the fact.]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="style"></argument>
<argument name="pending_references"></argument>
</function>
<function name="sql_destroy_model"><doc><![CDATA[Return the DROP TABLE and restraint dropping statements for a single model]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="references_to_delete"></argument>
<argument name="style"></argument>
</function>
<function name="sql_indexes_for_model"><doc><![CDATA[Returns the CREATE INDEX SQL statements for a single model]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="style"></argument>
</function>
<function name="create_test_db"><doc><![CDATA[
        Creates a test database, prompting the user for confirmation if the
        database already exists. Returns the name of the test database created.
        ]]></doc>
<argument name="self"></argument>
<argument name="verbosity" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="autoclobber" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_digest" args="args"><doc><![CDATA[
        Generates a 32-bit digest of a set of arguments that can be used to
        shorten identifying names.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="sql_for_many_to_many"><doc><![CDATA[Return the CREATE TABLE statments for all the many-to-many tables defined on a model]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="style"></argument>
</function>
<function name="sql_for_many_to_many_field"><doc><![CDATA[Return the CREATE TABLE statements for a single m2m field]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="f"></argument>
<argument name="style"></argument>
</function>
<function name="sql_destroy_many_to_many"><doc><![CDATA[Returns the DROP TABLE statements for a single m2m field]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="f"></argument>
<argument name="style"></argument>
</function>
<function name="sql_table_creation_suffix"><doc><![CDATA[SQL to append to the end of the test table creation statements]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_create_model"><doc><![CDATA[
        Returns the SQL required to create a single model, as a tuple of:
            (list_of_sql, pending_references_dict)
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="style"></argument>
<argument name="known_models" type="set"><value></value>
</argument>
</function>
<function name="_destroy_test_db"><doc><![CDATA[Internal implementation - remove the test db tables.]]></doc>
<argument name="self"></argument>
<argument name="test_database_name"></argument>
<argument name="verbosity"></argument>
</function>
<function name="sql_for_inline_foreign_key_references"><doc><![CDATA[Return the SQL snippet defining the foreign key reference for a field]]></doc>
<argument name="self"></argument>
<argument name="field"></argument>
<argument name="known_models"></argument>
<argument name="style"></argument>
</function>
<function name="_create_test_db"><doc><![CDATA[Internal implementation - creates the test db tables.]]></doc>
<argument name="self"></argument>
<argument name="verbosity"></argument>
<argument name="autoclobber"></argument>
</function>
<function name="set_autocommit"><doc><![CDATA[Make sure a connection is in autocommit mode.]]></doc>
<argument name="self"></argument>
</function>
<function name="test_db_signature"><doc><![CDATA[
        Returns a tuple with elements of self.connection.settings_dict (a
        DATABASES setting value) that uniquely identify a database
        accordingly to the RDBMS particularities.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="sql_remove_table_constraints"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="references_to_delete"></argument>
<argument name="style"></argument>
</function>
</package>
<package name="django.db.models" file="/django/db/models/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="decimal"></depends>
<depends name="re"></depends>
<depends name="math"></depends>
<depends name="time"></depends>
<depends name="functools"></depends>
<depends name="itertools"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="tee" type="builtin_function_or_method" module="itertools"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="register_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_app" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_apps" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="SET_DEFAULT" module="django.db.models.deletion"></import_function>
<import_function name="SET_NULL" module="django.db.models.deletion"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_function name="SET" module="django.db.models.deletion"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="PROTECT" module="django.db.models.deletion"></import_function>
<import_function name="DO_NOTHING" module="django.db.models.deletion"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="CASCADE" module="django.db.models.deletion"></import_function>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="ProtectedError" module="django.db.models.deletion"></import_class>
<import_class name="ManyToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="BigIntegerField" module="django.db.models.fields"></import_class>
<import_class name="StdDev" module="django.db.models.aggregates"></import_class>
<import_class name="IntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveIntegerField" module="django.db.models.fields"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="DictWrapper" module="django.utils.datastructures"></import_class>
<import_class name="Variance" module="django.db.models.aggregates"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="Sum" module="django.db.models.aggregates"></import_class>
<import_class name="NOT_PROVIDED" module="django.db.models.fields"></import_class>
<import_class name="TextField" module="django.db.models.fields"></import_class>
<import_class name="Aggregate" module="django.db.models.aggregates"></import_class>
<import_class name="BooleanField" module="django.db.models.fields"></import_class>
<import_class name="DecimalField" module="django.db.models.fields"></import_class>
<import_class name="DateTimeField" module="django.db.models.fields"></import_class>
<import_class name="OneToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="SmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="IPAddressField" module="django.db.models.fields"></import_class>
<import_class name="SlugField" module="django.db.models.fields"></import_class>
<import_class name="TimeField" module="django.db.models.fields"></import_class>
<import_class name="FileField" module="django.db.models.fields.files"></import_class>
<import_class name="CommaSeparatedIntegerField" module="django.db.models.fields"></import_class>
<import_class name="Count" module="django.db.models.aggregates"></import_class>
<import_class name="F" module="django.db.models.expressions"></import_class>
<import_class name="SubfieldBase" module="django.db.models.fields.subclassing"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="XMLField" module="django.db.models.fields"></import_class>
<import_class name="URLField" module="django.db.models.fields"></import_class>
<import_class name="Avg" module="django.db.models.aggregates"></import_class>
<import_class name="LegacyConnection" module="django.db.models.fields.subclassing"></import_class>
<import_class name="ImageField" module="django.db.models.fields.files"></import_class>
<import_class name="Min" module="django.db.models.aggregates"></import_class>
<import_class name="FloatField" module="django.db.models.fields"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="ManyToManyField" module="django.db.models.fields.related"></import_class>
<import_class name="EmailField" module="django.db.models.fields"></import_class>
<import_class name="OneToOneField" module="django.db.models.fields.related"></import_class>
<import_class name="ForeignKey" module="django.db.models.fields.related"></import_class>
<import_class name="Max" module="django.db.models.aggregates"></import_class>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="NullBooleanField" module="django.db.models.fields"></import_class>
<import_class name="CharField" module="django.db.models.fields"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="PositiveSmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="Model" module="django.db.models.base"></import_class>
<import_class name="Manager" module="django.db.models.manager"></import_class>
<import_class name="FilePathField" module="django.db.models.fields"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="manager" type="module"><value><![CDATA[<module 'django.db.models.manager' from '/usr/local/lib/python2.7/dist-packages/django/db/models/manager.pyc'>]]></value>
</attribute>
<attribute name="validators" type="module"><value><![CDATA[<module 'django.core.validators' from '/usr/local/lib/python2.7/dist-packages/django/core/validators.pyc'>]]></value>
</attribute>
<attribute name="query" type="module"><value><![CDATA[<module 'django.db.models.query' from '/usr/local/lib/python2.7/dist-packages/django/db/models/query.pyc'>]]></value>
</attribute>
<attribute name="expressions" type="module"><value><![CDATA[<module 'django.db.models.expressions' from '/usr/local/lib/python2.7/dist-packages/django/db/models/expressions.pyc'>]]></value>
</attribute>
<attribute name="loading" type="module"><value><![CDATA[<module 'django.db.models.loading' from '/usr/local/lib/python2.7/dist-packages/django/db/models/loading.pyc'>]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="BLANK_CHOICE_NONE" type="list"><value><![CDATA[[('', 'None')]]]></value>
</attribute>
<attribute name="fields" type="module"><value><![CDATA[<module 'django.db.models.fields' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/__init__.pyc'>]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<attribute name="query_utils" type="module"><value><![CDATA[<module 'django.db.models.query_utils' from '/usr/local/lib/python2.7/dist-packages/django/db/models/query_utils.pyc'>]]></value>
</attribute>
<attribute name="related" type="module"><value><![CDATA[<module 'django.db.models.fields.related' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/related.pyc'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="math" type="module"><value><![CDATA[<module 'math' (built-in)>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.db.models.base' from '/usr/local/lib/python2.7/dist-packages/django/db/models/base.pyc'>]]></value>
</attribute>
<attribute name="proxy" type="module"><value><![CDATA[<module 'django.db.models.fields.proxy' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/proxy.pyc'>]]></value>
</attribute>
<attribute name="options" type="module"><value><![CDATA[<module 'django.db.models.options' from '/usr/local/lib/python2.7/dist-packages/django/db/models/options.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="subclassing" type="module"><value><![CDATA[<module 'django.db.models.fields.subclassing' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/subclassing.pyc'>]]></value>
</attribute>
<attribute name="ADD" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="ansi_date_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9099aa0>]]></value>
</attribute>
<attribute name="exceptions" type="module"><value><![CDATA[<module 'django.core.exceptions' from '/usr/local/lib/python2.7/dist-packages/django/core/exceptions.pyc'>]]></value>
</attribute>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="BOTH" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="CHANGE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="deletion" type="module"><value><![CDATA[<module 'django.db.models.deletion' from '/usr/local/lib/python2.7/dist-packages/django/db/models/deletion.pyc'>]]></value>
</attribute>
<attribute name="aggregates" type="module"><value><![CDATA[<module 'django.db.models.aggregates' from '/usr/local/lib/python2.7/dist-packages/django/db/models/aggregates.pyc'>]]></value>
</attribute>
<attribute name="sql" type="module"><value><![CDATA[<module 'django.db.models.sql' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/__init__.pyc'>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<function name="permalink"><doc><![CDATA[
    Decorator that calls urlresolvers.reverse() to return a URL using
    parameters returned by the decorated function "func".

    "func" should be a function that returns a tuple in one of the
    following formats:
        (viewname, viewargs)
        (viewname, viewargs, viewkwargs)
    ]]></doc>
<argument name="func"></argument>
</function>
</package>
<package name="django.db.models.related" file="/django/db/models/related.pyc"><doc></doc>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<class name="RelatedObject"></class>
<doc></doc>
<function name="get_db_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
<argument name="connection"></argument>
<argument name="prepared" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="bind"><doc></doc>
<argument name="self"></argument>
<argument name="field_mapping"></argument>
<argument name="original"></argument>
<argument name="bound_related_object_class" type="type"><value><![CDATA[<class 'django.db.models.related.BoundRelatedObject'>]]></value>
</argument>
</function>
<function name="get_cache_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="editable_fields"><doc><![CDATA[Get the fields in this class that should be edited inline.]]></doc>
<argument name="self"></argument>
</function>
<function name="get_choices"><doc><![CDATA[Returns choices with a default blank choices included, for use
        as SelectField choices for this field.

        Analogue of django.db.models.fields.Field.get_choices, provided
        initially for utilisation by RelatedFilterSpec.
        ]]></doc>
<argument name="self"></argument>
<argument name="include_blank" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="blank_choice" type="list"><value><![CDATA[[('', '---------')]]]></value>
</argument>
<argument name="limit_to_currently_related" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_accessor_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="parent_model"></argument>
<argument name="model"></argument>
<argument name="field"></argument>
</function>
<class name="BoundRelatedObject"></class>
<doc></doc>
<function name="template_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="related_object"></argument>
<argument name="field_mapping"></argument>
<argument name="original"></argument>
</function>
</package>
<package name="django.db.models.fields.files" file="/django/db/models/fields/files.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="os"></depends>
<import_attribute name="cache" type="AppCache" module="django.db.models.loading"></import_attribute>
<import_attribute name="default_storage" type="DefaultStorage" module="django.core.files.storage"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="get_image_dimensions" module="django.core.files.images"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="ContentFile" module="django.core.files.base"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="UploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="ImageFile" module="django.core.files.images"></import_class>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="FieldFile"></class>
<doc></doc>
<attribute name="file" type="property"><value><![CDATA[<property object at 0x928c234>]]></value>
</attribute>
<attribute name="path" type="property"><value><![CDATA[<property object at 0x928c52c>]]></value>
</attribute>
<attribute name="size" type="property"><value><![CDATA[<property object at 0x928c57c>]]></value>
</attribute>
<attribute name="url" type="property"><value><![CDATA[<property object at 0x928c554>]]></value>
</attribute>
<attribute name="closed" type="property"><value><![CDATA[<property object at 0x928c5a4>]]></value>
</attribute>
<function name="__ne__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_get_url"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_file"><doc></doc>
<argument name="self"></argument>
<argument name="file"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_del_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_closed"><doc></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
<argument name="mode" type="str"><value><![CDATA[rb]]></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="field"></argument>
<argument name="name"></argument>
</function>
<function name="__getstate__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_require_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_get_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_size"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_path"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__hash__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="FileDescriptor"></class>
<doc><![CDATA[
    The descriptor for the file attribute on the model instance. Returns a
    FieldFile when accessed so you can do stuff like::

        >>> instance.file.size

    Assigns a file object on assignment so you can do::

        >>> instance.file = File(...)

    ]]></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance" type="NoneType"><value></value>
</argument>
<argument name="owner" type="NoneType"><value></value>
</argument>
</function>
<class name="ImageFileDescriptor"></class>
<doc><![CDATA[
    Just like the FileDescriptor, but for ImageFields. The only difference is
    assigning the width/height to the width_field/height_field, if appropriate.
    ]]></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<class name="FileField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="save_form_data"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="data"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_directory_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pre_save"><doc><![CDATA[Returns field's value just before saving.]]></doc>
<argument name="self"></argument>
<argument name="model_instance"></argument>
<argument name="add"></argument>
</function>
<function name="get_prep_value"><doc><![CDATA[Returns field's value prepared for saving into a database.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="upload_to" type="str"><value></value>
</argument>
<argument name="storage" type="NoneType"><value></value>
</argument>
</function>
<function name="generate_filename"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="filename"></argument>
</function>
<function name="get_filename"><doc></doc>
<argument name="self"></argument>
<argument name="filename"></argument>
</function>
<class name="attr_class"></class>
<doc></doc>
<attribute name="file" type="property"><value><![CDATA[<property object at 0x928c234>]]></value>
</attribute>
<attribute name="path" type="property"><value><![CDATA[<property object at 0x928c52c>]]></value>
</attribute>
<attribute name="size" type="property"><value><![CDATA[<property object at 0x928c57c>]]></value>
</attribute>
<attribute name="url" type="property"><value><![CDATA[<property object at 0x928c554>]]></value>
</attribute>
<attribute name="closed" type="property"><value><![CDATA[<property object at 0x928c5a4>]]></value>
</attribute>
<function name="__ne__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_get_url"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_file"><doc></doc>
<argument name="self"></argument>
<argument name="file"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_del_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_closed"><doc></doc>
<argument name="self"></argument>
</function>
<function name="open"><doc></doc>
<argument name="self"></argument>
<argument name="mode" type="str"><value><![CDATA[rb]]></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="field"></argument>
<argument name="name"></argument>
</function>
<function name="__getstate__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_require_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_get_file"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_size"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_path"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__hash__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="descriptor_class"></class>
<doc><![CDATA[
    The descriptor for the file attribute on the model instance. Returns a
    FieldFile when accessed so you can do stuff like::

        >>> instance.file.size

    Assigns a file object on assignment so you can do::

        >>> instance.file = File(...)

    ]]></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance" type="NoneType"><value></value>
</argument>
<argument name="owner" type="NoneType"><value></value>
</argument>
</function>
<class name="ImageFieldFile"></class>
<doc></doc>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="ImageField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="width_field" type="NoneType"><value></value>
</argument>
<argument name="height_field" type="NoneType"><value></value>
</argument>
</function>
<function name="update_dimension_fields" args="args" kwargs="kwargs"><doc><![CDATA[
        Updates field's width and height fields, if defined.

        This method is hooked up to model's post_init signal to update
        dimensions after instantiating a model instance.  However, dimensions
        won't be updated if the dimensions fields are already populated.  This
        avoids unnecessary recalculation when loading an object from the
        database.

        Dimensions can be forced to update with force=True, which is how
        ImageFileDescriptor.__set__ calls this method.
        ]]></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="force" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="attr_class"></class>
<doc></doc>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="save" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="descriptor_class"></class>
<doc><![CDATA[
    Just like the FileDescriptor, but for ImageFields. The only difference is
    assigning the width/height to the width_field/height_field, if appropriate.
    ]]></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
</package>
<package name="django.core.files.images" file="/django/core/files/images.pyc"><doc><![CDATA[
Utility functions for handling images.

Requires PIL, as you might imagine.
]]></doc>
<import_class name="File" module="django.core.files.base"></import_class>
<function name="get_image_dimensions"><doc><![CDATA[
    Returns the (width, height) of an image, given an open file or a path.  Set
    'close' to True to close the file at the end if it is initially in an open
    state.
    ]]></doc>
<argument name="file_or_path"></argument>
<argument name="close" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="ImageFile"></class>
<doc><![CDATA[
    A mixin for use alongside django.core.files.base.File, which provides
    additional features for dealing with images.
    ]]></doc>
<attribute name="width" type="property"><value><![CDATA[<property object at 0x928c0cc>]]></value>
</attribute>
<attribute name="height" type="property"><value><![CDATA[<property object at 0x928c0f4>]]></value>
</attribute>
<function name="_get_image_dimensions"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_height"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_width"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.files.storage" file="/django/core/files/storage.pyc"><doc></doc>
<depends name="errno"></depends>
<depends name="urlparse"></depends>
<depends name="itertools"></depends>
<depends name="os"></depends>
<depends name="datetime"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="filepath_to_uri" module="django.utils.encoding"></import_function>
<import_function name="file_move_safe" module="django.core.files.move"></import_function>
<import_function name="get_valid_filename" module="django.utils.text"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="datetime" module="datetime"></import_class>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<import_class name="SuspiciousOperation" module="django.core.exceptions"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="locks" type="module"><value><![CDATA[<module 'django.core.files.locks' from '/usr/local/lib/python2.7/dist-packages/django/core/files/locks.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Storage', 'FileSystemStorage', 'DefaultStorage', 'default_storage')]]></value>
</attribute>
<attribute name="errno" type="module"><value><![CDATA[<module 'errno' (built-in)>]]></value>
</attribute>
<attribute name="default_storage" type="DefaultStorage"><value><![CDATA[<django.core.files.storage.DefaultStorage object at 0x929318c>]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<attribute name="itertools" type="module"><value><![CDATA[<module 'itertools' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="get_storage_class"><doc></doc>
<argument name="import_path" type="NoneType"><value></value>
</argument>
</function>
<class name="DefaultStorage"></class>
<doc></doc>
<function name="_setup"><doc></doc>
<argument name="self"></argument>
</function>
<class name="FileSystemStorage"></class>
<doc><![CDATA[
    Standard filesystem storage
    ]]></doc>
<function name="_save"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content"></argument>
</function>
<function name="exists"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="url"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="listdir"><doc></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<function name="_open"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="mode" type="str"><value><![CDATA[rb]]></value>
</argument>
</function>
<function name="modified_time"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="created_time"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="path"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="accessed_time"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="location" type="NoneType"><value></value>
</argument>
<argument name="base_url" type="NoneType"><value></value>
</argument>
</function>
<function name="size"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="Storage"></class>
<doc><![CDATA[
    A base storage class, providing some default behaviors that all other
    storage systems can inherit or override, as necessary.
    ]]></doc>
<function name="get_valid_name"><doc><![CDATA[
        Returns a filename, based on the provided filename, that's suitable for
        use in the target storage system.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="delete"><doc><![CDATA[
        Deletes the specified file from the storage system.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="exists"><doc><![CDATA[
        Returns True if a file referened by the given name already exists in the
        storage system, or False if the name is available for a new file.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="url"><doc><![CDATA[
        Returns an absolute URL where the file's contents can be accessed
        directly by a Web browser.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="get_available_name"><doc><![CDATA[
        Returns a filename that's free on the target storage system, and
        available for new content to be written to.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="listdir"><doc><![CDATA[
        Lists the contents of the specified path, returning a 2-tuple of lists;
        the first item being directories, the second item being files.
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<function name="modified_time"><doc><![CDATA[
        Returns the last modified time (as datetime object) of the file
        specified by name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="created_time"><doc><![CDATA[
        Returns the creation time (as datetime object) of the file
        specified by name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="path"><doc><![CDATA[
        Returns a local filesystem path where the file can be retrieved using
        Python's built-in open() function. Storage systems that can't be
        accessed using open() should *not* implement this method.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="accessed_time"><doc><![CDATA[
        Returns the last accessed time (as datetime object) of the file
        specified by name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="save"><doc><![CDATA[
        Saves new content to the file specified by name. The content should be a
        proper File object, ready to be read from the beginning.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="content"></argument>
</function>
<function name="open"><doc><![CDATA[
        Retrieves the specified file from storage, using the optional mixin
        class to customize what features are available on the File returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="mode" type="str"><value><![CDATA[rb]]></value>
</argument>
<argument name="mixin" type="NoneType"><value></value>
</argument>
</function>
<function name="size"><doc><![CDATA[
        Returns the total size, in bytes, of the file specified by name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
</package>
<package name="django.core.files.move" file="/django/core/files/move.pyc"><doc><![CDATA[
Move a file in the safest way possible::

    >>> from django.core.files.move import file_move_safe
    >>> file_move_safe("/tmp/old_file", "/tmp/new_file")
]]></doc>
<depends name="os"></depends>
<depends name="shutil"></depends>
<import_function name="copystat" module="shutil"></import_function>
<attribute name="__all__" type="list"><value><![CDATA[['file_move_safe']]]></value>
</attribute>
<attribute name="locks" type="module"><value><![CDATA[<module 'django.core.files.locks' from '/usr/local/lib/python2.7/dist-packages/django/core/files/locks.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="file_move_safe"><doc><![CDATA[
    Moves a file from one location to another in the safest way possible.

    First, tries ``os.rename``, which is simple but will break across filesystems.
    If that fails, streams manually from one file to another in pure Python.

    If the destination file exists and ``allow_overwrite`` is ``False``, this
    function will throw an ``IOError``.
    ]]></doc>
<argument name="old_file_name"></argument>
<argument name="new_file_name"></argument>
<argument name="chunk_size" type="int"><value><![CDATA[65536]]></value>
</argument>
<argument name="allow_overwrite" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_samefile"><doc></doc>
<argument name="src"></argument>
<argument name="dst"></argument>
</function>
</package>
<package name="django.core.files.locks" file="/django/core/files/locks.pyc"><doc><![CDATA[
Portable file locking utilities.

Based partially on example by Jonathan Feignberg <jdf@pobox.com> in the Python
Cookbook, licensed under the Python Software License.

    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203

Example Usage::

    >>> from django.core.files import locks
    >>> f = open('./file', 'wb')
    >>> locks.lock(f, locks.LOCK_EX)
    >>> f.write('Django')
    >>> f.close()
]]></doc>
<depends name="fcntl"></depends>
<attribute name="fcntl" type="module"><value><![CDATA[<module 'fcntl' (built-in)>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock', 'unlock')]]></value>
</attribute>
<attribute name="system_type" type="str"><value><![CDATA[posix]]></value>
</attribute>
<attribute name="LOCK_NB" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="LOCK_EX" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="LOCK_SH" type="int"><value><![CDATA[1]]></value>
</attribute>
<function name="lock"><doc></doc>
<argument name="file"></argument>
<argument name="flags"></argument>
</function>
<function name="unlock"><doc></doc>
<argument name="file"></argument>
</function>
<function name="fd"><doc><![CDATA[Get a filedescriptor from something which could be a file or an fd.]]></doc>
<argument name="f"></argument>
</function>
</package>
<package name="django.db.models.sql" file="/django/db/models/sql/__init__.pyc"><doc></doc>
<import_class name="RawQuery" module="django.db.models.sql.query"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="UpdateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="DeleteQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="DateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="AggregateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="InsertQuery" module="django.db.models.sql.subqueries"></import_class>
<attribute name="datastructures" type="module"><value><![CDATA[<module 'django.db.models.sql.datastructures' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/datastructures.pyc'>]]></value>
</attribute>
<attribute name="query" type="module"><value><![CDATA[<module 'django.db.models.sql.query' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/query.pyc'>]]></value>
</attribute>
<attribute name="expressions" type="module"><value><![CDATA[<module 'django.db.models.sql.expressions' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/expressions.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['Query', 'AND', 'OR', 'EmptyResultSet']]]></value>
</attribute>
<attribute name="subqueries" type="module"><value><![CDATA[<module 'django.db.models.sql.subqueries' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/subqueries.pyc'>]]></value>
</attribute>
<attribute name="aggregates" type="module"><value><![CDATA[<module 'django.db.models.sql.aggregates' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/aggregates.pyc'>]]></value>
</attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.db.models.sql.constants' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/constants.pyc'>]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="where" type="module"><value><![CDATA[<module 'django.db.models.sql.where' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/where.pyc'>]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
</package>
<package name="django.db.models.sql.compiler" file="/django/db/models/sql/compiler.pyc"><doc></doc>
<depends name="re"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_function name="truncate_name" module="django.db.backends.util"></import_function>
<import_function name="get_order_dir" module="django.db.models.sql.query"></import_function>
<import_function name="get_proxied_model" module="django.db.models.sql.query"></import_function>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9019bf0>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<function name="empty_iter"><doc><![CDATA[
    Returns an iterator containing no results.
    ]]></doc>
</function>
<function name="order_modified_iter"><doc><![CDATA[
    Yields blocks of rows from a cursor. We use this iterator in the special
    case when extra output columns have been added to support ordering
    requirements. We must trim those extra columns before anything else can use
    the results, since they're only needed to make the SQL valid.
    ]]></doc>
<argument name="cursor"></argument>
<argument name="trim"></argument>
<argument name="sentinel"></argument>
</function>
<class name="SQLDeleteCompiler"></class>
<doc></doc>
<function name="as_sql"><doc><![CDATA[
        Creates the SQL for this query. Returns the SQL string and list of
        parameters.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="SQLInsertCompiler"></class>
<doc></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
</function>
<function name="placeholder"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
<argument name="val"></argument>
</function>
<function name="execute_sql"><doc></doc>
<argument name="self"></argument>
<argument name="return_id" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="SQLCompiler"></class>
<doc></doc>
<function name="deferred_to_columns"><doc><![CDATA[
        Converts the self.deferred_loading data structure to mapping of table
        names to sets of column names which are to be loaded. Returns the
        dictionary.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_nested_sql"><doc><![CDATA[
        Perform the same functionality as the as_sql() method, returning an
        SQL string and parameters. However, the alias prefixes are bumped
        beforehand (in a copy -- the current query isn't changed), and any
        ordering is removed if the query is unsliced.

        Used when nesting this query inside another.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_sql"><doc><![CDATA[
        Creates the SQL for this query. Returns the SQL string and list of
        parameters.

        If 'with_limits' is False, any limit/offset information is not included
        in the query.
        ]]></doc>
<argument name="self"></argument>
<argument name="with_limits" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="with_col_aliases" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="find_ordering_name"><doc><![CDATA[
        Returns the table alias (the name might be ambiguous, the alias will
        not be) and column name for ordering by the given 'name' parameter.
        The 'name' is of the form 'field1__field2__...__fieldN'.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="opts"></argument>
<argument name="alias" type="NoneType"><value></value>
</argument>
<argument name="default_order" type="str"><value><![CDATA[ASC]]></value>
</argument>
<argument name="already_seen" type="NoneType"><value></value>
</argument>
</function>
<function name="get_default_columns"><doc><![CDATA[
        Computes the default columns for selecting every field in the base
        model. Will sometimes be called to pull in related models (e.g. via
        select_related), in which case "opts" and "start_alias" will be given
        to provide a starting point for the traversal.

        Returns a list of strings, quoted appropriately for use in SQL
        directly, as well as a set of aliases used in the select statement (if
        'as_pairs' is True, returns a list of (alias, col_name) pairs instead
        of strings as the first component and None as the second component).
        ]]></doc>
<argument name="self"></argument>
<argument name="with_aliases" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="col_aliases" type="NoneType"><value></value>
</argument>
<argument name="start_alias" type="NoneType"><value></value>
</argument>
<argument name="opts" type="NoneType"><value></value>
</argument>
<argument name="as_pairs" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="results_iter"><doc><![CDATA[
        Returns an iterator over the results from executing this query.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_from_clause"><doc><![CDATA[
        Returns a list of strings that are joined together to go after the
        "FROM" part of the query, as well as a list any extra parameters that
        need to be included. Sub-classes, can override this to create a
        from-clause via a "select".

        This should only be called after any SQL construction methods that
        might change the tables we need. This means the select columns and
        ordering must be done first.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="query"></argument>
<argument name="connection"></argument>
<argument name="using"></argument>
</function>
<function name="pre_sql_setup"><doc><![CDATA[
        Does any necessary class setup immediately prior to producing SQL. This
        is for things that can't necessarily be done in __init__ because we
        might not have all the pieces in place at that time.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="fill_related_selections"><doc><![CDATA[
        Fill in the information needed for a select_related query. The current
        depth is measured as the number of connections away from the root model
        (for example, cur_depth=1 means we are looking at models with direct
        connections to the root model).
        ]]></doc>
<argument name="self"></argument>
<argument name="opts" type="NoneType"><value></value>
</argument>
<argument name="root_alias" type="NoneType"><value></value>
</argument>
<argument name="cur_depth" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="used" type="NoneType"><value></value>
</argument>
<argument name="requested" type="NoneType"><value></value>
</argument>
<argument name="restricted" type="NoneType"><value></value>
</argument>
<argument name="nullable" type="NoneType"><value></value>
</argument>
<argument name="dupe_set" type="NoneType"><value></value>
</argument>
<argument name="avoid_set" type="NoneType"><value></value>
</argument>
</function>
<function name="quote_name_unless_alias"><doc><![CDATA[
        A wrapper around connection.ops.quote_name that doesn't quote aliases
        for table names. This avoids problems with some SQL dialects that treat
        quoted strings specially (e.g. PostgreSQL).
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="execute_sql"><doc><![CDATA[
        Run the query against the database and returns the result(s). The
        return value is a single data item if result_type is SINGLE, or an
        iterator over the results if the result_type is MULTI.

        result_type is either MULTI (use fetchmany() to retrieve all rows),
        SINGLE (only retrieve a single row), or None. In this last case, the
        cursor is returned if any query is executed, since it's used by
        subclasses such as InsertQuery). It's possible, however, that no query
        is needed, as the filters describe an empty set. In that case, None is
        returned, to avoid any unnecessary database interaction.
        ]]></doc>
<argument name="self"></argument>
<argument name="result_type" type="str"><value><![CDATA[multi]]></value>
</argument>
</function>
<function name="get_ordering"><doc><![CDATA[
        Returns a tuple containing a list representing the SQL elements in the
        "order by" clause, and the list of SQL elements that need to be added
        to the GROUP BY clause as a result of the ordering.

        Also sets the ordering_aliases attribute on this instance to a list of
        extra aliases needed in the select.

        Determining the ordering SQL can change the tables we need to include,
        so this should be run *before* get_from_clause().
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_grouping"><doc><![CDATA[
        Returns a tuple representing the SQL elements in the "group by" clause.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_columns"><doc><![CDATA[
        Returns the list of columns to use in the select statement. If no
        columns have been specified, returns all columns relating to fields in
        the model.

        If 'with_aliases' is true, any column names that are duplicated
        (without the table names) are given unique aliases. This is needed in
        some cases to avoid ambiguity with nested queries.
        ]]></doc>
<argument name="self"></argument>
<argument name="with_aliases" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="SQLDateCompiler"></class>
<doc></doc>
<function name="results_iter"><doc><![CDATA[
        Returns an iterator over the results from executing this query.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="SQLAggregateCompiler"></class>
<doc></doc>
<function name="as_sql"><doc><![CDATA[
        Creates the SQL for this query. Returns the SQL string and list of
        parameters.
        ]]></doc>
<argument name="self"></argument>
<argument name="qn" type="NoneType"><value></value>
</argument>
</function>
<class name="SQLUpdateCompiler"></class>
<doc></doc>
<function name="pre_sql_setup"><doc><![CDATA[
        If the update depends on results from other tables, we need to do some
        munging of the "where" conditions to match the format required for
        (portable) SQL updates. That is done here.

        Further, if we are going to be running multiple updates, we pull out
        the id values to update at this point so that they don't change as a
        result of the progressive updates.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="as_sql"><doc><![CDATA[
        Creates the SQL for this query. Returns the SQL string and list of
        parameters.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="execute_sql"><doc><![CDATA[
        Execute the specified update. Returns the number of rows affected by
        the primary update query. The "primary update query" is the first
        non-empty query that is executed. Row counts for any subsequent,
        related queries are not available.
        ]]></doc>
<argument name="self"></argument>
<argument name="result_type"></argument>
</function>
</package>
<package name="django.db.models.sql.where" file="/django/db/models/sql/where.pyc"><doc><![CDATA[
Code to manage the creation and SQL rendering of 'where' constraints.
]]></doc>
<depends name="datetime"></depends>
<depends name="itertools"></depends>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="repeat" module="itertools"></import_class>
<import_class name="FullResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="tree" type="module"><value><![CDATA[<module 'django.utils.tree' from '/usr/local/lib/python2.7/dist-packages/django/utils/tree.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
<class name="WhereNode"></class>
<doc><![CDATA[
    Used to represent the SQL where-clause.

    The class is tied to the Query class that created it (in order to create
    the correct SQL).

    The children in this tree are usually either Q-like objects or lists of
    [table_alias, field_name, db_type, lookup_type, value_annotation,
    params]. However, a child could also be any class with as_sql() and
    relabel_aliases() methods.
    ]]></doc>
<attribute name="default" type="str"><value><![CDATA[AND]]></value>
</attribute>
<function name="as_sql"><doc><![CDATA[
        Returns the SQL version of the where clause and the value to be
        substituted in. Returns None, None if this node is empty.

        If 'node' is provided, that is the root of the SQL generation
        (generally not needed except by the internal implementation for
        recursion).
        ]]></doc>
<argument name="self"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="make_atom"><doc><![CDATA[
        Turn a tuple (table_alias, column_name, db_type, lookup_type,
        value_annot, params) into valid SQL.

        Returns the string for the SQL fragment and the parameters to use for
        it.
        ]]></doc>
<argument name="self"></argument>
<argument name="child"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_for_columns"><doc><![CDATA[
        Returns the SQL fragment used for the left-hand side of a column
        constraint (for example, the "T1.foo" portion in the clause
        "WHERE ... T1.foo = 6").
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="add"><doc><![CDATA[
        Add a node to the where-tree. If the data is a list or tuple, it is
        expected to be of the form (obj, lookup_type, value), where obj is
        a Constraint object, and is then slightly munged before being stored
        (to avoid storing any reference to field objects). Otherwise, the 'data'
        is stored unchanged and can be any class with an 'as_sql()' method.
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="connector"></argument>
</function>
<function name="relabel_aliases"><doc><![CDATA[
        Relabels the alias values of any children. 'change_map' is a dictionary
        mapping old (current) alias values to the new values.
        ]]></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
<argument name="node" type="NoneType"><value></value>
</argument>
</function>
<class name="EmptyShortCircuit"></class>
<doc><![CDATA[
    Internal exception used to indicate that a "matches nothing" node should be
    added to the where-clause.
    ]]></doc>
<class name="Constraint"></class>
<doc><![CDATA[
    An object that can be passed to WhereNode.add() and knows how to
    pre-process itself prior to including in the WhereNode.
    ]]></doc>
<function name="prepare"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="__setstate__"><doc><![CDATA[Restore the constraint ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="process"><doc><![CDATA[
        Returns a tuple of data suitable for inclusion in a WhereNode
        instance.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
<argument name="connection"></argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
</function>
<function name="__getstate__"><doc><![CDATA[Save the state of the Constraint for pickling.

        Fields aren't necessarily pickleable, because they can have
        callable default values. So, instead of pickling the field
        store a reference so we can restore it manually
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
<argument name="col"></argument>
<argument name="field"></argument>
</function>
<class name="EverythingNode"></class>
<doc><![CDATA[
    A node that matches everything.
    ]]></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
<argument name="node" type="NoneType"><value></value>
</argument>
</function>
<class name="ExtraWhere"></class>
<doc></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="sqls"></argument>
<argument name="params"></argument>
</function>
<class name="NothingNode"></class>
<doc><![CDATA[
    A node that matches nothing.
    ]]></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
<argument name="node" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.db.models.sql.constants" file="/django/db/models/sql/constants.pyc"><doc></doc>
<depends name="re"></depends>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9019bf0>]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
</package>
<package name="django.db.models.sql.aggregates" file="/django/db/models/sql/aggregates.pyc"><doc><![CDATA[
Classes to represent the default SQL aggregate functions
]]></doc>
<attribute name="ordinal_aggregate_field" type="AggregateField"><value><![CDATA[<django.db.models.sql.aggregates.AggregateField object at 0x9247a6c>]]></value>
</attribute>
<attribute name="computed_aggregate_field" type="AggregateField"><value><![CDATA[<django.db.models.sql.aggregates.AggregateField object at 0x9247aac>]]></value>
</attribute>
<class name="Count"></class>
<doc></doc>
<attribute name="is_ordinal" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="sql_function" type="str"><value><![CDATA[COUNT]]></value>
</attribute>
<attribute name="sql_template" type="str"><value><![CDATA[%(function)s(%(distinct)s%(field)s)]]></value>
</attribute>
<function name="__init__" kwargs="extra"><doc></doc>
<argument name="self"></argument>
<argument name="col"></argument>
<argument name="distinct" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="AggregateField"></class>
<doc><![CDATA[An internal field mockup used to identify aggregates in the
    data-conversion parts of the database backend.
    ]]></doc>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="internal_type"></argument>
</function>
<class name="Variance"></class>
<doc></doc>
<attribute name="is_computed" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="__init__" kwargs="extra"><doc></doc>
<argument name="self"></argument>
<argument name="col"></argument>
<argument name="sample" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="Sum"></class>
<doc></doc>
<attribute name="sql_function" type="str"><value><![CDATA[SUM]]></value>
</attribute>
<class name="Min"></class>
<doc></doc>
<attribute name="sql_function" type="str"><value><![CDATA[MIN]]></value>
</attribute>
<class name="StdDev"></class>
<doc></doc>
<attribute name="is_computed" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="__init__" kwargs="extra"><doc></doc>
<argument name="self"></argument>
<argument name="col"></argument>
<argument name="sample" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="Max"></class>
<doc></doc>
<attribute name="sql_function" type="str"><value><![CDATA[MAX]]></value>
</attribute>
<class name="Aggregate"></class>
<doc><![CDATA[
    Default SQL Aggregate.
    ]]></doc>
<attribute name="is_ordinal" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="is_computed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="sql_template" type="str"><value><![CDATA[%(function)s(%(field)s)]]></value>
</attribute>
<function name="as_sql"><doc><![CDATA[Return the aggregate, rendered as SQL.]]></doc>
<argument name="self"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="__init__" kwargs="extra"><doc><![CDATA[Instantiate an SQL aggregate

         * col is a column reference describing the subject field
           of the aggregate. It can be an alias, or a tuple describing
           a table and column name.
         * source is the underlying field or aggregate definition for
           the column reference. If the aggregate is not an ordinal or
           computed type, this reference is used to determine the coerced
           output type of the aggregate.
         * extra is a dictionary of additional data to provide for the
           aggregate definition

        Also utilizes the class variables:
         * sql_function, the name of the SQL function that implements the
           aggregate.
         * sql_template, a template string that is used to render the
           aggregate into SQL.
         * is_ordinal, a boolean indicating if the output of this aggregate
           is an integer (e.g., a count)
         * is_computed, a boolean indicating if this output of this aggregate
           is a computed float (e.g., an average), regardless of the input
           type.

        ]]></doc>
<argument name="self"></argument>
<argument name="col"></argument>
<argument name="source" type="NoneType"><value></value>
</argument>
<argument name="is_summary" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
</function>
<class name="Avg"></class>
<doc></doc>
<attribute name="sql_function" type="str"><value><![CDATA[AVG]]></value>
</attribute>
<attribute name="is_computed" type="bool"><value><![CDATA[True]]></value>
</attribute>
</package>
<package name="django.db.models.sql.subqueries" file="/django/db/models/sql/subqueries.pyc"><doc><![CDATA[
Query subclasses which provide extra functionality beyond simple data retrieval.
]]></doc>
<depends name="re"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Date" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Constraint" module="django.db.models.sql.where"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['DeleteQuery', 'UpdateQuery', 'InsertQuery', 'DateQuery', 'AggregateQuery']]]></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9019bf0>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<class name="UpdateQuery"></class>
<doc><![CDATA[
    Represents an "update" SQL query.
    ]]></doc>
<attribute name="compiler" type="str"><value><![CDATA[SQLUpdateCompiler]]></value>
</attribute>
<function name="add_update_fields"><doc><![CDATA[
        Turn a sequence of (field, model, value) triples into an update query.
        Used by add_update_values() as well as the "fast" update path when
        saving models.
        ]]></doc>
<argument name="self"></argument>
<argument name="values_seq"></argument>
</function>
<function name="clone" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
</function>
<function name="update_batch"><doc></doc>
<argument name="self"></argument>
<argument name="pk_list"></argument>
<argument name="values"></argument>
<argument name="using"></argument>
</function>
<function name="_setup_query"><doc><![CDATA[
        Runs on initialization and after cloning. Any attributes that would
        normally be set in __init__ should go in here, instead, so that they
        are also set up after a clone() call.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_related_updates"><doc><![CDATA[
        Returns a list of query objects: one for each update required to an
        ancestor model. Each query will have the same filtering conditions as
        the current query but will only update a single table.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add_related_update"><doc><![CDATA[
        Adds (name, value) to an update query for an ancestor model.

        Updates are coalesced so that we only run one update query per ancestor.
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="field"></argument>
<argument name="value"></argument>
</function>
<function name="add_update_values"><doc><![CDATA[
        Convert a dictionary of field name to value mappings into an update
        query. This is the entry point for the public update() method on
        querysets.
        ]]></doc>
<argument name="self"></argument>
<argument name="values"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="DeleteQuery"></class>
<doc><![CDATA[
    Delete queries are done through this class, since they are more constrained
    than general queries.
    ]]></doc>
<attribute name="compiler" type="str"><value><![CDATA[SQLDeleteCompiler]]></value>
</attribute>
<function name="delete_batch"><doc><![CDATA[
        Set up and execute delete queries for all the objects in pk_list.

        More than one physical query may be executed if there are a
        lot of values in pk_list.
        ]]></doc>
<argument name="self"></argument>
<argument name="pk_list"></argument>
<argument name="using"></argument>
<argument name="field" type="NoneType"><value></value>
</argument>
</function>
<function name="do_query"><doc></doc>
<argument name="self"></argument>
<argument name="table"></argument>
<argument name="where"></argument>
<argument name="using"></argument>
</function>
<class name="DateQuery"></class>
<doc><![CDATA[
    A DateQuery is a normal query, except that it specifically selects a single
    date field. This requires some special handling when converting the results
    back to Python objects, so we put it in a separate class.
    ]]></doc>
<attribute name="compiler" type="str"><value><![CDATA[SQLDateCompiler]]></value>
</attribute>
<function name="add_date_select"><doc><![CDATA[
        Converts the query into a date extraction query.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
<argument name="lookup_type"></argument>
<argument name="order" type="str"><value><![CDATA[ASC]]></value>
</argument>
</function>
<class name="InsertQuery"></class>
<doc></doc>
<attribute name="compiler" type="str"><value><![CDATA[SQLInsertCompiler]]></value>
</attribute>
<function name="clone" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
</function>
<function name="insert_values"><doc><![CDATA[
        Set up the insert query from the 'insert_values' dictionary. The
        dictionary gives the model field names and their target values.

        If 'raw_values' is True, the values in the 'insert_values' dictionary
        are inserted directly into the query, rather than passed as SQL
        parameters. This provides a way to insert NULL and DEFAULT keywords
        into the query, for example.
        ]]></doc>
<argument name="self"></argument>
<argument name="insert_values"></argument>
<argument name="raw_values" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="AggregateQuery"></class>
<doc><![CDATA[
    An AggregateQuery takes another query as a parameter to the FROM
    clause and only selects the elements in the provided list.
    ]]></doc>
<attribute name="compiler" type="str"><value><![CDATA[SQLAggregateCompiler]]></value>
</attribute>
<function name="add_subquery"><doc></doc>
<argument name="self"></argument>
<argument name="query"></argument>
<argument name="using"></argument>
</function>
</package>
<package name="django.db.models.sql.expressions" file="/django/db/models/sql/expressions.pyc"><doc></doc>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<class name="SQLEvaluator"></class>
<doc></doc>
<function name="prepare"><doc></doc>
<argument name="self"></argument>
</function>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="evaluate_date_modifier_node"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
</function>
<function name="prepare_leaf"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="query"></argument>
<argument name="allow_joins"></argument>
</function>
<function name="evaluate_leaf"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="prepare_node"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="query"></argument>
<argument name="allow_joins"></argument>
</function>
<function name="evaluate_node"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="expression"></argument>
<argument name="query"></argument>
<argument name="allow_joins" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
</package>
<package name="django.db.models.sql.query" file="/django/db/models/sql/query.pyc"><doc><![CDATA[
Create SQL statements for QuerySets.

The code in here encapsulates all of the SQL construction so that QuerySets
themselves do not have to (and could be backed by things other than SQL
databases). The abstraction barrier only works one way: this module has to know
all about the internals of models in order to get the information it needs.
]]></doc>
<depends name="re"></depends>
<depends name="copy"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Empty" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Node" module="django.utils.tree"></import_class>
<import_class name="ExtraWhere" module="django.db.models.sql.where"></import_class>
<import_class name="Constraint" module="django.db.models.sql.where"></import_class>
<import_class name="EverythingNode" module="django.db.models.sql.where"></import_class>
<import_class name="MultiJoin" module="django.db.models.sql.datastructures"></import_class>
<import_class name="WhereNode" module="django.db.models.sql.where"></import_class>
<import_class name="InvalidQuery" module="django.db.models.query_utils"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['Query', 'RawQuery']]]></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9019bf0>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="base_aggregates_module" type="module"><value><![CDATA[<module 'django.db.models.sql.aggregates' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/aggregates.pyc'>]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<function name="setup_join_cache" kwargs="kwargs"><doc><![CDATA[
    The information needed to join between model fields is something that is
    invariant over the life of the model, so we cache it in the model's Options
    class, rather than recomputing it all the time.

    This method initialises the (empty) cache when the model is created.
    ]]></doc>
<argument name="sender"></argument>
</function>
<function name="get_order_dir"><doc><![CDATA[
    Returns the field name and direction for an order specification. For
    example, '-foo' is returned as ('foo', 'DESC').

    The 'default' param is used to indicate which way no prefix (or a '+'
    prefix) should sort. The '-' prefix always sorts the opposite way.
    ]]></doc>
<argument name="field"></argument>
<argument name="default" type="str"><value><![CDATA[ASC]]></value>
</argument>
</function>
<function name="get_proxied_model"><doc></doc>
<argument name="opts"></argument>
</function>
<function name="add_to_dict"><doc><![CDATA[
    A helper function to add "value" to the set of values for "key", whether or
    not "key" already exists.
    ]]></doc>
<argument name="data"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<class name="RawQuery"></class>
<doc><![CDATA[
    A single raw SQL query
    ]]></doc>
<function name="_execute_query"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clone"><doc></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
<function name="convert_values"><doc><![CDATA[Convert the database-returned value into a type that is consistent
        across database backends.

        By default, this defers to the underlying backend operations, but
        it can be overridden by Query classes for specific backends.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="field"></argument>
<argument name="connection"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_columns"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="using"></argument>
<argument name="params" type="NoneType"><value></value>
</argument>
</function>
<class name="Query"></class>
<doc><![CDATA[
    A single SQL query.
    ]]></doc>
<attribute name="extra_select" type="property"><value><![CDATA[<property object at 0x925107c>]]></value>
</attribute>
<attribute name="compiler" type="str"><value><![CDATA[SQLCompiler]]></value>
</attribute>
<attribute name="LOUTER" type="str"><value><![CDATA[LEFT OUTER JOIN]]></value>
</attribute>
<attribute name="aggregate_select" type="property"><value><![CDATA[<property object at 0x924be8c>]]></value>
</attribute>
<attribute name="query_terms" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="aggregates_module" type="module"><value><![CDATA[<module 'django.db.models.sql.aggregates' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/aggregates.pyc'>]]></value>
</attribute>
<attribute name="INNER" type="str"><value><![CDATA[INNER JOIN]]></value>
</attribute>
<attribute name="alias_prefix" type="str"><value><![CDATA[T]]></value>
</attribute>
<function name="__str__"><doc><![CDATA[
        Returns the query as a string of SQL with the parameter values
        substituted in.

        Parameter values won't necessarily be quoted correctly, since that is
        done by the database interface at execution time.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="convert_values"><doc><![CDATA[Convert the database-returned value into a type that is consistent
        across database backends.

        By default, this defers to the underlying backend operations, but
        it can be overridden by Query classes for specific backends.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="field"></argument>
<argument name="connection"></argument>
</function>
<function name="get_loaded_field_names_cb"><doc><![CDATA[
        Callback used by get_deferred_field_names().
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="model"></argument>
<argument name="fields"></argument>
</function>
<function name="ref_alias"><doc><![CDATA[ Increases the reference count for this alias. ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<function name="remove_inherited_models"><doc><![CDATA[
        Undoes the effects of setup_inherited_models(). Should be called
        whenever select columns (self.select) are set explicitly.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_meta"><doc><![CDATA[
        Returns the Options instance (the model._meta) from which to start
        processing. Normally, this is self.model._meta, but it can be changed
        by subclasses.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_loaded_field_names"><doc><![CDATA[
        If any fields are marked to be deferred, returns a dictionary mapping
        models to a set of names in those fields that will be loaded. If a
        model is not in the returned dictionary, none of it's fields are
        deferred.

        If no fields are marked for deferral, returns an empty dictionary.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="prepare"><doc></doc>
<argument name="self"></argument>
</function>
<function name="set_aggregate_mask"><doc><![CDATA[Set the mask of aggregates that will actually be returned by the SELECT]]></doc>
<argument name="self"></argument>
<argument name="names"></argument>
</function>
<function name="combine"><doc><![CDATA[
        Merge the 'rhs' query into the current one (with any 'rhs' effects
        being applied *after* (that is, "to the right of") anything in the
        current query. 'rhs' is not modified during a call to this function.

        The 'connector' parameter describes how to connect filters from the
        'rhs' query.
        ]]></doc>
<argument name="self"></argument>
<argument name="rhs"></argument>
<argument name="connector"></argument>
</function>
<function name="add_count_column"><doc><![CDATA[
        Converts the query to do count(...) or count(distinct(pk)) in order to
        get its size.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add_extra"><doc><![CDATA[
        Adds data to the various extra_* attributes for user-created additions
        to the query.
        ]]></doc>
<argument name="self"></argument>
<argument name="select"></argument>
<argument name="select_params"></argument>
<argument name="where"></argument>
<argument name="params"></argument>
<argument name="tables"></argument>
<argument name="order_by"></argument>
</function>
<function name="can_filter"><doc><![CDATA[
        Returns True if adding filters to this instance is still possible.

        Typically, this means no limits or offsets have been put on the results.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__setstate__"><doc><![CDATA[
        Unpickling support.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj_dict"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="split_exclude"><doc><![CDATA[
        When doing an exclude against any kind of N-to-many relation, we need
        to use a subquery. This method constructs the nested query, given the
        original exclude filter (filter_expr) and the portion up to the first
        N-to-many relation field.
        ]]></doc>
<argument name="self"></argument>
<argument name="filter_expr"></argument>
<argument name="prefix"></argument>
<argument name="can_reuse"></argument>
</function>
<function name="unref_alias"><doc><![CDATA[ Decreases the reference count for this alias. ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<function name="join"><doc><![CDATA[
        Returns an alias for the join in 'connection', either reusing an
        existing alias for that join or creating a new one. 'connection' is a
        tuple (lhs, table, lhs_col, col) where 'lhs' is either an existing
        table alias or a table name. The join correspods to the SQL equivalent
        of::

            lhs.lhs_col = table.col

        If 'always_create' is True and 'reuse' is None, a new alias is always
        created, regardless of whether one already exists or not. If
        'always_create' is True and 'reuse' is a set, an alias in 'reuse' that
        matches the connection will be returned, if possible.  If
        'always_create' is False, the first existing alias that matches the
        'connection' is returned, if any. Otherwise a new join is created.

        If 'exclusions' is specified, it is something satisfying the container
        protocol ("foo in exclusions" must work) and specifies a list of
        aliases that should not be returned, even if they satisfy the join.

        If 'promote' is True, the join type for the alias will be LOUTER (if
        the alias previously existed, the join type will be promoted from INNER
        to LOUTER, if necessary).

        If 'outer_if_first' is True and a new join is created, it will have the
        LOUTER join type. This is used when joining certain types of querysets
        and Q-objects together.

        If 'nullable' is True, the join can potentially involve NULL values and
        is a candidate for promotion (to "left outer") when combining querysets.
        ]]></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
<argument name="always_create" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="exclusions" type="tuple"><value></value>
</argument>
<argument name="promote" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="outer_if_first" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="nullable" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="reuse" type="NoneType"><value></value>
</argument>
</function>
<function name="add_aggregate"><doc><![CDATA[
        Adds a single aggregate expression to the Query
        ]]></doc>
<argument name="self"></argument>
<argument name="aggregate"></argument>
<argument name="model"></argument>
<argument name="alias"></argument>
<argument name="is_summary"></argument>
</function>
<function name="update_dupe_avoidance"><doc><![CDATA[
        For a column that is one of multiple pointing to the same table, update
        the internal data structures to note that this alias shouldn't be used
        for those other columns.
        ]]></doc>
<argument name="self"></argument>
<argument name="opts"></argument>
<argument name="col"></argument>
<argument name="alias"></argument>
</function>
<function name="need_force_having"><doc><![CDATA[
        Returns whether or not all elements of this q_object need to be put
        together in the HAVING clause.
        ]]></doc>
<argument name="self"></argument>
<argument name="q_object"></argument>
</function>
<function name="add_immediate_loading"><doc><![CDATA[
        Add the given list of model field names to the set of fields to
        retrieve when the SQL is executed ("immediate loading" fields). The
        field names replace any existing immediate loading field names. If
        there are field names already specified for deferred loading, those
        names are removed from the new field_names before storing the new names
        for immediate loading. (That is, immediate loading overrides any
        existing immediate values, but respects existing deferrals.)
        ]]></doc>
<argument name="self"></argument>
<argument name="field_names"></argument>
</function>
<function name="count_active_tables"><doc><![CDATA[
        Returns the number of tables in this query with a non-zero reference
        count.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="trim_joins"><doc><![CDATA[
        Sometimes joins at the end of a multi-table sequence can be trimmed. If
        the final join is against the same column as we are comparing against,
        and is an inner join, we can go back one step in a join chain and
        compare against the LHS of the join instead (and then repeat the
        optimization). The result, potentially, involves less table joins.

        The 'target' parameter is the final field being joined to, 'join_list'
        is the full list of join aliases.

        The 'last' list contains offsets into 'join_list', corresponding to
        each component of the filter.  Many-to-many relations, for example, add
        two tables to the join list and we want to deal with both tables the
        same way, so 'last' has an entry for the first of the two tables and
        then the table immediately after the second table, in that case.

        The 'trim' parameter forces the final piece of the join list to be
        trimmed before anything. See the documentation of add_filter() for
        details about this.

        Returns the final active column and table alias and the new active
        join_list.
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="join_list"></argument>
<argument name="last"></argument>
<argument name="trim"></argument>
</function>
<function name="deferred_to_columns_cb"><doc><![CDATA[
        Callback used by deferred_to_columns(). The "target" parameter should
        be a set instance.
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="model"></argument>
<argument name="fields"></argument>
</function>
<function name="set_start"><doc><![CDATA[
        Sets the table from which to start joining. The start position is
        specified by the related attribute from the base model. This will
        automatically set to the select column to be the column linked from the
        previous table.

        This method is primarily for internal use and the error checking isn't
        as friendly as add_filter(). Mostly useful for querying directly
        against the join table of many-to-many relation in a subquery.
        ]]></doc>
<argument name="self"></argument>
<argument name="start"></argument>
</function>
<function name="clear_limits"><doc><![CDATA[
        Clears any existing limits.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="set_limits"><doc><![CDATA[
        Adjusts the limits on the rows retrieved. We use low/high to set these,
        as it makes it more Pythonic to read and write. When the SQL query is
        created, they are converted to the appropriate offset and limit values.

        Any limits passed in here are applied relative to the existing
        constraints. So low is added to the current low value and both will be
        clamped to any existing high value.
        ]]></doc>
<argument name="self"></argument>
<argument name="low" type="NoneType"><value></value>
</argument>
<argument name="high" type="NoneType"><value></value>
</argument>
</function>
<function name="add_select_related"><doc><![CDATA[
        Sets up the select_related data structure so that we only select
        certain related models (as opposed to all models, when
        self.select_related=True).
        ]]></doc>
<argument name="self"></argument>
<argument name="fields"></argument>
</function>
<function name="add_ordering" args="ordering"><doc><![CDATA[
        Adds items from the 'ordering' sequence to the query's "order by"
        clause. These items are either field names (not column names) --
        possibly with a direction prefix ('-' or '?') -- or ordinals,
        corresponding to column positions in the 'select' list.

        If 'ordering' is empty, all ordering is cleared from the query.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="table_alias"><doc><![CDATA[
        Returns a table alias for the given table_name and whether this is a
        new alias or not.

        If 'create' is true, a new alias is always created. Otherwise, the
        most recently created alias for the table (if one exists) is reused.
        ]]></doc>
<argument name="self"></argument>
<argument name="table_name"></argument>
<argument name="create" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="promote_alias_chain"><doc><![CDATA[
        Walks along a chain of aliases, promoting the first nullable join and
        any joins following that. If 'must_promote' is True, all the aliases in
        the chain are promoted.
        ]]></doc>
<argument name="self"></argument>
<argument name="chain"></argument>
<argument name="must_promote" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_initial_alias"><doc><![CDATA[
        Returns the first alias for this query, after increasing its reference
        count.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="setup_joins"><doc><![CDATA[
        Compute the necessary table joins for the passage through the fields
        given in 'names'. 'opts' is the Options class for the current model
        (which gives the table we are joining to), 'alias' is the alias for the
        table we are joining to. If dupe_multis is True, any many-to-many or
        many-to-one joins will always create a new alias (necessary for
        disjunctive filters). If can_reuse is not None, it's a list of aliases
        that can be reused in these joins (nothing else can be reused in this
        case). Finally, 'negate' is used in the same sense as for add_filter()
        -- it indicates an exclude() filter, or something similar. It is only
        passed in here so that it can be passed to a field's extra_filter() for
        customised behaviour.

        Returns the final field involved in the join, the target database
        column (used for any 'where' constraint), the final 'opts' value and the
        list of tables joined.
        ]]></doc>
<argument name="self"></argument>
<argument name="names"></argument>
<argument name="opts"></argument>
<argument name="alias"></argument>
<argument name="dupe_multis"></argument>
<argument name="allow_many" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="allow_explicit_fk" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_reuse" type="NoneType"><value></value>
</argument>
<argument name="negate" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="process_extras" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="add_filter"><doc><![CDATA[
        Add a single filter to the query. The 'filter_expr' is a pair:
        (filter_string, value). E.g. ('name__contains', 'fred')

        If 'negate' is True, this is an exclude() filter. It's important to
        note that this method does not negate anything in the where-clause
        object when inserting the filter constraints. This is because negated
        filters often require multiple calls to add_filter() and the negation
        should only happen once. So the caller is responsible for this (the
        caller will normally be add_q(), so that as an example).

        If 'trim' is True, we automatically trim the final join group (used
        internally when constructing nested queries).

        If 'can_reuse' is a set, we are processing a component of a
        multi-component filter (e.g. filter(Q1, Q2)). In this case, 'can_reuse'
        will be a set of table aliases that can be reused in this filter, even
        if we would otherwise force the creation of new aliases for a join
        (needed for nested Q-filters). The set is updated by this method.

        If 'process_extras' is set, any extra filters returned from the table
        joining process will be processed. This parameter is set to False
        during the processing of extra filters to avoid infinite recursion.
        ]]></doc>
<argument name="self"></argument>
<argument name="filter_expr"></argument>
<argument name="connector" type="str"><value><![CDATA[AND]]></value>
</argument>
<argument name="negate" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="trim" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_reuse" type="NoneType"><value></value>
</argument>
<argument name="process_extras" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="force_having" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="bump_prefix"><doc><![CDATA[
        Changes the alias prefix to the next letter in the alphabet and
        relabels all the aliases. Even tables that previously had no alias will
        get an alias after this call (it's mostly used for nested queries and
        the outer query will already be using the non-aliased table name).

        Subclasses who create their own prefix should override this method to
        produce a similar result (a new prefix and relabelled aliases).

        The 'exceptions' parameter is a container that holds alias names which
        should not be changed.
        ]]></doc>
<argument name="self"></argument>
<argument name="exceptions" type="tuple"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="where" type="type"><value><![CDATA[<class 'django.db.models.sql.where.WhereNode'>]]></value>
</argument>
</function>
<function name="setup_inherited_models"><doc><![CDATA[
        If the model that is the basis for this QuerySet inherits other models,
        we need to ensure that those other models have their tables included in
        the query.

        We do this as a separate step so that subclasses know which
        tables are going to be active in the query, without needing to compute
        all the select columns (this method is called from pre_sql_setup(),
        whereas column determination is a later part, and side-effect, of
        as_sql()).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_aggregate_select"><doc><![CDATA[The SortedDict of aggregate columns that are not masked, and should
        be used in the SELECT clause.

        This result is cached for optimization purposes.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="set_group_by"><doc><![CDATA[
        Expands the GROUP BY clause required by the query.

        This will usually be the set of all non-aggregate fields in the
        return data. If the database backend supports grouping by the
        primary key, and the query would be equivalent, the optimization
        will be made automatically.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="resolve_aggregate"><doc><![CDATA[Resolve the value of aggregates returned by the database to
        consistent (and reasonable) types.

        This is required because of the predisposition of certain backends
        to return Decimal and long types when they are not needed.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="aggregate"></argument>
<argument name="connection"></argument>
</function>
<function name="add_deferred_loading"><doc><![CDATA[
        Add the given list of model field names to the set of fields to
        exclude from loading from the database when automatic column selection
        is done. The new field names are added to any existing field names that
        are deferred (or removed from any existing field names that are marked
        as the only ones for immediate loading).
        ]]></doc>
<argument name="self"></argument>
<argument name="field_names"></argument>
</function>
<function name="get_count"><doc><![CDATA[
        Performs a COUNT() query using the current filter constraints.
        ]]></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
<function name="__getstate__"><doc><![CDATA[
        Pickling support.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="clone" kwargs="kwargs"><doc><![CDATA[
        Creates a copy of the current instance. The 'kwargs' parameter can be
        used by clients to update attributes after copying has taken place.
        ]]></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
<argument name="memo" type="NoneType"><value></value>
</argument>
</function>
<function name="change_aliases"><doc><![CDATA[
        Changes the aliases in change_map (which maps old-alias -> new-alias),
        relabelling any references to them in select columns and the where
        clause.
        ]]></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
</function>
<function name="deferred_to_data"><doc><![CDATA[
        Converts the self.deferred_loading data structure to an alternate data
        structure, describing the field that *will* be loaded. This is used to
        compute the columns to select from the database and also by the
        QuerySet class to work out which fields are being initialised on each
        model. Models that have all their fields included aren't mentioned in
        the result, only those that have field restrictions in place.

        The "target" parameter is the instance that is populated (in place).
        The "callback" is a function that is called whenever a (model, field)
        pair need to be added to "target". It accepts three parameters:
        "target", and the model and list of fields being added for that model.
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="callback"></argument>
</function>
<function name="_extra_select"><doc></doc>
<argument name="self"></argument>
</function>
<function name="promote_alias"><doc><![CDATA[
        Promotes the join type of an alias to an outer join if it's possible
        for the join to contain NULL values on the left. If 'unconditional' is
        False, the join is only promoted if it is nullable, otherwise it is
        always promoted.

        Returns True if the join was promoted by this call.
        ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
<argument name="unconditional" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="clear_select_fields"><doc><![CDATA[
        Clears the list of fields to select (but not extra_select columns).
        Some queryset types completely replace any existing list of select
        columns.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add_q"><doc><![CDATA[
        Adds a Q-object to the current filter.

        Can also be used to add anything that has an 'add_to_query()' method.
        ]]></doc>
<argument name="self"></argument>
<argument name="q_object"></argument>
<argument name="used_aliases" type="NoneType"><value></value>
</argument>
<argument name="force_having" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="promote_unused_aliases"><doc><![CDATA[
        Given a "before" copy of the alias_refcounts dictionary (as
        'initial_refcounts') and a collection of aliases that may have been
        changed or created, works out which aliases have been created since
        then and which ones haven't been used and promotes all of those
        aliases, plus any children of theirs in the alias tree, to outer joins.
        ]]></doc>
<argument name="self"></argument>
<argument name="initial_refcounts"></argument>
<argument name="used_aliases"></argument>
</function>
<function name="clear_deferred_loading"><doc><![CDATA[
        Remove any fields from the deferred loading set.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="set_extra_mask"><doc><![CDATA[
        Set the mask of extra select items that will be returned by SELECT,
        we don't actually remove them from the Query since they might be used
        later
        ]]></doc>
<argument name="self"></argument>
<argument name="names"></argument>
</function>
<function name="has_results"><doc></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
<function name="add_fields"><doc><![CDATA[
        Adds the given (model) fields to the select set. The field names are
        added in the order specified.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_names"></argument>
<argument name="allow_m2m" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_compiler"><doc></doc>
<argument name="self"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="clear_ordering"><doc><![CDATA[
        Removes any ordering settings. If 'force_empty' is True, there will be
        no ordering in the resulting query (not even the model's default).
        ]]></doc>
<argument name="self"></argument>
<argument name="force_empty" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_aggregation"><doc><![CDATA[
        Returns the dictionary with the values of the existing aggregations.
        ]]></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
</package>
<package name="django.db.models.sql.datastructures" file="/django/db/models/sql/datastructures.pyc"><doc><![CDATA[
Useful auxilliary data structures for query construction. Not useful outside
the SQL domain.
]]></doc>
<class name="RawValue"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="FullResultSet"></class>
<doc></doc>
<class name="EmptyResultSet"></class>
<doc></doc>
<class name="Date"></class>
<doc><![CDATA[
    Add a date selection column.
    ]]></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="relabel_aliases"><doc></doc>
<argument name="self"></argument>
<argument name="change_map"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="col"></argument>
<argument name="lookup_type"></argument>
</function>
<class name="MultiJoin"></class>
<doc><![CDATA[
    Used by join construction code to indicate the point at which a
    multi-valued join was attempted (if the caller wants to treat that
    exceptionally).
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="level"></argument>
</function>
<class name="Empty"></class>
<doc></doc>
</package>
<package name="django.db.models.aggregates" file="/django/db/models/aggregates.pyc"><doc><![CDATA[
Classes to represent the definitions of aggregate functions.
]]></doc>
<class name="Count"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Count]]></value>
</attribute>
<class name="Sum"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Sum]]></value>
</attribute>
<class name="Min"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Min]]></value>
</attribute>
<class name="Max"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Max]]></value>
</attribute>
<class name="StdDev"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[StdDev]]></value>
</attribute>
<class name="Variance"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Variance]]></value>
</attribute>
<class name="Aggregate"></class>
<doc><![CDATA[
    Default Aggregate definition.
    ]]></doc>
<attribute name="default_alias" type="property"><value><![CDATA[<property object at 0x90119b4>]]></value>
</attribute>
<function name="_default_alias"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add_to_query"><doc><![CDATA[Add the aggregate to the nominated query.

        This method is used to convert the generic Aggregate definition into a
        backend-specific definition.

         * query is the backend-specific query instance to which the aggregate
           is to be added.
         * col is a column reference describing the subject field
           of the aggregate. It can be an alias, or a tuple describing
           a table and column name.
         * source is the underlying field or aggregate definition for
           the column reference. If the aggregate is not an ordinal or
           computed type, this reference is used to determine the coerced
           output type of the aggregate.
         * is_summary is a boolean that is set True if the aggregate is a
           summary value rather than an annotation.
        ]]></doc>
<argument name="self"></argument>
<argument name="query"></argument>
<argument name="alias"></argument>
<argument name="col"></argument>
<argument name="source"></argument>
<argument name="is_summary"></argument>
</function>
<function name="__init__" kwargs="extra"><doc><![CDATA[Instantiate a new aggregate.

         * lookup is the field on which the aggregate operates.
         * extra is a dictionary of additional data to provide for the
           aggregate definition

        Also utilizes the class variables:
         * name, the identifier for this aggregate function.
        ]]></doc>
<argument name="self"></argument>
<argument name="lookup"></argument>
</function>
<class name="Avg"></class>
<doc></doc>
<attribute name="name" type="str"><value><![CDATA[Avg]]></value>
</attribute>
</package>
<package name="django.db.models.deletion" file="/django/db/models/deletion.pyc"><doc></doc>
<depends name="operator"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="wraps" module="django.utils.functional"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="attrgetter" module="operator"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="sql" type="module"><value><![CDATA[<module 'django.db.models.sql' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/__init__.pyc'>]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<function name="PROTECT"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="SET"><doc></doc>
<argument name="value"></argument>
</function>
<function name="SET_DEFAULT"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="force_managed"><doc></doc>
<argument name="func"></argument>
</function>
<function name="CASCADE"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="DO_NOTHING"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="SET_NULL"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<class name="ProtectedError"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
<argument name="protected_objects"></argument>
</function>
<class name="Collector"></class>
<doc></doc>
<function name="sort"><doc></doc>
<argument name="self"></argument>
</function>
<function name="instances_with_model"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add_field_update"><doc><![CDATA[
        Schedules a field update. 'objs' must be a homogenous iterable
        collection of model instances (e.g. a QuerySet).
        ]]></doc>
<argument name="self"></argument>
<argument name="field"></argument>
<argument name="value"></argument>
<argument name="objs"></argument>
</function>
<function name="add_batch"><doc><![CDATA[
        Schedules a batch delete. Every instance of 'model' that is related to
        an instance of 'obj' through 'field' will be deleted.
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="field"></argument>
<argument name="objs"></argument>
</function>
<function name="collect"><doc><![CDATA[
        Adds 'objs' to the collection of objects to be deleted as well as all
        parent instances.  'objs' must be a homogenous iterable collection of
        model instances (e.g. a QuerySet).  If 'collect_related' is True,
        related objects will be handled by their respective on_delete handler.

        If the call is the result of a cascade, 'source' should be the model
        that caused it and 'nullable' should be set to True, if the relation
        can be null.

        If 'reverse_dependency' is True, 'source' will be deleted before the
        current model, rather than after. (Needed for cascading to parent
        models, the one case in which the cascade follows the forwards
        direction of an FK rather than the reverse direction.)
        ]]></doc>
<argument name="self"></argument>
<argument name="objs"></argument>
<argument name="source" type="NoneType"><value></value>
</argument>
<argument name="nullable" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="collect_related" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="source_attr" type="NoneType"><value></value>
</argument>
<argument name="reverse_dependency" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add"><doc><![CDATA[
        Adds 'objs' to the collection of objects to be deleted.  If the call is
        the result of a cascade, 'source' should be the model that caused it,
        and 'nullable' should be set to True if the relation can be null.

        Returns a list of all objects that were not already collected.
        ]]></doc>
<argument name="self"></argument>
<argument name="objs"></argument>
<argument name="source" type="NoneType"><value></value>
</argument>
<argument name="nullable" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="reverse_dependency" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="related_objects"><doc><![CDATA[
        Gets a QuerySet of objects related to ``objs`` via the relation ``related``.

        ]]></doc>
<argument name="self"></argument>
<argument name="related"></argument>
<argument name="objs"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
<function name="delete" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.db.models.fields.subclassing" file="/django/db/models/fields/subclassing.pyc"><doc><![CDATA[
Convenience routines for creating non-trivial Field subclasses, as well as
backwards compatibility utilities.

Add SubfieldBase as the __metaclass__ for your Field subclass, implement
to_python() and the other necessary methods and everything will work seamlessly.
]]></doc>
<depends name="_warnings"></depends>
<depends name="inspect"></depends>
<import_attribute name="warn" type="builtin_function_or_method" module="_warnings"></import_attribute>
<import_function name="getargspec" module="inspect"></import_function>
<function name="call_with_connection_and_prepared"><doc></doc>
<argument name="func"></argument>
</function>
<function name="call_with_connection"><doc></doc>
<argument name="func"></argument>
</function>
<function name="make_contrib"><doc><![CDATA[
    Returns a suitable contribute_to_class() method for the Field subclass.

    If 'func' is passed in, it is the existing contribute_to_class() method on
    the subclass and it is called before anything else. It is assumed in this
    case that the existing contribute_to_class() calls all the necessary
    superclass methods.
    ]]></doc>
<argument name="superclass"></argument>
<argument name="func" type="NoneType"><value></value>
</argument>
</function>
<class name="LegacyConnection"></class>
<doc><![CDATA[
    A metaclass to normalize arguments give to the get_db_prep_* and db_type
    methods on fields.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9051534>]]></value>
</attribute>
<class name="Creator"></class>
<doc><![CDATA[
    A placeholder class that provides a way to set the attribute on the model.
    ]]></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="type" type="NoneType"><value></value>
</argument>
</function>
<class name="SubfieldBase"></class>
<doc><![CDATA[
    A metaclass for custom Field subclasses. This ensures the model's attribute
    has the descriptor protocol attached to it.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x905156c>]]></value>
</attribute>
</package>
<package name="django.db.models.signals" file="/django/db/models/signals.pyc"><doc></doc>
<import_attribute name="m2m_changed" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_syncdb" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_delete" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_save" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_init" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="class_prepared" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_save" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_init" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_delete" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.db.models.options" file="/django/db/models/options.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="_bisect"></depends>
<import_attribute name="app_cache_ready" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="bisect" type="builtin_function_or_method" module="_bisect"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="activate" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="deactivate_all" module="django.utils.translation"></import_function>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="string_concat" module="django.utils.translation"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="OrderWrt" module="django.db.models.fields.proxy"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="DEFAULT_NAMES" type="tuple"><value><![CDATA[('verbose_name', 'verbose_name_plural', 'db_table', 'ordering', 'unique_together', 'permissions', 'get_latest_by', 'order_with_respect_to', 'app_label', 'db_tablespace', 'abstract', 'managed', 'proxy', 'auto_created')]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<function name="get_verbose_name"><doc></doc>
<argument name="class_name"></argument>
</function>
<class name="Options"></class>
<doc></doc>
<attribute name="many_to_many" type="property"><value><![CDATA[<property object at 0x927a6e4>]]></value>
</attribute>
<attribute name="fields" type="property"><value><![CDATA[<property object at 0x927a6bc>]]></value>
</attribute>
<attribute name="verbose_name_raw" type="property"><value><![CDATA[<property object at 0x927a694>]]></value>
</attribute>
<function name="_fill_related_objects_cache"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_m2m_with_model"><doc><![CDATA[
        The many-to-many version of get_fields_with_model().
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_fill_m2m_cache"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_ordered_objects"><doc><![CDATA[Returns a list of Options objects that are ordered with respect to this object.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="meta"></argument>
<argument name="app_label" type="NoneType"><value></value>
</argument>
</function>
<function name="get_all_related_objects"><doc></doc>
<argument name="self"></argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="include_hidden" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="add_virtual_field"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="get_change_permission"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_fill_fields_cache"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_field"><doc><![CDATA[
        Returns the requested field by name. Raises FieldDoesNotExist on error.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="many_to_many" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_parent_list"><doc><![CDATA[
        Returns a list of all the ancestor of this model as a list. Useful for
        determining if something is an ancestor, regardless of lineage.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_fields_with_model"><doc><![CDATA[
        Returns a sequence of (field, model) pairs for all fields. The "model"
        element is None for fields on the current model. Mostly of use when
        constructing queries so that we know which model a field belongs to.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_delete_permission"><doc></doc>
<argument name="self"></argument>
</function>
<function name="setup_proxy"><doc><![CDATA[
        Does the internal setup so that the current model is a proxy for
        "target".
        ]]></doc>
<argument name="self"></argument>
<argument name="target"></argument>
</function>
<function name="get_all_related_m2m_objects_with_model"><doc><![CDATA[
        Returns a list of (related-m2m-object, model) pairs. Similar to
        get_fields_with_model().
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add_field"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="pk_index"><doc><![CDATA[
        Returns the index of the primary key field in the self.fields list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_all_field_names"><doc><![CDATA[
        Returns a list of all field names that are possible for this model
        (including reverse relation names). This is used for pretty printing
        debugging output (a list of choices), so any internal-only field names
        are not included.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_ancestor_link"><doc><![CDATA[
        Returns the field on the current model which points to the given
        "ancestor". This is possible an indirect link (a pointer to a parent
        model, which points, eventually, to the ancestor). Used when
        constructing table joins for model inheritance.

        Returns None if the model isn't an ancestor of this one.
        ]]></doc>
<argument name="self"></argument>
<argument name="ancestor"></argument>
</function>
<function name="_fill_related_many_to_many_cache"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_fields"><doc><![CDATA[
        The getter for self.fields. This returns the list of field objects
        available to this model (including through parent models).

        Callers are not permitted to modify this list, since it's a reference
        to this instance (not a copy).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_add_permission"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_all_related_many_to_many_objects"><doc></doc>
<argument name="self"></argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_prepare"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="get_base_chain"><doc><![CDATA[
        Returns a list of parent classes leading to 'model' (order from closet
        to most distant ancestor). This has to handle the case were 'model' is
        a granparent or even more distant relation.
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="setup_pk"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="init_name_map"><doc><![CDATA[
        Initialises the field name -> field object mapping.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_many_to_many"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_all_related_objects_with_model"><doc><![CDATA[
        Returns a list of (related-object, model) pairs. Similar to
        get_fields_with_model().
        ]]></doc>
<argument name="self"></argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="include_hidden" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_field_by_name"><doc><![CDATA[
        Returns the (field_object, model, direct, m2m), where field_object is
        the Field instance for the given name, model is the model containing
        this field (None for local fields), direct is True if the field exists
        on this model, and m2m is True for many-to-many relations. When
        'direct' is False, 'field_object' is the corresponding RelatedObject
        for this field (since the field doesn't have an instance associated
        with it).

        Uses a cache internally, so after the first access, this is very fast.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
</package>
<package name="django.db.models.fields.proxy" file="/django/db/models/fields/proxy.pyc"><doc><![CDATA[
Field-like classes that aren't really fields. It's easier to use objects that
have the same attributes as fields sometimes (avoids a lot of special casing).
]]></doc>
<attribute name="fields" type="module"><value><![CDATA[<module 'django.db.models.fields' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/__init__.pyc'>]]></value>
</attribute>
<class name="OrderWrt"></class>
<doc><![CDATA[
    A proxy for the _order database field that is used when
    Meta.order_with_respect_to is specified.
    ]]></doc>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.db.models.base" file="/django/db/models/base.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="types"></depends>
<depends name="itertools"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="register_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="add_lazy_relation" module="django.db.models.fields.related"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_class name="izip" module="itertools"></import_class>
<import_class name="ManyToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="DeferredAttribute" module="django.db.models.query_utils"></import_class>
<import_class name="OneToOneField" module="django.db.models.fields.related"></import_class>
<import_class name="MultipleObjectsReturned" module="django.core.exceptions"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="Options" module="django.db.models.options"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="OneToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<attribute name="validators" type="module"><value><![CDATA[<module 'django.core.validators' from '/usr/local/lib/python2.7/dist-packages/django/core/validators.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="types" type="module"><value><![CDATA[<module 'types' from '/usr/lib/python2.7/types.pyc'>]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="django" type="module"><value><![CDATA[<module 'django' from '/usr/local/lib/python2.7/dist-packages/django/__init__.pyc'>]]></value>
</attribute>
<function name="method_get_order"><doc></doc>
<argument name="ordered_obj"></argument>
<argument name="self"></argument>
</function>
<function name="method_set_order"><doc></doc>
<argument name="ordered_obj"></argument>
<argument name="self"></argument>
<argument name="id_list"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="simple_class_factory"><doc><![CDATA[Used to unpickle Models without deferred fields.

    We need to do this the hard way, rather than just using
    the default __reduce__ implementation, because of a
    __deepcopy__ problem in Python 2.4
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
</function>
<function name="get_absolute_url" args="args" kwargs="kwargs"><doc></doc>
<argument name="opts"></argument>
<argument name="func"></argument>
<argument name="self"></argument>
</function>
<function name="model_unpickle"><doc><![CDATA[
    Used to unpickle Model subclasses with deferred fields.
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
<argument name="factory"></argument>
</function>
<function name="subclass_exception"><doc></doc>
<argument name="name"></argument>
<argument name="parents"></argument>
<argument name="module"></argument>
</function>
<class name="Empty"></class>
<doc></doc>
<class name="ModelBase"></class>
<doc><![CDATA[
    Metaclass for all models.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9278bc4>]]></value>
</attribute>
<function name="_prepare"><doc><![CDATA[
        Creates some methods once self._meta has been populated.
        ]]></doc>
<argument name="cls"></argument>
</function>
<function name="copy_managers"><doc></doc>
<argument name="cls"></argument>
<argument name="base_managers"></argument>
</function>
<function name="add_to_class"><doc></doc>
<argument name="cls"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<class name="ModelState"></class>
<doc><![CDATA[
    A class for storing instance state
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="db" type="NoneType"><value></value>
</argument>
</function>
<class name="Model"></class>
<doc></doc>
<attribute name="pk" type="property"><value><![CDATA[<property object at 0x927a7ac>]]></value>
</attribute>
<attribute name="_deferred" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="_get_next_or_previous_in_order"><doc></doc>
<argument name="self"></argument>
<argument name="is_next"></argument>
</function>
<function name="__ne__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_perform_date_checks"><doc></doc>
<argument name="self"></argument>
<argument name="date_checks"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__reduce__"><doc><![CDATA[
        Provide pickling support. Normally, this just dispatches to Python's
        standard handling. However, for models with deferred field loading, we
        need to do things manually, as they're dynamically created classes and
        only module-level classes can be pickled by the default path.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_perform_unique_checks"><doc></doc>
<argument name="self"></argument>
<argument name="unique_checks"></argument>
</function>
<function name="prepare_database_save"><doc></doc>
<argument name="self"></argument>
<argument name="unused"></argument>
</function>
<function name="__hash__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="full_clean"><doc><![CDATA[
        Calls clean_fields, clean, and validate_unique, on the model,
        and raises a ``ValidationError`` for any errors that occured.
        ]]></doc>
<argument name="self"></argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="clean_fields"><doc><![CDATA[
        Cleans all fields and raises a ValidationError containing message_dict
        of all validation errors if any occur.
        ]]></doc>
<argument name="self"></argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="_set_pk_val"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_get_next_or_previous_by_FIELD" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
<argument name="is_next"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="unique_error_message"><doc></doc>
<argument name="self"></argument>
<argument name="model_class"></argument>
<argument name="unique_check"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="validate_unique"><doc><![CDATA[
        Checks unique constraints on the model and raises ``ValidationError``
        if any failed.
        ]]></doc>
<argument name="self"></argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_FIELD_display"><doc></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="date_error_message"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="field"></argument>
<argument name="unique_for"></argument>
</function>
<function name="save_base"><doc><![CDATA[
        Does the heavy-lifting involved in saving. Subclasses shouldn't need to
        override this method. It's separate from save() in order to hide the
        need for overrides of save() to pass around internal-only parameters
        ('raw', 'cls', and 'origin').
        ]]></doc>
<argument name="self"></argument>
<argument name="raw" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="cls" type="NoneType"><value></value>
</argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
<argument name="force_insert" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="force_update" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_unique_checks"><doc><![CDATA[
        Gather a list of checks to perform. Since validate_unique could be
        called from a ModelForm, some fields may have been excluded; we can't
        perform a unique check on a model that is missing fields involved
        in that check.
        Fields that did not validate should also be excluded, but they need
        to be passed in via the exclude argument.
        ]]></doc>
<argument name="self"></argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clean"><doc><![CDATA[
        Hook for doing any extra model-wide validation after clean() has been
        called on every field by self.clean_fields. Any ValidationError raised
        by this method will not be associated with a particular field; it will
        have a special-case association with the field defined by NON_FIELD_ERRORS.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_pk_val"><doc></doc>
<argument name="self"></argument>
<argument name="meta" type="NoneType"><value></value>
</argument>
</function>
<function name="save"><doc><![CDATA[
        Saves the current instance. Override this in a subclass if you want to
        control the saving process.

        The 'force_insert' and 'force_update' parameters can be used to insist
        that the "save" must be an SQL insert or update (or equivalent for
        non-SQL backends), respectively. Normally, they should not be set.
        ]]></doc>
<argument name="self"></argument>
<argument name="force_insert" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="force_update" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="serializable_value"><doc><![CDATA[
        Returns the value of the field name for this instance. If the field is
        a foreign key, returns the id value, instead of the object. If there's
        no Field object with this name on the model, the model attribute's
        value is returned directly.

        Used to serialize a field's value (in the serializer, or form output,
        for example). Normally, you would just access the attribute directly
        and not use this method.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
</function>
<class name="__metaclass__"></class>
<doc><![CDATA[
    Metaclass for all models.
    ]]></doc>
<attribute name="__new__" type="function"><value><![CDATA[<function __new__ at 0x9278bc4>]]></value>
</attribute>
<function name="_prepare"><doc><![CDATA[
        Creates some methods once self._meta has been populated.
        ]]></doc>
<argument name="cls"></argument>
</function>
<function name="copy_managers"><doc></doc>
<argument name="cls"></argument>
<argument name="base_managers"></argument>
</function>
<function name="add_to_class"><doc></doc>
<argument name="cls"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
</package>
<package name="django.db.models.fields.related" file="/django/db/models/fields/related.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="string_concat" module="django.utils.translation"></import_function>
<import_function name="CASCADE" module="django.db.models.deletion"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="IntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveIntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveSmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="RECURSIVE_RELATIONSHIP_CONSTANT" type="str"><value><![CDATA[self]]></value>
</attribute>
<attribute name="pending_lookups" type="dict"><value></value>
</attribute>
<attribute name="util" type="module"><value><![CDATA[<module 'django.db.backends.util' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/util.pyc'>]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="exceptions" type="module"><value><![CDATA[<module 'django.core.exceptions' from '/usr/local/lib/python2.7/dist-packages/django/core/exceptions.pyc'>]]></value>
</attribute>
<function name="add_lazy_relation"><doc><![CDATA[
    Adds a lookup on ``cls`` when a related field is defined using a string,
    i.e.::

        class MyModel(Model):
            fk = ForeignKey("AnotherModel")

    This string can be:

        * RECURSIVE_RELATIONSHIP_CONSTANT (i.e. "self") to indicate a recursive
          relation.

        * The name of a model (i.e "AnotherModel") to indicate another model in
          the same app.

        * An app-label and model name (i.e. "someapp.AnotherModel") to indicate
          another model in a different app.

    If the other model hasn't yet been loaded -- almost a given if you're using
    lazy relationships -- then the relation won't be set up until the
    class_prepared signal fires at the end of model initialization.

    operation is the work that must be performed once the relation can be resolved.
    ]]></doc>
<argument name="cls"></argument>
<argument name="field"></argument>
<argument name="relation"></argument>
<argument name="operation"></argument>
</function>
<function name="create_many_related_manager"><doc><![CDATA[Creates a manager that subclasses 'superclass' (which is a Manager)
    and adds behavior for many-to-many related objects.]]></doc>
<argument name="superclass"></argument>
<argument name="rel" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="create_many_to_many_intermediary_model"><doc></doc>
<argument name="field"></argument>
<argument name="klass"></argument>
</function>
<function name="do_pending_lookups" kwargs="kwargs"><doc><![CDATA[
    Handle any pending relations to the sending model. Sent from class_prepared.
    ]]></doc>
<argument name="sender"></argument>
</function>
<class name="ManyToOneRel"></class>
<doc></doc>
<function name="get_related_field"><doc><![CDATA[
        Returns the Field in the 'to' object to which this relationship is
        tied.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="is_hidden"><doc><![CDATA[Should the related object be hidden?]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
<argument name="field_name"></argument>
<argument name="related_name" type="NoneType"><value></value>
</argument>
<argument name="limit_choices_to" type="NoneType"><value></value>
</argument>
<argument name="parent_link" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="on_delete" type="NoneType"><value></value>
</argument>
</function>
<class name="ReverseManyRelatedObjectsDescriptor"></class>
<doc></doc>
<attribute name="through" type="property"><value><![CDATA[<property object at 0x92707d4>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="m2m_field"></argument>
</function>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="_through"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="instance_type" type="NoneType"><value></value>
</argument>
</function>
<class name="ManyToManyField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<function name="save_form_data"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="data"></argument>
</function>
<function name="_get_m2m_reverse_attr"><doc><![CDATA[Function that can be curried to provide the related accessor or DB column name for the m2m table]]></doc>
<argument name="self"></argument>
<argument name="related"></argument>
<argument name="attr"></argument>
</function>
<function name="_get_m2m_attr"><doc><![CDATA[Function that can be curried to provide the source accessor or DB column name for the m2m table]]></doc>
<argument name="self"></argument>
<argument name="related"></argument>
<argument name="attr"></argument>
</function>
<function name="set_attributes_from_rel"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_related_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="related"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="get_choices_default"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_from_object"><doc><![CDATA[Returns the value of this field in the given model instance.]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="value_to_string"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
</function>
<function name="_get_m2m_db_table"><doc><![CDATA[Function that can be curried to provide the m2m table name for this relation]]></doc>
<argument name="self"></argument>
<argument name="opts"></argument>
</function>
<class name="OneToOneField"></class>
<doc><![CDATA[
    A OneToOneField is essentially the same as a ForeignKey, with the exception
    that always carries a "unique" constraint with it and the reverse relation
    always returns the object pointed to (since there will only ever be one),
    rather than returning a list.
    ]]></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="save_form_data"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="data"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
<argument name="to_field" type="NoneType"><value></value>
</argument>
</function>
<function name="contribute_to_related_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="related"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="RelatedField"></class>
<doc></doc>
<function name="related_query_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_db_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
<argument name="connection"></argument>
<argument name="prepared" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="set_attributes_from_rel"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_pk_trace" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="prep_func"></argument>
<argument name="lookup_type"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="do_related_class"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
<argument name="cls"></argument>
</function>
<class name="ForeignKey"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x9272d6c>}]]></value>
</attribute>
<function name="get_attname"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_related_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="related"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="get_validator_unique_lookup_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="model_instance"></argument>
</function>
<function name="value_to_string"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
<argument name="to_field" type="NoneType"><value></value>
</argument>
<argument name="rel_class" type="type"><value><![CDATA[<class 'django.db.models.fields.related.ManyToOneRel'>]]></value>
</argument>
</function>
<function name="get_default"><doc><![CDATA[Here we check if the default value is an object and return the to_field if so.]]></doc>
<argument name="self"></argument>
</function>
<class name="ManyToManyRel"></class>
<doc></doc>
<function name="get_related_field"><doc><![CDATA[
        Returns the field in the to' object to which this relationship is tied
        (this is always the primary key on the target model). Provided for
        symmetry with ManyToOneRel.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="is_hidden"><doc><![CDATA[Should the related object be hidden?]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
<argument name="related_name" type="NoneType"><value></value>
</argument>
<argument name="limit_choices_to" type="NoneType"><value></value>
</argument>
<argument name="symmetrical" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="through" type="NoneType"><value></value>
</argument>
</function>
<class name="ReverseSingleRelatedObjectDescriptor"></class>
<doc></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field_with_rel"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="instance_type" type="NoneType"><value></value>
</argument>
</function>
<class name="OneToOneRel"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="to"></argument>
<argument name="field_name"></argument>
<argument name="related_name" type="NoneType"><value></value>
</argument>
<argument name="limit_choices_to" type="NoneType"><value></value>
</argument>
<argument name="parent_link" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="on_delete" type="NoneType"><value></value>
</argument>
</function>
<class name="ForeignRelatedObjectsDescriptor"></class>
<doc></doc>
<function name="create_manager"><doc><![CDATA[
        Creates the managers used by other methods (__get__() and delete()).
        ]]></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="superclass"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="instance_type" type="NoneType"><value></value>
</argument>
</function>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="related"></argument>
</function>
<function name="delete_manager"><doc><![CDATA[
        Returns a queryset based on the related model's base manager (rather
        than the default manager, as returned by __get__). Used by
        Model.delete().
        ]]></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
</function>
<class name="SingleRelatedObjectDescriptor"></class>
<doc></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="related"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="instance_type" type="NoneType"><value></value>
</argument>
</function>
<class name="ManyRelatedObjectsDescriptor"></class>
<doc></doc>
<function name="__set__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="related"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="instance_type" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.db.models.query_utils" file="/django/db/models/query_utils.pyc"><doc><![CDATA[
Various data structures used in query construction.

Factored out from django.db.models.query to avoid making the main module very
large and/or so that they can be used by other modules without getting into
circular import difficulties.
]]></doc>
<depends name="weakref"></depends>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<attribute name="util" type="module"><value><![CDATA[<module 'django.db.backends.util' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/util.pyc'>]]></value>
</attribute>
<attribute name="tree" type="module"><value><![CDATA[<module 'django.utils.tree' from '/usr/local/lib/python2.7/dist-packages/django/utils/tree.pyc'>]]></value>
</attribute>
<attribute name="weakref" type="module"><value><![CDATA[<module 'weakref' from '/usr/lib/python2.7/weakref.pyc'>]]></value>
</attribute>
<function name="deferred_class_factory"><doc><![CDATA[
    Returns a class object that is a copy of "model" with the specified "attrs"
    being replaced with DeferredAttribute objects. The "pk_value" ties the
    deferred attributes to a particular instance of the model.
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
</function>
<function name="select_related_descend"><doc><![CDATA[
    Returns True if this field should be used to descend deeper for
    select_related() purposes. Used by both the query construction code
    (sql.query.fill_related_selections()) and the model instance creation code
    (query.get_cached_row()).

    Arguments:
     * field - the field to be checked
     * restricted - a boolean field, indicating if the field list has been
       manually restricted using a requested clause)
     * requested - The select_related() dictionary.
     * reverse - boolean, True if we are checking a reverse select related
    ]]></doc>
<argument name="field"></argument>
<argument name="restricted"></argument>
<argument name="requested"></argument>
<argument name="reverse" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="QueryWrapper"></class>
<doc><![CDATA[
    A type that indicates the contents are an SQL fragment and the associate
    parameters. Can be used to pass opaque data to a where-clause, for example.
    ]]></doc>
<function name="as_sql"><doc></doc>
<argument name="self"></argument>
<argument name="qn" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="params"></argument>
</function>
<class name="Q"></class>
<doc><![CDATA[
    Encapsulates filters as objects that can then be combined logically (using
    & and |).
    ]]></doc>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="default" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
<function name="__invert__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__and__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_combine"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
<argument name="conn"></argument>
</function>
<function name="__or__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<class name="DeferredAttribute"></class>
<doc><![CDATA[
    A wrapper for a deferred-loading field. When the value is read from this
    object the first time, the query is executed.
    ]]></doc>
<function name="__set__"><doc><![CDATA[
        Deferred loading attributes can be set normally (which means there will
        never be a database lookup involved.
        ]]></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
<argument name="model"></argument>
</function>
<function name="__get__"><doc><![CDATA[
        Retrieves and caches the value from the datastore on the first lookup.
        Returns the cached value.
        ]]></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="owner"></argument>
</function>
<class name="InvalidQuery"></class>
<doc><![CDATA[
    The query passed to raw isn't a safe query to use with raw.
    ]]></doc>
</package>
<package name="django.db.models.fields" file="/django/db/models/fields/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="math"></depends>
<depends name="decimal"></depends>
<depends name="time"></depends>
<depends name="itertools"></depends>
<import_attribute name="tee" type="builtin_function_or_method" module="itertools"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="DictWrapper" module="django.utils.datastructures"></import_class>
<import_class name="LegacyConnection" module="django.db.models.fields.subclassing"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="validators" type="module"><value><![CDATA[<module 'django.core.validators' from '/usr/local/lib/python2.7/dist-packages/django/core/validators.pyc'>]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="math" type="module"><value><![CDATA[<module 'math' (built-in)>]]></value>
</attribute>
<attribute name="files" type="module"><value><![CDATA[<module 'django.db.models.fields.files' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/files.pyc'>]]></value>
</attribute>
<attribute name="subclassing" type="module"><value><![CDATA[<module 'django.db.models.fields.subclassing' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/subclassing.pyc'>]]></value>
</attribute>
<attribute name="related" type="module"><value><![CDATA[<module 'django.db.models.fields.related' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/related.pyc'>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<attribute name="BLANK_CHOICE_NONE" type="list"><value><![CDATA[[('', 'None')]]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<attribute name="ansi_date_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9099aa0>]]></value>
</attribute>
<attribute name="time" type="module"><value><![CDATA[<module 'time' (built-in)>]]></value>
</attribute>
<attribute name="exceptions" type="module"><value><![CDATA[<module 'django.core.exceptions' from '/usr/local/lib/python2.7/dist-packages/django/core/exceptions.pyc'>]]></value>
</attribute>
<attribute name="proxy" type="module"><value><![CDATA[<module 'django.db.models.fields.proxy' from '/usr/local/lib/python2.7/dist-packages/django/db/models/fields/proxy.pyc'>]]></value>
</attribute>
<class name="SmallIntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="EmailField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_validators" type="list"><value><![CDATA[[<django.core.validators.EmailValidator object at 0x90edb2c>]]]></value>
</attribute>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="DateField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_date': <django.utils.functional.__proxy__ object at 0x911e08c>, 'invalid': <django.utils.functional.__proxy__ object at 0x911e02c>}]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pre_save"><doc></doc>
<argument name="self"></argument>
<argument name="model_instance"></argument>
<argument name="add"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="value_to_string"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="auto_now" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auto_now_add" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="NOT_PROVIDED"></class>
<doc></doc>
<class name="SlugField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="FloatField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x911e5ac>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="TimeField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x912420c>}]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pre_save"><doc></doc>
<argument name="self"></argument>
<argument name="model_instance"></argument>
<argument name="add"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_to_string"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="auto_now" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auto_now_add" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="TextField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="IPAddressField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="XMLField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="schema_path" type="NoneType"><value></value>
</argument>
</function>
<class name="NullBooleanField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x911eb6c>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="CharField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="BooleanField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x9114d0c>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="DecimalField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x911e2cc>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="_format"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="format_number"><doc><![CDATA[
        Formats a number into a string with the requisite number of digits and
        decimal places.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="max_digits" type="NoneType"><value></value>
</argument>
<argument name="decimal_places" type="NoneType"><value></value>
</argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="PositiveSmallIntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="BigIntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="MAX_BIGINT" type="long"><value><![CDATA[9223372036854775807]]></value>
</attribute>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="FilePathField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="path" type="str"><value></value>
</argument>
<argument name="match" type="NoneType"><value></value>
</argument>
<argument name="recursive" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="IntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x911e70c>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_lookup"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="PositiveIntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="DateTimeField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x911e18c>}]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pre_save"><doc></doc>
<argument name="self"></argument>
<argument name="model_instance"></argument>
<argument name="add"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_to_string"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="AutoField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid': <django.utils.functional.__proxy__ object at 0x9114c2c>}]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="validate"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="model_instance"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="to_python"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="Field"></class>
<doc><![CDATA[Base class for all field types]]></doc>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_class name="__metaclass__" module="django.db.models.fields.subclassing"></import_class>
<attribute name="default_validators" type="list"><value></value>
</attribute>
<attribute name="choices" type="property"><value><![CDATA[<property object at 0x9119284>]]></value>
</attribute>
<attribute name="empty_strings_allowed" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="unique" type="property"><value><![CDATA[<property object at 0x910807c>]]></value>
</attribute>
<attribute name="creation_counter" type="int"><value><![CDATA[37]]></value>
</attribute>
<attribute name="description" type="property"><value><![CDATA[<property object at 0x90fd7ac>]]></value>
</attribute>
<attribute name="auto_creation_counter" type="int"><value><![CDATA[-11]]></value>
</attribute>
<attribute name="flatchoices" type="property"><value><![CDATA[<property object at 0x91192ac>]]></value>
</attribute>
<attribute name="default_error_messages" type="dict"><value><![CDATA[{'invalid_choice': <django.utils.functional.__proxy__ object at 0x910614c>, 'null': <django.utils.functional.__proxy__ object at 0x910622c>, 'blank': <django.utils.functional.__proxy__ object at 0x9114aac>}]]></value>
</attribute>
<function name="save_form_data"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="data"></argument>
</function>
<function name="_description"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_attname_column"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_choices_default"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_from_object"><doc><![CDATA[Returns the value of this field in the given model instance.]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="to_python"><doc><![CDATA[
        Converts the input value into the expected Python data type, raising
        django.core.exceptions.ValidationError if the data can't be converted.
        Returns the converted value. Subclasses should override this.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="primary_key" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="max_length" type="NoneType"><value></value>
</argument>
<argument name="unique" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="blank" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="null" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="db_index" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="rel" type="NoneType"><value></value>
</argument>
<argument name="default" type="classobj"><value><![CDATA[django.db.models.fields.NOT_PROVIDED]]></value>
</argument>
<argument name="editable" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="serialize" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="unique_for_date" type="NoneType"><value></value>
</argument>
<argument name="unique_for_month" type="NoneType"><value></value>
</argument>
<argument name="unique_for_year" type="NoneType"><value></value>
</argument>
<argument name="choices" type="NoneType"><value></value>
</argument>
<argument name="help_text" type="str"><value></value>
</argument>
<argument name="db_column" type="NoneType"><value></value>
</argument>
<argument name="db_tablespace" type="NoneType"><value></value>
</argument>
<argument name="auto_created" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="validators" type="list"><value></value>
</argument>
<argument name="error_messages" type="NoneType"><value></value>
</argument>
</function>
<function name="has_default"><doc><![CDATA[Returns a boolean of whether this field has a default value.]]></doc>
<argument name="self"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memodict"></argument>
</function>
<function name="get_attname"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_cache_name"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_prep_value"><doc><![CDATA[Perform preliminary non-db specific value checks and conversions.]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__cmp__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="get_choices"><doc><![CDATA[Returns choices with a default blank choices included, for use
        as SelectField choices for this field.]]></doc>
<argument name="self"></argument>
<argument name="include_blank" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="blank_choice" type="list"><value><![CDATA[[('', '---------')]]]></value>
</argument>
</function>
<function name="get_validator_unique_lookup_type"><doc></doc>
<argument name="self"></argument>
</function>
<function name="run_validators"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="_get_choices"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_flatchoices"><doc><![CDATA[Returns flattened choices with a default blank choice included.]]></doc>
<argument name="self"></argument>
<argument name="include_blank" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="blank_choice" type="list"><value><![CDATA[[('', '---------')]]]></value>
</argument>
</function>
<function name="_get_val_from_obj"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="pre_save"><doc><![CDATA[Returns field's value just before saving.]]></doc>
<argument name="self"></argument>
<argument name="model_instance"></argument>
<argument name="add"></argument>
</function>
<function name="set_attributes_from_name"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="validate"><doc><![CDATA[
        Validates value and throws ValidationError. Subclasses should override
        this to provide validation logic.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="model_instance"></argument>
</function>
<function name="value_to_string"><doc><![CDATA[
        Returns a string value of this field from the passed obj.
        This is used by the serialization framework.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="_get_flatchoices"><doc><![CDATA[Flattened version of choices tuple.]]></doc>
<argument name="self"></argument>
</function>
<function name="get_default"><doc><![CDATA[Returns the default value for this field.]]></doc>
<argument name="self"></argument>
</function>
<function name="bind"><doc></doc>
<argument name="self"></argument>
<argument name="fieldmapping"></argument>
<argument name="original"></argument>
<argument name="bound_field_class"></argument>
</function>
<function name="formfield" kwargs="kwargs"><doc><![CDATA[Returns a django.forms.Field instance for this database Field.]]></doc>
<argument name="self"></argument>
<argument name="form_class" type="type"><value><![CDATA[<class 'django.forms.fields.CharField'>]]></value>
</argument>
</function>
<function name="get_prep_lookup"><doc><![CDATA[Perform preliminary non-db specific lookup checks and conversions]]></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="value"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="cls"></argument>
<argument name="name"></argument>
</function>
<function name="clean"><doc><![CDATA[
        Convert the value's type and run validation. Validation errors from to_python
        and validate are propagated. The correct value is returned if no error is
        raised.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="model_instance"></argument>
</function>
<function name="get_internal_type"><doc></doc>
<argument name="self"></argument>
</function>
<class name="URLField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="verify_exists" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="CommaSeparatedIntegerField"></class>
<doc></doc>
<import_attribute name="description" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="get_db_prep_save" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_lookup" module="django.db.models.fields.subclassing"></import_function>
<import_function name="get_db_prep_value" module="django.db.models.fields.subclassing"></import_function>
<import_function name="db_type" module="django.db.models.fields.subclassing"></import_function>
<attribute name="default_validators" type="list"><value><![CDATA[[<django.core.validators.RegexValidator object at 0x90b48ec>]]]></value>
</attribute>
<function name="formfield" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="FieldDoesNotExist"></class>
<doc></doc>
</package>
<package name="django.db.models.loading" file="/django/db/models/loading.pyc"><doc><![CDATA[Utilities for loading models and the modules that contain them.]]></doc>
<depends name="threading"></depends>
<depends name="imp"></depends>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="module_has_submodule" module="django.utils.module_loading"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="app_cache_ready" type="instancemethod"><value><![CDATA[<bound method AppCache.app_cache_ready of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="load_app" type="instancemethod"><value><![CDATA[<bound method AppCache.load_app of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="get_models" type="instancemethod"><value><![CDATA[<bound method AppCache.get_models of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('get_apps', 'get_app', 'get_models', 'get_model', 'register_models', 'load_app', 'app_cache_ready')]]></value>
</attribute>
<attribute name="threading" type="module"><value><![CDATA[<module 'threading' from '/usr/lib/python2.7/threading.pyc'>]]></value>
</attribute>
<attribute name="cache" type="AppCache"><value><![CDATA[<django.db.models.loading.AppCache object at 0x9002bec>]]></value>
</attribute>
<attribute name="get_app_errors" type="instancemethod"><value><![CDATA[<bound method AppCache.get_app_errors of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="imp" type="module"><value><![CDATA[<module 'imp' (built-in)>]]></value>
</attribute>
<attribute name="get_apps" type="instancemethod"><value><![CDATA[<bound method AppCache.get_apps of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="register_models" type="instancemethod"><value><![CDATA[<bound method AppCache.register_models of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="get_app" type="instancemethod"><value><![CDATA[<bound method AppCache.get_app of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="get_model" type="instancemethod"><value><![CDATA[<bound method AppCache.get_model of <django.db.models.loading.AppCache object at 0x9002bec>>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="AppCache"></class>
<doc><![CDATA[
    A cache that stores installed applications and their models. Used to
    provide reverse-relations and for app introspection (e.g. admin).
    ]]></doc>
<attribute name="_AppCache__shared_state" type="dict"><value><![CDATA[{'_get_models_cache': {}, 'handled': {'docs': None, 'dox.harvester': None, 'drm': None}, 'app_store': {<module 'drm.models' from '/home/ice/kengine/ipython_ru/project/src/drm/models.pyc'>: 0, <module 'docs.models' from '/home/ice/kengine/ipython_ru/project/src/docs/models.pyc'>: 1}, 'write_lock': <_RLock owner=None count=0>, 'app_models': {'contenttypes': {'contenttype': <class 'django.contrib.contenttypes.models.ContentType'>}, 'auth': {'permission': <class 'django.contrib.auth.models.Permission'>, 'group_permissions': <class 'django.contrib.auth.models.Group_permissions'>, 'group': <class 'django.contrib.auth.models.Group'>, 'user_user_permissions': <class 'django.contrib.auth.models.User_user_permissions'>, 'user_groups': <class 'django.contrib.auth.models.User_groups'>, 'user': <class 'django.contrib.auth.models.User'>, 'message': <class 'django.contrib.auth.models.Message'>}, 'sites': {'site': <class 'django.contrib.sites.models.Site'>}, 'admin': {'logentry': <class 'django.contrib.admin.models.LogEntry'>}}, 'app_errors': {}, 'nesting_level': 0, 'loaded': True, 'postponed': []}]]></value>
</attribute>
<function name="_populate"><doc><![CDATA[
        Fill in all the cache information. This method is threadsafe, in the
        sense that every caller will see the same state upon return, and if the
        cache is already initialised, it does no work.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="app_cache_ready"><doc><![CDATA[
        Returns true if the model cache is fully populated.

        Useful for code that wants to cache the results of get_models() for
        themselves once it is safe to do so.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_app_errors"><doc><![CDATA[Returns the map of known problems with the INSTALLED_APPS.]]></doc>
<argument name="self"></argument>
</function>
<function name="get_apps"><doc><![CDATA[Returns a list of all installed modules that contain models.]]></doc>
<argument name="self"></argument>
</function>
<function name="load_app"><doc><![CDATA[
        Loads the app with the provided fully qualified name, and returns the
        model module.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_name"></argument>
<argument name="can_postpone" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_model"><doc><![CDATA[
        Returns the model matching the given app_label and case-insensitive
        model_name.

        Returns None if no model is found.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_label"></argument>
<argument name="model_name"></argument>
<argument name="seed_cache" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_models"><doc><![CDATA[
        Given a module containing models, returns a list of the models.
        Otherwise returns a list of all installed models.

        By default, auto-created models (i.e., m2m models without an
        explicit intermediate table) are not included. However, if you
        specify include_auto_created=True, they will be.

        By default, models created to satisfy deferred attribute
        queries are *not* included in the list of models. However, if
        you specify include_deferred, they will be.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_mod" type="NoneType"><value></value>
</argument>
<argument name="include_auto_created" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="include_deferred" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="register_models" args="models"><doc><![CDATA[
        Register a set of models as belonging to an app.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_label"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_app"><doc><![CDATA[
        Returns the module containing the models for the given app_label. If
        the app has no models in it and 'emptyOK' is True, returns None.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_label"></argument>
<argument name="emptyOK" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.db.models.expressions" file="/django/db/models/expressions.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<attribute name="tree" type="module"><value><![CDATA[<module 'django.utils.tree' from '/usr/local/lib/python2.7/dist-packages/django/utils/tree.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<class name="ExpressionNode"></class>
<doc><![CDATA[
    Base class for all query expressions.
    ]]></doc>
<attribute name="SUB" type="str"><value><![CDATA[-]]></value>
</attribute>
<attribute name="ADD" type="str"><value><![CDATA[+]]></value>
</attribute>
<attribute name="MUL" type="str"><value><![CDATA[*]]></value>
</attribute>
<attribute name="DIV" type="str"><value><![CDATA[/]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[&]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[|]]></value>
</attribute>
<attribute name="MOD" type="str"><value><![CDATA[%%]]></value>
</attribute>
<function name="evaluate"><doc></doc>
<argument name="self"></argument>
<argument name="evaluator"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="__ror__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__radd__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="prepare_database_save"><doc></doc>
<argument name="self"></argument>
<argument name="unused"></argument>
</function>
<function name="__and__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__rsub__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__or__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__add__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__rdiv__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__rmul__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__rmod__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="children" type="NoneType"><value></value>
</argument>
<argument name="connector" type="NoneType"><value></value>
</argument>
<argument name="negated" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__rand__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="prepare"><doc></doc>
<argument name="self"></argument>
<argument name="evaluator"></argument>
<argument name="query"></argument>
<argument name="allow_joins"></argument>
</function>
<function name="__mod__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__div__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_combine"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
<argument name="connector"></argument>
<argument name="reversed"></argument>
<argument name="node" type="NoneType"><value></value>
</argument>
</function>
<function name="__sub__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__mul__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<class name="F"></class>
<doc><![CDATA[
    An expression representing the value of the given field.
    ]]></doc>
<function name="prepare"><doc></doc>
<argument name="self"></argument>
<argument name="evaluator"></argument>
<argument name="query"></argument>
<argument name="allow_joins"></argument>
</function>
<function name="evaluate"><doc></doc>
<argument name="self"></argument>
<argument name="evaluator"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memodict"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="DateModifierNode"></class>
<doc><![CDATA[
    Node that implements the following syntax:
    filter(end_date__gt=F('start_date') + datetime.timedelta(days=3, seconds=200))

    which translates into:
    POSTGRES:
        WHERE end_date > (start_date + INTERVAL '3 days 200 seconds')

    MYSQL:
        WHERE end_date > (start_date + INTERVAL '3 0:0:200:0' DAY_MICROSECOND)

    ORACLE:
        WHERE end_date > (start_date + INTERVAL '3 00:03:20.000000' DAY(1) TO SECOND(6))

    SQLITE:
        WHERE end_date > django_format_dtdelta(start_date, "+" "3", "200", "0")
        (A custom function is used in order to preserve six digits of fractional
        second information on sqlite, and to format both date and datetime values.)

    Note that microsecond comparisons are not well supported with MySQL, since 
    MySQL does not store microsecond information.

    Only adding and subtracting timedeltas is supported, attempts to use other 
    operations raise a TypeError.
    ]]></doc>
<function name="evaluate"><doc></doc>
<argument name="self"></argument>
<argument name="evaluator"></argument>
<argument name="qn"></argument>
<argument name="connection"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="children"></argument>
<argument name="connector"></argument>
<argument name="negated" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.db.models.query" file="/django/db/models/query.pyc"><doc><![CDATA[
The main QuerySet implementation. This provides the public API for the ORM.
]]></doc>
<depends name="itertools"></depends>
<depends name="copy"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="deferred_class_factory" module="django.db.models.query_utils"></import_function>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="izip" module="itertools"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Aggregate" module="django.db.models.aggregates"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="InvalidQuery" module="django.db.models.query_utils"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<attribute name="ITER_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="REPR_OUTPUT_SIZE" type="int"><value><![CDATA[20]]></value>
</attribute>
<attribute name="sql" type="module"><value><![CDATA[<module 'django.db.models.sql' from '/usr/local/lib/python2.7/dist-packages/django/db/models/sql/__init__.pyc'>]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<function name="insert_query"><doc><![CDATA[
    Inserts a new record for the given model. This provides an interface to
    the InsertQuery class and is how Model.save() is implemented. It is not
    part of the public API.
    ]]></doc>
<argument name="model"></argument>
<argument name="values"></argument>
<argument name="return_id" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="raw_values" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="get_cached_row"><doc><![CDATA[
    Helper function that recursively returns an object with the specified
    related attributes already populated.

    This method may be called recursively to populate deep select_related()
    clauses.

    Arguments:
     * klass - the class to retrieve (and instantiate)
     * row - the row of data returned by the database cursor
     * index_start - the index of the row at which data for this
       object is known to start
     * using - the database alias on which the query is being executed.
     * max_depth - the maximum depth to which a select_related()
       relationship should be explored.
     * cur_depth - the current depth in the select_related() tree.
       Used in recursive calls to determin if we should dig deeper.
     * requested - A dictionary describing the select_related() tree
       that is to be retrieved. keys are field names; values are
       dictionaries describing the keys on that related object that
       are themselves to be select_related().
     * offset - the number of additional fields that are known to
       exist in `row` for `klass`. This usually means the number of
       annotated results on `klass`.
     * only_load - if the query has had only() or defer() applied,
       this is the list of field names that will be returned. If None,
       the full field list for `klass` can be assumed.
     * local_only - Only populate local fields. This is used when building
       following reverse select-related relations
    ]]></doc>
<argument name="klass"></argument>
<argument name="row"></argument>
<argument name="index_start"></argument>
<argument name="using"></argument>
<argument name="max_depth" type="int"><value></value>
</argument>
<argument name="cur_depth" type="int"><value></value>
</argument>
<argument name="requested" type="NoneType"><value></value>
</argument>
<argument name="offset" type="int"><value></value>
</argument>
<argument name="only_load" type="NoneType"><value></value>
</argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="QuerySet"></class>
<doc><![CDATA[
    Represents a lazy database lookup for a set of objects.
    ]]></doc>
<attribute name="ordered" type="property"><value><![CDATA[<property object at 0x901aa04>]]></value>
</attribute>
<attribute name="db" type="property"><value><![CDATA[<property object at 0x925166c>]]></value>
</attribute>
<attribute name="value_annotation" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="defer" args="fields"><doc><![CDATA[
        Defers the loading of data for certain fields until they are accessed.
        The set of fields to defer is added to any existing set of deferred
        fields. The only exception to this is if None is passed in as the only
        parameter, in which case all deferrals are removed (None acts as a
        reset option).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_update"><doc><![CDATA[
        A version of update that accepts field objects instead of field names.
        Used primarily for model saving and not intended for use by general
        code (it requires too much poking around at model internals to be
        useful at that level).
        ]]></doc>
<argument name="self"></argument>
<argument name="values"></argument>
</function>
<function name="_result_iter"><doc></doc>
<argument name="self"></argument>
</function>
<function name="iterator"><doc><![CDATA[
        An iterator over the results from applying this QuerySet to the
        database.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="extra"><doc><![CDATA[
        Adds extra SQL fragments to the query.
        ]]></doc>
<argument name="self"></argument>
<argument name="select" type="NoneType"><value></value>
</argument>
<argument name="where" type="NoneType"><value></value>
</argument>
<argument name="params" type="NoneType"><value></value>
</argument>
<argument name="tables" type="NoneType"><value></value>
</argument>
<argument name="order_by" type="NoneType"><value></value>
</argument>
<argument name="select_params" type="NoneType"><value></value>
</argument>
</function>
<function name="all"><doc><![CDATA[
        Returns a new QuerySet that is a copy of the current one. This allows a
        QuerySet to proxy for a model manager in some cases.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="annotate" args="args" kwargs="kwargs"><doc><![CDATA[
        Return a query set in which the returned objects have been annotated
        with data aggregated from related fields.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__and__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_fill_cache"><doc><![CDATA[
        Fills the result cache with 'num' more entries (or until the results
        iterator is exhausted).
        ]]></doc>
<argument name="self"></argument>
<argument name="num" type="NoneType"><value></value>
</argument>
</function>
<function name="_clone" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
<argument name="setup" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="exclude" args="args" kwargs="kwargs"><doc><![CDATA[
        Returns a new QuerySet instance with NOT (args) ANDed to the existing
        set.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="model" type="NoneType"><value></value>
</argument>
<argument name="query" type="NoneType"><value></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="order_by" args="field_names"><doc><![CDATA[
        Returns a new QuerySet instance with the ordering changed.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="exists"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__contains__"><doc></doc>
<argument name="self"></argument>
<argument name="val"></argument>
</function>
<function name="distinct"><doc><![CDATA[
        Returns a new QuerySet instance that will select only distinct results.
        ]]></doc>
<argument name="self"></argument>
<argument name="true_or_false" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="create" kwargs="kwargs"><doc><![CDATA[
        Creates a new object with the given kwargs, saving it to the database
        and returning the created object.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_merge_sanity_check"><doc><![CDATA[
        Checks that we are merging two comparable QuerySet classes. By default
        this does nothing, but see the ValuesQuerySet for an example of where
        it's useful.
        ]]></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="only" args="fields"><doc><![CDATA[
        Essentially, the opposite of defer. Only the fields passed into this
        method and that are not already specified as deferred are loaded
        immediately when the queryset is evaluated.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="select_related" args="fields" kwargs="kwargs"><doc><![CDATA[
        Returns a new QuerySet instance that will select related objects.

        If fields are specified, they must be ForeignKey fields and only those
        related objects are included in the selection.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__deepcopy__"><doc><![CDATA[
        Deep copy of a QuerySet doesn't populate the cache
        ]]></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="values_list" args="fields" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getstate__"><doc><![CDATA[
        Allows the QuerySet to be pickled.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__len__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__nonzero__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="dup_select_related"><doc><![CDATA[
        Copies the related selection status from the QuerySet 'other' to the
        current QuerySet.
        ]]></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[
        Retrieves an item or slice from the set of results.
        ]]></doc>
<argument name="self"></argument>
<argument name="k"></argument>
</function>
<function name="get" args="args" kwargs="kwargs"><doc><![CDATA[
        Performs the query and returns a single object matching the given
        keyword arguments.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_as_sql"><doc><![CDATA[
        Returns the internal query's SQL and parameters (as a tuple).
        ]]></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<function name="aggregate" args="args" kwargs="kwargs"><doc><![CDATA[
        Returns a dictionary containing the calculations (aggregation)
        over the current queryset

        If args is present the expression is passed as a kwarg using
        the Aggregate object's default alias.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="update" kwargs="kwargs"><doc><![CDATA[
        Updates all elements in the current QuerySet, setting all the given
        fields to the appropriate values.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__or__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="complex_filter"><doc><![CDATA[
        Returns a new QuerySet instance with filter_obj added to the filters.

        filter_obj can be a Q object (or anything with an add_to_query()
        method) or a dictionary of keyword lookup arguments.

        This exists to support framework features such as 'limit_choices_to',
        and usually it will be more natural to use other methods.
        ]]></doc>
<argument name="self"></argument>
<argument name="filter_obj"></argument>
</function>
<function name="_next_is_sticky"><doc><![CDATA[
        Indicates that the next filter call and the one following that should
        be treated as a single filter. This is only important when it comes to
        determining when to reuse tables for many-to-many filters. Required so
        that we can filter naturally on the results of related managers.

        This doesn't return a clone of the current QuerySet (it returns
        "self"). The method is only used internally and should be immediately
        followed by a filter() that does create a clone.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="using"><doc><![CDATA[
        Selects which database this QuerySet should excecute it's query against.
        ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<function name="count"><doc><![CDATA[
        Performs a SELECT COUNT() and returns the number of records as an
        integer.

        If the QuerySet is already fully cached this simply returns the length
        of the cached results set to avoid multiple SELECT COUNT(*) calls.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_setup_aggregate_query"><doc><![CDATA[
        Prepare the query for computing a result that contains aggregate annotations.
        ]]></doc>
<argument name="self"></argument>
<argument name="aggregates"></argument>
</function>
<function name="none"><doc><![CDATA[
        Returns an empty QuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_prepare"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reverse"><doc><![CDATA[
        Reverses the ordering of the QuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="dates"><doc><![CDATA[
        Returns a list of datetime objects representing all available dates for
        the given field_name, scoped to 'kind'.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name"></argument>
<argument name="kind"></argument>
<argument name="order" type="str"><value><![CDATA[ASC]]></value>
</argument>
</function>
<function name="filter" args="args" kwargs="kwargs"><doc><![CDATA[
        Returns a new QuerySet instance with the args ANDed to the existing
        set.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="in_bulk"><doc><![CDATA[
        Returns a dictionary mapping each of the given IDs to the object with
        that ID.
        ]]></doc>
<argument name="self"></argument>
<argument name="id_list"></argument>
</function>
<function name="values" args="fields"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_filter_or_exclude" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="negate"></argument>
</function>
<function name="get_or_create" kwargs="kwargs"><doc><![CDATA[
        Looks up an object with the given kwargs, creating one if necessary.
        Returns a tuple of (object, created), where created is a boolean
        specifying whether an object was created.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="latest"><doc><![CDATA[
        Returns the latest object, according to the model's 'get_latest_by'
        option or optional given field_name.
        ]]></doc>
<argument name="self"></argument>
<argument name="field_name" type="NoneType"><value></value>
</argument>
</function>
<function name="delete"><doc><![CDATA[
        Deletes the records in the current QuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="RawQuerySet"></class>
<doc><![CDATA[
    Provides an iterator which converts the results of raw SQL queries into
    annotated model instances.
    ]]></doc>
<attribute name="db" type="property"><value><![CDATA[<property object at 0x92517ac>]]></value>
</attribute>
<attribute name="model_fields" type="property"><value><![CDATA[<property object at 0x92517fc>]]></value>
</attribute>
<attribute name="columns" type="property"><value><![CDATA[<property object at 0x92517d4>]]></value>
</attribute>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="k"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="raw_query"></argument>
<argument name="model" type="NoneType"><value></value>
</argument>
<argument name="query" type="NoneType"><value></value>
</argument>
<argument name="params" type="NoneType"><value></value>
</argument>
<argument name="translations" type="NoneType"><value></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="using"><doc><![CDATA[
        Selects which database this Raw QuerySet should excecute it's query against.
        ]]></doc>
<argument name="self"></argument>
<argument name="alias"></argument>
</function>
<class name="DateQuerySet"></class>
<doc></doc>
<function name="_clone" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
<argument name="setup" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="iterator"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_setup_query"><doc><![CDATA[
        Sets up any special features of the query attribute.

        Called by the _clone() method after initializing the rest of the
        instance.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="ValuesListQuerySet"></class>
<doc></doc>
<function name="_clone" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="iterator"><doc></doc>
<argument name="self"></argument>
</function>
<class name="ValuesQuerySet"></class>
<doc></doc>
<function name="_setup_aggregate_query"><doc><![CDATA[
        Prepare the query for computing a result that contains aggregate annotations.
        ]]></doc>
<argument name="self"></argument>
<argument name="aggregates"></argument>
</function>
<function name="_prepare"><doc><![CDATA[
        Validates that we aren't trying to do a query like
        value__in=qs.values('value1', 'value2'), which isn't valid.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="iterator"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_as_sql"><doc><![CDATA[
        For ValueQuerySet (and subclasses like ValuesListQuerySet), they can
        only be used as nested queries if they're already set up to select only
        a single field (in which case, that is the field column that is
        returned). This differs from QuerySet.as_sql(), where the column to
        select is set up by Django.
        ]]></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
</function>
<function name="_merge_sanity_check"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="_setup_query"><doc><![CDATA[
        Constructs the field_names list that the values query will be
        retrieving.

        Called by the _clone() method after initializing the rest of the
        instance.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_clone" kwargs="kwargs"><doc><![CDATA[
        Cloning a ValuesQuerySet preserves the current fields.
        ]]></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
<argument name="setup" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="EmptyQuerySet"></class>
<doc></doc>
<attribute name="value_annotation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="iterator"><doc></doc>
<argument name="self"></argument>
</function>
<function name="extra"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
<argument name="select" type="NoneType"><value></value>
</argument>
<argument name="where" type="NoneType"><value></value>
</argument>
<argument name="params" type="NoneType"><value></value>
</argument>
<argument name="tables" type="NoneType"><value></value>
</argument>
<argument name="order_by" type="NoneType"><value></value>
</argument>
<argument name="select_params" type="NoneType"><value></value>
</argument>
</function>
<function name="all"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="update" kwargs="kwargs"><doc><![CDATA[
        Don't update anything.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="annotate" args="args" kwargs="kwargs"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_clone" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="klass" type="NoneType"><value></value>
</argument>
<argument name="setup" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__or__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="complex_filter"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
<argument name="filter_obj"></argument>
</function>
<function name="__and__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="exclude" args="args" kwargs="kwargs"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="model" type="NoneType"><value></value>
</argument>
<argument name="query" type="NoneType"><value></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="count"><doc></doc>
<argument name="self"></argument>
</function>
<function name="filter" args="args" kwargs="kwargs"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="order_by" args="field_names"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="reverse"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="distinct"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
<argument name="true_or_false" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="defer" args="fields"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="only" args="fields"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="select_related" args="fields" kwargs="kwargs"><doc><![CDATA[
        Always returns EmptyQuerySet.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.db.models.manager" file="/django/db/models/manager.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="insert_query" module="django.db.models.query"></import_function>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="EmptyQuerySet" module="django.db.models.query"></import_class>
<import_class name="RawQuerySet" module="django.db.models.query"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.db.models.signals' from '/usr/local/lib/python2.7/dist-packages/django/db/models/signals.pyc'>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<function name="ensure_default_manager" kwargs="kwargs"><doc><![CDATA[
    Ensures that a Model subclass contains a default manager  and sets the
    _default_manager attribute on the class. Also sets up the _base_manager
    points to a plain Manager instance (which could be the same as
    _default_manager if it's not a subclass of Manager).
    ]]></doc>
<argument name="sender"></argument>
</function>
<class name="ManagerDescriptor"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="manager"></argument>
</function>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="instance"></argument>
<argument name="type" type="NoneType"><value></value>
</argument>
</function>
<class name="Manager"></class>
<doc></doc>
<attribute name="creation_counter" type="int"><value><![CDATA[17]]></value>
</attribute>
<attribute name="db" type="property"><value><![CDATA[<property object at 0x925d694>]]></value>
</attribute>
<function name="defer" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_update" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="values"></argument>
</function>
<function name="iterator" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="extra" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="db_manager"><doc></doc>
<argument name="self"></argument>
<argument name="using"></argument>
</function>
<function name="all"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_copy_to_model"><doc><![CDATA[
        Makes a copy of the manager and assigns it to 'model', which should be
        a child of the existing model (used when inheriting a manager from an
        abstract base class).
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="raw" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="raw_query"></argument>
<argument name="params" type="NoneType"><value></value>
</argument>
</function>
<function name="exclude" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="order_by" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="exists" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="distinct" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="create" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="only" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="select_related" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="values_list" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_query_set"><doc><![CDATA[Returns a new QuerySet object.  Subclasses can override this method
        to easily customize the behavior of the Manager.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_empty_query_set"><doc></doc>
<argument name="self"></argument>
</function>
<function name="update" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="complex_filter" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="aggregate" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="using" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="count"><doc></doc>
<argument name="self"></argument>
</function>
<function name="annotate" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="none"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reverse" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="dates" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="filter" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contribute_to_class"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="name"></argument>
</function>
<function name="in_bulk" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="values" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_insert" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="values"></argument>
</function>
<function name="get_or_create" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_creation_counter"><doc><![CDATA[
        Sets the creation counter value for this instance and increments the
        class-level copy.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="latest" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="EmptyManager"></class>
<doc></doc>
<function name="get_query_set"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.db.backends.sqlite3.base" file="/django/db/backends/sqlite3/base.pyc"><doc><![CDATA[
SQLite3 backend for django.

Python 2.4 requires pysqlite2 (http://pysqlite.org/).

Python 2.5 and later can use a pysqlite2 module or the sqlite3 module in the
standard library.
]]></doc>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="pysqlite2.dbapi2"></depends>
<depends name="sys"></depends>
<depends name="thread"></depends>
<depends name="decimal"></depends>
<import_attribute name="connection_created" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="BaseDatabaseFeatures" module="django.db.backends"></import_class>
<import_class name="BaseDatabaseOperations" module="django.db.backends"></import_class>
<import_class name="BaseDatabaseIntrospection" module="django.db.backends"></import_class>
<import_class name="DatabaseCreation" module="django.db.backends.sqlite3.creation"></import_class>
<import_class name="BaseDatabaseValidation" module="django.db.backends"></import_class>
<import_class name="SafeString" module="django.utils.safestring"></import_class>
<import_class name="BaseDatabaseWrapper" module="django.db.backends"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="IntegrityError" module="pysqlite2.dbapi2"></import_class>
<import_class name="DatabaseIntrospection" module="django.db.backends.sqlite3.introspection"></import_class>
<import_class name="DatabaseClient" module="django.db.backends.sqlite3.client"></import_class>
<import_class name="TransactionManagementError" module="django.db.transaction"></import_class>
<import_class name="DatabaseError" module="pysqlite2.dbapi2"></import_class>
<import_class name="BaseDatabaseClient" module="django.db.backends"></import_class>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.db.utils' from '/usr/local/lib/python2.7/dist-packages/django/db/utils.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<attribute name="FORMAT_QMARK_REGEX" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x8f93f00>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="sqlite3" type="module"><value><![CDATA[<module 'django.db.backends.sqlite3' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/sqlite3/__init__.pyc'>]]></value>
</attribute>
<attribute name="Database" type="module"><value><![CDATA[<module 'pysqlite2.dbapi2' from '/usr/lib/python2.7/dist-packages/pysqlite2/dbapi2.pyc'>]]></value>
</attribute>
<attribute name="util" type="module"><value><![CDATA[<module 'django.db.backends.util' from '/usr/local/lib/python2.7/dist-packages/django/db/backends/util.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="thread" type="module"><value><![CDATA[<module 'thread' (built-in)>]]></value>
</attribute>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<function name="_sqlite_extract"><doc></doc>
<argument name="lookup_type"></argument>
<argument name="dt"></argument>
</function>
<function name="_sqlite_date_trunc"><doc></doc>
<argument name="lookup_type"></argument>
<argument name="dt"></argument>
</function>
<function name="_sqlite_regexp"><doc></doc>
<argument name="re_pattern"></argument>
<argument name="re_string"></argument>
</function>
<function name="_sqlite_format_dtdelta"><doc></doc>
<argument name="dt"></argument>
<argument name="conn"></argument>
<argument name="days"></argument>
<argument name="secs"></argument>
<argument name="usecs"></argument>
</function>
<class name="SQLiteCursorWrapper"></class>
<doc><![CDATA[
    Django uses "format" style placeholders, but pysqlite2 uses "qmark" style.
    This fixes it -- but note that if you want to use a literal "%s" in a query,
    you'll need to use "%%s".
    ]]></doc>
<function name="convert_query"><doc></doc>
<argument name="self"></argument>
<argument name="query"></argument>
</function>
<function name="executemany"><doc></doc>
<argument name="self"></argument>
<argument name="query"></argument>
<argument name="param_list"></argument>
</function>
<function name="execute"><doc></doc>
<argument name="self"></argument>
<argument name="query"></argument>
<argument name="params" type="tuple"><value></value>
</argument>
</function>
<class name="DatabaseWrapper"></class>
<doc></doc>
<attribute name="vendor" type="str"><value><![CDATA[sqlite]]></value>
</attribute>
<attribute name="operators" type="dict"><value><![CDATA[{'startswith': "LIKE %s ESCAPE '\\'", 'gt': '> %s', 'iendswith': "LIKE %s ESCAPE '\\'", 'icontains': "LIKE %s ESCAPE '\\'", 'iexact': "LIKE %s ESCAPE '\\'", 'endswith': "LIKE %s ESCAPE '\\'", 'exact': '= %s', 'regex': 'REGEXP %s', 'gte': '>= %s', 'iregex': "REGEXP '(?i)' || %s", 'contains': "LIKE %s ESCAPE '\\'", 'lt': '< %s', 'istartswith': "LIKE %s ESCAPE '\\'", 'lte': '<= %s'}]]></value>
</attribute>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_cursor"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="DatabaseFeatures"></class>
<doc></doc>
<attribute name="test_db_allows_multiple_connections" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_mixed_date_datetime_comparisons" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_unspecified_pk" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="can_use_chunked_reads" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="supports_1000_query_parameters" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="_supports_stddev"><doc><![CDATA[Confirm support for STDDEV and related stats functions

        SQLite supports STDDEV as an extension package; so
        connection.ops.check_aggregate_support() can't unilaterally
        rule out support for STDDEV. We need to manually check
        whether the call works.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="DatabaseOperations"></class>
<doc></doc>
<function name="date_interval_sql"><doc></doc>
<argument name="self"></argument>
<argument name="sql"></argument>
<argument name="connector"></argument>
<argument name="timedelta"></argument>
</function>
<function name="date_extract_sql"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="field_name"></argument>
</function>
<function name="quote_name"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="drop_foreignkey_sql"><doc></doc>
<argument name="self"></argument>
</function>
<function name="convert_values"><doc><![CDATA[SQLite returns floats when it should be returning decimals,
        and gets dates and datetimes wrong.
        For consistency with other backends, coerce when required.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="field"></argument>
</function>
<function name="no_limit_value"><doc></doc>
<argument name="self"></argument>
</function>
<function name="sql_flush"><doc></doc>
<argument name="self"></argument>
<argument name="style"></argument>
<argument name="tables"></argument>
<argument name="sequences"></argument>
</function>
<function name="pk_default_value"><doc></doc>
<argument name="self"></argument>
</function>
<function name="date_trunc_sql"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_type"></argument>
<argument name="field_name"></argument>
</function>
<function name="year_lookup_bounds"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
</package>
<package name="django.core" file="/django/core/__init__.pyc"><doc></doc>
<attribute name="files" type="module"><value><![CDATA[<module 'django.core.files' from '/usr/local/lib/python2.7/dist-packages/django/core/files/__init__.pyc'>]]></value>
</attribute>
<attribute name="management" type="module"><value><![CDATA[<module 'django.core.management' from '/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.pyc'>]]></value>
</attribute>
<attribute name="validators" type="module"><value><![CDATA[<module 'django.core.validators' from '/usr/local/lib/python2.7/dist-packages/django/core/validators.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.core.signals' from '/usr/local/lib/python2.7/dist-packages/django/core/signals.pyc'>]]></value>
</attribute>
<attribute name="cache" type="module"><value><![CDATA[<module 'django.core.cache' from '/usr/local/lib/python2.7/dist-packages/django/core/cache/__init__.pyc'>]]></value>
</attribute>
<attribute name="mail" type="module"><value><![CDATA[<module 'django.core.mail' from '/usr/local/lib/python2.7/dist-packages/django/core/mail/__init__.pyc'>]]></value>
</attribute>
<attribute name="exceptions" type="module"><value><![CDATA[<module 'django.core.exceptions' from '/usr/local/lib/python2.7/dist-packages/django/core/exceptions.pyc'>]]></value>
</attribute>
</package>
<package name="django.core.urlresolvers" file="/django/core/urlresolvers.pyc"><doc><![CDATA[
This module converts requested URLs to callback view functions.

RegexURLResolver is the main class here. Its resolve() method takes a URL (as
a string) and returns a tuple in this format:

    (view_function, function_args, function_kwargs)
]]></doc>
<depends name="re"></depends>
<depends name="thread"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="normalize" module="django.utils.regex_helper"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ViewDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="_prefixes" type="_local"><value><![CDATA[<thread._local object at 0x940fcec>]]></value>
</attribute>
<attribute name="_resolver_cache" type="dict"><value></value>
</attribute>
<attribute name="_urlconfs" type="_local"><value><![CDATA[<thread._local object at 0x940fd1c>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="_callable_cache" type="dict"><value></value>
</attribute>
<function name="get_callable" args="args"><doc><![CDATA[
    Convert a string version of a function name to the callable object.

    If the lookup_view is not an import path, it is assumed to be a URL pattern
    label and the original string is returned.

    If can_fail is True, lookup_view might be a URL pattern label, so errors
    during the import fail and the string is returned.
    ]]></doc>
</function>
<function name="get_resolver" args="args"><doc></doc>
</function>
<function name="get_urlconf"><doc><![CDATA[
    Returns the root URLconf to use for the current thread if it has been
    changed from the default one.
    ]]></doc>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="get_script_prefix"><doc><![CDATA[
    Returns the currently active script prefix. Useful for client code that
    wishes to construct their own URLs manually (although accessing the request
    instance is normally going to be a lot cleaner).
    ]]></doc>
</function>
<function name="reverse"><doc></doc>
<argument name="viewname"></argument>
<argument name="urlconf" type="NoneType"><value></value>
</argument>
<argument name="args" type="NoneType"><value></value>
</argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
</function>
<function name="clear_url_caches"><doc></doc>
</function>
<function name="resolve"><doc></doc>
<argument name="path"></argument>
<argument name="urlconf" type="NoneType"><value></value>
</argument>
</function>
<function name="get_mod_func"><doc></doc>
<argument name="callback"></argument>
</function>
<function name="set_urlconf"><doc><![CDATA[
    Sets the URLconf for the current thread (overriding the default one in
    settings). Set to None to revert back to the default.
    ]]></doc>
<argument name="urlconf_name"></argument>
</function>
<function name="set_script_prefix"><doc><![CDATA[
    Sets the script prefix for the current thread.
    ]]></doc>
<argument name="prefix"></argument>
</function>
<class name="RegexURLPattern"></class>
<doc></doc>
<attribute name="callback" type="property"><value><![CDATA[<property object at 0x958bb44>]]></value>
</attribute>
<function name="resolve"><doc></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<function name="_get_callback"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add_prefix"><doc><![CDATA[
        Adds the prefix string to a string-based callback.
        ]]></doc>
<argument name="self"></argument>
<argument name="prefix"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="regex"></argument>
<argument name="callback"></argument>
<argument name="default_args" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
</function>
<class name="NoReverseMatch"></class>
<doc></doc>
<attribute name="silent_variable_failure" type="bool"><value><![CDATA[True]]></value>
</attribute>
<class name="Resolver404"></class>
<doc></doc>
<class name="ResolverMatch"></class>
<doc></doc>
<attribute name="namespace" type="property"><value><![CDATA[<property object at 0x958b9dc>]]></value>
</attribute>
<attribute name="view_name" type="property"><value><![CDATA[<property object at 0x958ba04>]]></value>
</attribute>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="index"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
<argument name="url_name" type="NoneType"><value></value>
</argument>
<argument name="app_name" type="NoneType"><value></value>
</argument>
<argument name="namespaces" type="NoneType"><value></value>
</argument>
</function>
<class name="RegexURLResolver"></class>
<doc></doc>
<attribute name="reverse_dict" type="property"><value><![CDATA[<property object at 0x958bb94>]]></value>
</attribute>
<attribute name="app_dict" type="property"><value><![CDATA[<property object at 0x958bbe4>]]></value>
</attribute>
<attribute name="urlconf_module" type="property"><value><![CDATA[<property object at 0x958bc0c>]]></value>
</attribute>
<attribute name="namespace_dict" type="property"><value><![CDATA[<property object at 0x958bbbc>]]></value>
</attribute>
<attribute name="url_patterns" type="property"><value><![CDATA[<property object at 0x958bc34>]]></value>
</attribute>
<function name="_get_reverse_dict"><doc></doc>
<argument name="self"></argument>
</function>
<function name="resolve500"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_populate"><doc></doc>
<argument name="self"></argument>
</function>
<function name="resolve404"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="regex"></argument>
<argument name="urlconf_name"></argument>
<argument name="default_kwargs" type="NoneType"><value></value>
</argument>
<argument name="app_name" type="NoneType"><value></value>
</argument>
<argument name="namespace" type="NoneType"><value></value>
</argument>
</function>
<function name="_resolve_special"><doc></doc>
<argument name="self"></argument>
<argument name="view_type"></argument>
</function>
<function name="resolve"><doc></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<function name="reverse" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="lookup_view"></argument>
</function>
<function name="_get_app_dict"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_url_patterns"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_namespace_dict"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_urlconf_module"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.xheaders" file="/django/core/xheaders.pyc"><doc><![CDATA[
Pages in Django can are served up with custom HTTP headers containing useful
information about those pages -- namely, the content type and object ID.

This module contains utility functions for retrieving and doing interesting
things with these special "X-Headers" (so called because the HTTP spec demands
that custom headers are prefixed with "X-").

Next time you're at slashdot.org, watch out for X-Fry and X-Bender. :)
]]></doc>
<function name="populate_xheaders"><doc><![CDATA[
    Adds the "X-Object-Type" and "X-Object-Id" headers to the given
    HttpResponse according to the given model and object_id -- but only if the
    given HttpRequest object has an IP address within the INTERNAL_IPS setting
    or if the request is from a logged in staff member.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
<argument name="model"></argument>
<argument name="object_id"></argument>
</function>
</package>
<package name="django.core.template_loader" file="/django/core/template_loader.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="make_origin" module="django.template.loader"></import_function>
<import_function name="find_template_loader" module="django.template.loader"></import_function>
<import_function name="find_template" module="django.template.loader"></import_function>
<import_function name="get_template" module="django.template.loader"></import_function>
<import_function name="get_template_from_string" module="django.template.loader"></import_function>
<import_function name="select_template" module="django.template.loader"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="render_to_string" module="django.template.loader"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_function name="find_template_source" module="django.template.loader"></import_function>
<import_class name="BaseLoader" module="django.template.loader"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="LoaderOrigin" module="django.template.loader"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="template_source_loaders" type="NoneType"><value></value>
</attribute>
</package>
<package name="django.template.context" file="/django/template/context.pyc"><doc></doc>
<depends name="copy"></depends>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="HttpRequest" module="django.http"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="_standard_context_processors" type="NoneType"><value></value>
</attribute>
<attribute name="_builtin_context_processors" type="tuple"><value><![CDATA[('django.core.context_processors.csrf',)]]></value>
</attribute>
<function name="get_standard_processors"><doc></doc>
</function>
<class name="ContextPopException"></class>
<doc><![CDATA[pop() has been called more times than push()]]></doc>
<class name="RequestContext"></class>
<doc><![CDATA[
    This subclass of template.Context automatically populates itself using
    the processors defined in TEMPLATE_CONTEXT_PROCESSORS.
    Additional processors can be specified as a list of callables
    using the "processors" keyword argument.
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="dict" type="NoneType"><value></value>
</argument>
<argument name="processors" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseContext"></class>
<doc></doc>
<function name="__delitem__"><doc><![CDATA[Delete a variable from the current context]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__getitem__"><doc><![CDATA[Get a variable's value, starting at the current context and going upward]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__contains__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="otherwise" type="NoneType"><value></value>
</argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pop"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__setitem__"><doc><![CDATA[Set a variable in the current context]]></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_reset_dicts"><doc></doc>
<argument name="self"></argument>
<argument name="value" type="NoneType"><value></value>
</argument>
</function>
<function name="push"><doc></doc>
<argument name="self"></argument>
</function>
<function name="new"><doc><![CDATA[
        Returns a new context with the same properties, but with only the
        values given in 'values' stored.
        ]]></doc>
<argument name="self"></argument>
<argument name="values" type="NoneType"><value></value>
</argument>
</function>
<function name="__copy__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="dict_" type="NoneType"><value></value>
</argument>
</function>
<class name="Context"></class>
<doc><![CDATA[A stack container for variable context]]></doc>
<function name="__copy__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="dict_" type="NoneType"><value></value>
</argument>
<argument name="autoescape" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="update"><doc><![CDATA[Pushes other_dict to the stack of dictionaries in the Context]]></doc>
<argument name="self"></argument>
<argument name="other_dict"></argument>
</function>
<class name="RenderContext"></class>
<doc><![CDATA[
    A stack container for storing Template state.

    RenderContext simplifies the implementation of template Nodes by providing a
    safe place to store state between invocations of a node's `render` method.

    The RenderContext also provides scoping rules that are more sensible for
    'template local' variables. The render context stack is pushed before each
    template is rendered, creating a fresh scope with nothing in it. Name
    resolution fails if a variable is not found at the top of the RequestContext
    stack. Thus, variables are local to a specific template and don't affect the
    rendering of other templates as they would if they were stored in the normal
    template context.
    ]]></doc>
<function name="has_key"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
<argument name="otherwise" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.template.base" file="/django/template/base.pyc"><doc></doc>
<depends name="imp"></depends>
<depends name="re"></depends>
<depends name="inspect"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="mark_for_escaping" module="django.utils.safestring"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="localize" module="django.utils.formats"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_split" module="django.utils.text"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="is_iterable" module="django.utils.itercompat"></import_function>
<import_function name="module_has_submodule" module="django.utils.module_loading"></import_function>
<import_function name="getargspec" module="inspect"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="unescape_string_literal" module="django.utils.text"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="EscapeData" module="django.utils.safestring"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="ContextPopException" module="django.template.context"></import_class>
<import_class name="Promise" module="django.utils.functional"></import_class>
<attribute name="TOKEN_VAR" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="FILTER_SEPARATOR" type="str"><value><![CDATA[|]]></value>
</attribute>
<attribute name="FILTER_ARGUMENT_SEPARATOR" type="str"><value><![CDATA[:]]></value>
</attribute>
<attribute name="TRANSLATOR_COMMENT_MARK" type="str"><value><![CDATA[Translators]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="constant_string" type="str"><value><![CDATA[(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')]]></value>
</attribute>
<attribute name="TOKEN_COMMENT" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="builtins" type="list"><value><![CDATA[[<django.template.base.Library object at 0x95b780c>, <django.template.base.Library object at 0x95bca8c>, <django.template.base.Library object at 0x95e774c>]]]></value>
</attribute>
<attribute name="imp" type="module"><value><![CDATA[<module 'imp' (built-in)>]]></value>
</attribute>
<attribute name="VARIABLE_ATTRIBUTE_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="libraries" type="dict"><value></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="TOKEN_TEXT" type="int"><value></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="invalid_var_format_string" type="NoneType"><value></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="ALLOWED_VARIABLE_CHARS" type="str"><value><![CDATA[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.]]></value>
</attribute>
<attribute name="filter_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x95d4168>]]></value>
</attribute>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x95cd6e0>]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="UNKNOWN_SOURCE" type="str"><value><![CDATA[<unknown source>]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="TOKEN_BLOCK" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="templatetags_modules" type="list"><value></value>
</attribute>
<attribute name="filter_raw_string" type="str"><value><![CDATA[
^(?P<constant>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
^(?P<var>[\w\.]+|[-+\.]?\d[\d\.e]*)|
 (?:\|
     (?P<filter_name>\w+)
         (?:\:
             (?:
              (?P<constant_arg>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
              (?P<var_arg>[\w\.]+|[-+\.]?\d[\d\.e]*)
             )
         )?
 )]]></value>
</attribute>
<function name="get_library"><doc><![CDATA[
    Load the template library module with the given name.

    If library is not already loaded loop over all templatetags modules to locate it.

    {% load somelib %} and {% load someotherlib %} loops twice.

    Subsequent loads eg. {% load somelib %} in the same process will grab the cached
    module from libraries.
    ]]></doc>
<argument name="library_name"></argument>
</function>
<function name="resolve_variable"><doc><![CDATA[
    Returns the resolved variable, which may contain attribute syntax, within
    the given context.

    Deprecated; use the Variable class instead.
    ]]></doc>
<argument name="path"></argument>
<argument name="context"></argument>
</function>
<function name="generic_tag_compiler"><doc><![CDATA[Returns a template.Node subclass.]]></doc>
<argument name="params"></argument>
<argument name="defaults"></argument>
<argument name="name"></argument>
<argument name="node_class"></argument>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="_render_value_in_context"><doc><![CDATA[
    Converts any value to a string to become part of a rendered template. This
    means escaping, if required, and conversion to a unicode object. If value
    is a string, it is expected to have already been translated.
    ]]></doc>
<argument name="value"></argument>
<argument name="context"></argument>
</function>
<function name="import_library"><doc><![CDATA[Load a template tag library module.

    Verifies that the library contains a 'register' attribute, and
    returns that attribute as the representation of the library
    ]]></doc>
<argument name="taglib_module"></argument>
</function>
<function name="compile_string"><doc><![CDATA[Compiles template_string into NodeList ready for rendering]]></doc>
<argument name="template_string"></argument>
<argument name="origin"></argument>
</function>
<function name="get_templatetags_modules"><doc><![CDATA[Return the list of all available template tag modules.

    Caches the result for faster access.
    ]]></doc>
</function>
<function name="add_to_builtins"><doc></doc>
<argument name="module"></argument>
</function>
<class name="NodeList"></class>
<doc></doc>
<attribute name="contains_nontext" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="get_nodes_by_type"><doc><![CDATA[Return a list of all nodes of the given type]]></doc>
<argument name="self"></argument>
<argument name="nodetype"></argument>
</function>
<function name="render_node"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="context"></argument>
</function>
<class name="InvalidTemplateLibrary"></class>
<doc></doc>
<class name="Node"></class>
<doc></doc>
<attribute name="child_nodelists" type="tuple"><value><![CDATA[('nodelist',)]]></value>
</attribute>
<attribute name="must_be_first" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_nodes_by_type"><doc><![CDATA[Return a list of all nodes (within this node and its nodelist) of the given type]]></doc>
<argument name="self"></argument>
<argument name="nodetype"></argument>
</function>
<function name="render"><doc><![CDATA[Return the node rendered as a string]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="Template"></class>
<doc></doc>
<function name="render"><doc><![CDATA[Display stage -- can be called many times]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="_render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="template_string"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
<argument name="name" type="str"><value><![CDATA[<Unknown Template>]]></value>
</argument>
</function>
<class name="FilterExpression"></class>
<doc><![CDATA[
    Parses a variable token and its optional filters (all as a single string),
    and return a list of tuples of the filter name and arguments.
    Sample:
        >>> token = 'variable|default:"Default value"|date:"Y-m-d"'
        >>> p = Parser('')
        >>> fe = FilterExpression(token, p)
        >>> len(fe.filters)
        2
        >>> fe.var
        <Variable: 'variable'>

    This class should never be instantiated outside of the
    get_filters_from_token helper function.
    ]]></doc>
<attribute name="args_check" type="function"><value><![CDATA[<function args_check at 0x95a2ca4>]]></value>
</attribute>
<function name="resolve"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
<argument name="ignore_failures" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="parser"></argument>
</function>
<class name="TemplateSyntaxError"></class>
<doc></doc>
<class name="VariableDoesNotExist"></class>
<doc></doc>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
<argument name="params" type="tuple"><value></value>
</argument>
</function>
<class name="Variable"></class>
<doc><![CDATA[
    A template variable, resolvable against a given context. The variable may be
    a hard-coded string (if it begins and ends with single or double quote
    marks)::

        >>> c = {'article': {'section':u'News'}}
        >>> Variable('article.section').resolve(c)
        u'News'
        >>> Variable('article').resolve(c)
        {'section': u'News'}
        >>> class AClass: pass
        >>> c = AClass()
        >>> c.article = AClass()
        >>> c.article.section = u'News'

    (The example assumes VARIABLE_ATTRIBUTE_SEPARATOR is '.')
    ]]></doc>
<function name="resolve"><doc><![CDATA[Resolve this variable against a given context.]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_resolve_lookup"><doc><![CDATA[
        Performs resolution of a real variable (i.e. not a literal) against the
        given context.

        As indicated by the method's name, this method is an implementation
        detail and shouldn't be called by external code. Use Variable.resolve()
        instead.
        ]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="var"></argument>
</function>
<class name="TemplateEncodingError"></class>
<doc></doc>
<class name="TextNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="s"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="Parser"></class>
<doc></doc>
<function name="empty_variable"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
</function>
<function name="enter_command"><doc></doc>
<argument name="self"></argument>
<argument name="command"></argument>
<argument name="token"></argument>
</function>
<function name="delete_first_token"><doc></doc>
<argument name="self"></argument>
</function>
<function name="compile_function_error"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="e"></argument>
</function>
<function name="empty_block_tag"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
</function>
<function name="parse"><doc></doc>
<argument name="self"></argument>
<argument name="parse_until" type="NoneType"><value></value>
</argument>
</function>
<function name="extend_nodelist"><doc></doc>
<argument name="self"></argument>
<argument name="nodelist"></argument>
<argument name="node"></argument>
<argument name="token"></argument>
</function>
<function name="prepend_token"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="tokens"></argument>
</function>
<function name="next_token"><doc></doc>
<argument name="self"></argument>
</function>
<function name="exit_command"><doc></doc>
<argument name="self"></argument>
</function>
<function name="invalid_block_tag"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="command"></argument>
<argument name="parse_until" type="NoneType"><value></value>
</argument>
</function>
<function name="skip_past"><doc></doc>
<argument name="self"></argument>
<argument name="endtag"></argument>
</function>
<function name="compile_filter"><doc><![CDATA[Convenient wrapper for FilterExpression]]></doc>
<argument name="self"></argument>
<argument name="token"></argument>
</function>
<function name="create_nodelist"><doc></doc>
<argument name="self"></argument>
</function>
<function name="unclosed_block_tag"><doc></doc>
<argument name="self"></argument>
<argument name="parse_until"></argument>
</function>
<function name="add_library"><doc></doc>
<argument name="self"></argument>
<argument name="lib"></argument>
</function>
<function name="find_filter"><doc></doc>
<argument name="self"></argument>
<argument name="filter_name"></argument>
</function>
<function name="create_variable_node"><doc></doc>
<argument name="self"></argument>
<argument name="filter_expression"></argument>
</function>
<function name="error"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="msg"></argument>
</function>
<class name="Origin"></class>
<doc></doc>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="reload"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="Lexer"></class>
<doc></doc>
<function name="create_token"><doc><![CDATA[
        Convert the given token string into a new Token object and return it.
        If in_tag is True, we are processing something that matched a tag,
        otherwise it should be treated as a literal string.
        ]]></doc>
<argument name="self"></argument>
<argument name="token_string"></argument>
<argument name="in_tag"></argument>
</function>
<function name="tokenize"><doc><![CDATA[Return a list of tokens from a given template_string.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="template_string"></argument>
<argument name="origin"></argument>
</function>
<class name="Token"></class>
<doc></doc>
<function name="split_contents"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="token_type"></argument>
<argument name="contents"></argument>
</function>
<class name="StringOrigin"></class>
<doc></doc>
<function name="reload"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="source"></argument>
</function>
<class name="VariableNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="filter_expression"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="TemplateDoesNotExist"></class>
<doc></doc>
<class name="Library"></class>
<doc></doc>
<function name="tag_function"><doc></doc>
<argument name="self"></argument>
<argument name="func"></argument>
</function>
<function name="inclusion_tag"><doc></doc>
<argument name="self"></argument>
<argument name="file_name"></argument>
<argument name="context_class" type="type"><value><![CDATA[<class 'django.template.context.Context'>]]></value>
</argument>
<argument name="takes_context" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="filter_function"><doc></doc>
<argument name="self"></argument>
<argument name="func"></argument>
</function>
<function name="simple_tag"><doc></doc>
<argument name="self"></argument>
<argument name="func" type="NoneType"><value></value>
</argument>
<argument name="takes_context" type="NoneType"><value></value>
</argument>
</function>
<function name="filter"><doc></doc>
<argument name="self"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="filter_func" type="NoneType"><value></value>
</argument>
</function>
<function name="tag"><doc></doc>
<argument name="self"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="compile_function" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="TokenParser"></class>
<doc><![CDATA[
    Subclass this and implement the top() method to parse a template line. When
    instantiating the parser, pass in the line from the Django template parser.

    The parser's "tagname" instance-variable stores the name of the tag that
    the filter was called with.
    ]]></doc>
<function name="top"><doc><![CDATA[Overload this method to do the actual parsing and return the result.]]></doc>
<argument name="self"></argument>
</function>
<function name="back"><doc><![CDATA[Undoes the last microparser. Use this for lookahead and backtracking.]]></doc>
<argument name="self"></argument>
</function>
<function name="value"><doc><![CDATA[A microparser that parses for a value: some string constant or variable name.]]></doc>
<argument name="self"></argument>
</function>
<function name="tag"><doc><![CDATA[A microparser that just returns the next tag from the line.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="subject"></argument>
</function>
<function name="more"><doc><![CDATA[Returns True if there is more stuff in the tag.]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.template.loader" file="/django/template/loader.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="template_source_loaders" type="NoneType"><value></value>
</attribute>
<function name="make_origin"><doc></doc>
<argument name="display_name"></argument>
<argument name="loader"></argument>
<argument name="name"></argument>
<argument name="dirs"></argument>
</function>
<function name="find_template_loader"><doc></doc>
<argument name="loader"></argument>
</function>
<function name="find_template"><doc></doc>
<argument name="name"></argument>
<argument name="dirs" type="NoneType"><value></value>
</argument>
</function>
<function name="get_template"><doc><![CDATA[
    Returns a compiled Template object for the given template name,
    handling template inheritance recursively.
    ]]></doc>
<argument name="template_name"></argument>
</function>
<function name="get_template_from_string"><doc><![CDATA[
    Returns a compiled Template object for the given template code,
    handling template inheritance recursively.
    ]]></doc>
<argument name="source"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
</function>
<function name="select_template"><doc><![CDATA[Given a list of template names, returns the first that can be loaded.]]></doc>
<argument name="template_name_list"></argument>
</function>
<function name="render_to_string"><doc><![CDATA[
    Loads the given template_name and renders it with the given dictionary as
    context. The template_name may be a string to load a single template using
    get_template, or it may be a tuple to use select_template to find one of
    the templates in the list. Returns a string.
    ]]></doc>
<argument name="template_name"></argument>
<argument name="dictionary" type="NoneType"><value></value>
</argument>
<argument name="context_instance" type="NoneType"><value></value>
</argument>
</function>
<function name="find_template_source"><doc></doc>
<argument name="name"></argument>
<argument name="dirs" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseLoader"></class>
<doc></doc>
<attribute name="is_usable" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="reset"><doc><![CDATA[
        Resets any state maintained by the loader instance (e.g., cached
        templates or cached loader modules).

        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="template_name"></argument>
<argument name="template_dirs" type="NoneType"><value></value>
</argument>
</function>
<function name="load_template_source"><doc><![CDATA[
        Returns a tuple containing the source and origin for the given template
        name.

        ]]></doc>
<argument name="self"></argument>
<argument name="template_name"></argument>
<argument name="template_dirs" type="NoneType"><value></value>
</argument>
</function>
<function name="load_template"><doc></doc>
<argument name="self"></argument>
<argument name="template_name"></argument>
<argument name="template_dirs" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="LoaderOrigin"></class>
<doc></doc>
<function name="reload"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="display_name"></argument>
<argument name="loader"></argument>
<argument name="name"></argument>
<argument name="dirs"></argument>
</function>
</package>
<package name="django.core.context_processors" file="/django/core/context_processors.pyc"><doc><![CDATA[
A set of request processors that return dictionaries to be merged into a
template context. Each function takes the request object as its only parameter
and returns a dictionary to add to the context.

These are referenced from the setting TEMPLATE_CONTEXT_PROCESSORS and used by
RequestContext.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="get_token" module="django.middleware.csrf"></import_function>
<import_class name="RealPermWrapper" module="django.contrib.auth.context_processors"></import_class>
<import_class name="RealPermLookupDict" module="django.contrib.auth.context_processors"></import_class>
<function name="media"><doc><![CDATA[
    Adds media-related context variables to the context.

    ]]></doc>
<argument name="request"></argument>
</function>
<function name="request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="auth"><doc><![CDATA[
    DEPRECATED. This context processor is the old location, and has been moved
    to `django.contrib.auth.context_processors`.

    This function still exists for backwards-compatibility; it will be removed
    in Django 1.4.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="i18n"><doc></doc>
<argument name="request"></argument>
</function>
<function name="static"><doc><![CDATA[
    Adds static-related context variables to the context.

    ]]></doc>
<argument name="request"></argument>
</function>
<function name="csrf"><doc><![CDATA[
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if
    it has not been provided by either a view decorator or the middleware
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="debug"><doc><![CDATA[Returns context variables helpful for debugging.]]></doc>
<argument name="request"></argument>
</function>
<class name="PermWrapper"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="PermLookupDict"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.middleware.csrf" file="/django/middleware/csrf.pyc"><doc><![CDATA[
Cross Site Request Forgery Middleware.

This module provides a middleware that implements protection
against request forgeries from other sites.
]]></doc>
<depends name="random"></depends>
<depends name="re"></depends>
<depends name="itertools"></depends>
<depends name="_hashlib"></depends>
<depends name="logging"></depends>
<import_attribute name="randrange" type="instancemethod" module="random"></import_attribute>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_callable" module="django.core.urlresolvers"></import_function>
<import_function name="patch_vary_headers" module="django.utils.cache"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="same_origin" module="django.utils.http"></import_function>
<attribute name="REASON_NO_REFERER" type="str"><value><![CDATA[Referer checking failed - no Referer.]]></value>
</attribute>
<attribute name="random" type="module"><value><![CDATA[<module 'random' from '/usr/lib/python2.7/random.pyc'>]]></value>
</attribute>
<attribute name="REASON_NO_COOKIE" type="str"><value><![CDATA[No CSRF or session cookie.]]></value>
</attribute>
<attribute name="_MAX_CSRF_KEY" type="long"><value><![CDATA[18446744073709551616]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="REASON_NO_CSRF_COOKIE" type="str"><value><![CDATA[CSRF cookie not set.]]></value>
</attribute>
<attribute name="_POST_FORM_RE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x962b560>]]></value>
</attribute>
<attribute name="REASON_BAD_REFERER" type="str"><value><![CDATA[Referer checking failed - %s does not match %s.]]></value>
</attribute>
<attribute name="_HTML_TYPES" type="tuple"><value><![CDATA[('text/html', 'application/xhtml+xml')]]></value>
</attribute>
<attribute name="REASON_BAD_TOKEN" type="str"><value><![CDATA[CSRF token missing or incorrect.]]></value>
</attribute>
<attribute name="itertools" type="module"><value><![CDATA[<module 'itertools' (built-in)>]]></value>
</attribute>
<function name="_make_legacy_session_token"><doc></doc>
<argument name="session_id"></argument>
</function>
<function name="_get_new_csrf_key"><doc></doc>
</function>
<function name="_get_failure_view"><doc><![CDATA[
    Returns the view to be used for CSRF rejections
    ]]></doc>
</function>
<function name="_sanitize_token"><doc></doc>
<argument name="token"></argument>
</function>
<function name="get_token"><doc><![CDATA[
    Returns the the CSRF token required for a POST form. The token is an
    alphanumeric value.

    A side effect of calling this function is to make the the csrf_protect
    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
    header to the outgoing response.  For this reason, you may need to use this
    function lazily, as is done by the csrf context processor.
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="CsrfMiddleware"></class>
<doc><![CDATA[
    Django middleware that adds protection against Cross Site
    Request Forgeries by adding hidden form fields to POST forms and
    checking requests for the correct value.

    CsrfMiddleware uses two middleware, CsrfViewMiddleware and
    CsrfResponseMiddleware, which can be used independently.  It is recommended
    to use only CsrfViewMiddleware and use the csrf_token template tag in
    templates for inserting the token.
    ]]></doc>
<function name="process_view"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="callback"></argument>
<argument name="callback_args"></argument>
<argument name="callback_kwargs"></argument>
</function>
<function name="process_response"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="resp"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="CsrfViewMiddleware"></class>
<doc><![CDATA[
    Middleware that requires a present and correct csrfmiddlewaretoken
    for POST requests that have a CSRF cookie, and sets an outgoing
    CSRF cookie.

    This middleware should be used in conjunction with the csrf_token template
    tag.
    ]]></doc>
<function name="process_view"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="callback"></argument>
<argument name="callback_args"></argument>
<argument name="callback_kwargs"></argument>
</function>
<function name="process_response"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="_accept"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="_reject"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="reason"></argument>
</function>
<class name="CsrfResponseMiddleware"></class>
<doc><![CDATA[
    DEPRECATED
    Middleware that post-processes a response to add a csrfmiddlewaretoken.

    This exists for backwards compatibility and as an interim measure until
    applications are converted to using use the csrf_token template tag
    instead. It will be removed in Django 1.4.
    ]]></doc>
<function name="process_response"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.auth.context_processors" file="/django/contrib/auth/context_processors.pyc"><doc></doc>
<depends name="__builtin__"></depends>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_class name="SimpleLazyObject" module="django.utils.functional"></import_class>
<attribute name="messages" type="module"><value><![CDATA[<module 'django.contrib.messages' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/__init__.pyc'>]]></value>
</attribute>
<function name="auth"><doc><![CDATA[
    Returns context variables required by apps that use Django's authentication
    system.

    If there is no 'user' attribute in the request, uses AnonymousUser (from
    django.contrib.auth).
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="PermLookupDict"></class>
<doc></doc>
<function name="__nonzero__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="perm_name"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
<argument name="module_name"></argument>
</function>
<class name="PermWrapper"></class>
<doc></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="module_name"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
</function>
</package>
<package name="django.contrib.messages" file="/django/contrib/messages/__init__.pyc"><doc></doc>
<import_function name="add_message" module="django.contrib.messages.api"></import_function>
<import_function name="get_messages" module="django.contrib.messages.api"></import_function>
<import_function name="get_level" module="django.contrib.messages.api"></import_function>
<import_function name="info" module="django.contrib.messages.api"></import_function>
<import_function name="success" module="django.contrib.messages.api"></import_function>
<import_function name="set_level" module="django.contrib.messages.api"></import_function>
<import_function name="warning" module="django.contrib.messages.api"></import_function>
<import_function name="error" module="django.contrib.messages.api"></import_function>
<import_function name="debug" module="django.contrib.messages.api"></import_function>
<attribute name="api" type="module"><value><![CDATA[<module 'django.contrib.messages.api' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/api.pyc'>]]></value>
</attribute>
<attribute name="storage" type="module"><value><![CDATA[<module 'django.contrib.messages.storage' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/storage/__init__.pyc'>]]></value>
</attribute>
<attribute name="WARNING" type="int"><value><![CDATA[30]]></value>
</attribute>
<attribute name="INFO" type="int"><value><![CDATA[20]]></value>
</attribute>
<attribute name="SUCCESS" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="ERROR" type="int"><value><![CDATA[40]]></value>
</attribute>
<attribute name="DEBUG" type="int"><value><![CDATA[10]]></value>
</attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
</package>
<package name="django.contrib.messages.models" file="/django/contrib/messages/models.pyc"><doc></doc>
</package>
<package name="django.contrib.messages.middleware" file="/django/contrib/messages/middleware.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="default_storage" module="django.contrib.messages.storage"></import_function>
<class name="MessageMiddleware"></class>
<doc><![CDATA[
    Middleware that handles temporary messages.
    ]]></doc>
<function name="process_response"><doc><![CDATA[
        Updates the storage backend (i.e., saves the messages).

        If not all messages could not be stored and ``DEBUG`` is ``True``, a
        ``ValueError`` is raised.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="process_request"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.context_processors" file="/django/contrib/messages/context_processors.pyc"><doc></doc>
<import_function name="get_messages" module="django.contrib.messages.api"></import_function>
<function name="messages"><doc><![CDATA[
    Returns a lazy 'messages' context variable.
    ]]></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.utils" file="/django/contrib/messages/utils.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<function name="get_level_tags"><doc><![CDATA[
    Returns the message level tags.
    ]]></doc>
</function>
</package>
<package name="django.contrib.messages.constants" file="/django/contrib/messages/constants.pyc"><doc></doc>
<attribute name="INFO" type="int"><value><![CDATA[20]]></value>
</attribute>
<attribute name="SUCCESS" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="DEFAULT_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
<attribute name="WARNING" type="int"><value><![CDATA[30]]></value>
</attribute>
<attribute name="ERROR" type="int"><value><![CDATA[40]]></value>
</attribute>
<attribute name="DEBUG" type="int"><value><![CDATA[10]]></value>
</attribute>
</package>
<package name="django.contrib.messages.storage" file="/django/contrib/messages/storage/__init__.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<function name="get_storage"><doc><![CDATA[
    Imports the message storage class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
<argument name="import_path"></argument>
</function>
<function name="default_storage"><doc></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.storage.cookie" file="/django/contrib/messages/storage/cookie.pyc"><doc></doc>
<depends name="Cookie"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="salted_hmac" module="django.utils.crypto"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_class name="SimpleCookie" module="django.http"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<import_class name="Message" module="django.contrib.messages.storage.base"></import_class>
<attribute name="json" type="module"><value><![CDATA[<module 'django.utils.simplejson' from '/usr/local/lib/python2.7/dist-packages/django/utils/simplejson/__init__.pyc'>]]></value>
</attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<class name="CookieStorage"></class>
<doc><![CDATA[
    Stores messages in a cookie.
    ]]></doc>
<attribute name="cookie_name" type="str"><value><![CDATA[messages]]></value>
</attribute>
<attribute name="max_cookie_size" type="int"><value><![CDATA[3072]]></value>
</attribute>
<attribute name="not_finished" type="str"><value><![CDATA[__messagesnotfinished__]]></value>
</attribute>
<function name="_store" args="args" kwargs="kwargs"><doc><![CDATA[
        Stores the messages to a cookie, returning a list of any messages which
        could not be stored.

        If the encoded data is larger than ``max_cookie_size``, removes
        messages until the data fits (these are the messages which are
        returned), and add the not_finished sentinel value to indicate as much.
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
<argument name="response"></argument>
<argument name="remove_oldest" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="_update_cookie"><doc><![CDATA[
        Either sets the cookie with the encoded data if there is any data to
        store, or deletes the cookie.
        ]]></doc>
<argument name="self"></argument>
<argument name="encoded_data"></argument>
<argument name="response"></argument>
</function>
<function name="_decode"><doc><![CDATA[
        Safely decodes a encoded text stream back into a list of messages.

        If the encoded text stream contained an invalid hash or was in an
        invalid format, ``None`` is returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="_get" args="args" kwargs="kwargs"><doc><![CDATA[
        Retrieves a list of messages from the messages cookie.  If the
        not_finished sentinel value is found at the end of the message list,
        remove it and return a result indicating that not all messages were
        retrieved by this storage.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_encode"><doc><![CDATA[
        Returns an encoded version of the messages list which can be stored as
        plain text.

        Since the data will be retrieved from the client-side, the encoded data
        also contains a hash to ensure that the data was not tampered with.
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
<argument name="encode_empty" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_hash"><doc><![CDATA[
        Creates an HMAC/SHA1 hash based on the value and the project setting's
        SECRET_KEY, modified to make it unique for the present purpose.
        ]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="MessageEncoder"></class>
<doc><![CDATA[
    Compactly serializes instances of the ``Message`` class as JSON.
    ]]></doc>
<attribute name="message_key" type="str"><value><![CDATA[__json_message]]></value>
</attribute>
<function name="default"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<class name="MessageDecoder"></class>
<doc><![CDATA[
    Decodes JSON that includes serialized ``Message`` instances.
    ]]></doc>
<function name="decode" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="s"></argument>
</function>
<function name="process_messages"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
</package>
<package name="django.utils.simplejson" version="2.0.7" file="/django/utils/simplejson/__init__.pyc"><doc><![CDATA[JSON (JavaScript Object Notation) <http://json.org> is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`simplejson` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained
version of the :mod:`json` library contained in Python 2.6, but maintains
compatibility with Python 2.4 and Python 2.5 and (currently) has
significant performance advantages, even without using the optional C
extension for speedups.

Encoding basic Python object hierarchies::

    >>> import simplejson as json
    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    >>> print json.dumps("\"foo\bar")
    "\"foo\bar"
    >>> print json.dumps(u'\u1234')
    "\u1234"
    >>> print json.dumps('\\')
    "\\"
    >>> print json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True)
    {"a": 0, "b": 0, "c": 0}
    >>> from StringIO import StringIO
    >>> io = StringIO()
    >>> json.dump(['streaming API'], io)
    >>> io.getvalue()
    '["streaming API"]'

Compact encoding::

    >>> import simplejson as json
    >>> json.dumps([1,2,3,{'4': 5, '6': 7}], separators=(',',':'))
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    >>> import simplejson as json
    >>> s = json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4)
    >>> print '\n'.join([l.rstrip() for l in  s.splitlines()])
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    >>> import simplejson as json
    >>> obj = [u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
    >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    >>> json.loads('"\\"foo\\bar"') == u'"foo\x08ar'
    True
    >>> from StringIO import StringIO
    >>> io = StringIO('["streaming API"]')
    >>> json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    >>> import simplejson as json
    >>> def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    >>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    >>> import decimal
    >>> json.loads('1.1', parse_float=decimal.Decimal) == decimal.Decimal('1.1')
    True

Specializing JSON object encoding::

    >>> import simplejson as json
    >>> def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError("%r is not JSON serializable" % (o,))
    ...
    >>> json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'


Using simplejson.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -msimplejson.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -msimplejson.tool
    Expecting property name: line 1 column 2 (char 2)
]]></doc>
<depends name="simplejson"></depends>
<depends name="simplejson.encoder"></depends>
<depends name="collections"></depends>
<depends name="_abcoll"></depends>
<depends name="simplejson.decoder"></depends>
<import_function name="load" module="simplejson"></import_function>
<import_function name="dump" module="simplejson"></import_function>
<import_function name="dumps" module="simplejson"></import_function>
<import_function name="loads" module="simplejson"></import_function>
<import_class name="JSONEncoder" module="simplejson.encoder"></import_class>
<import_class name="OrderedDict" module="collections"></import_class>
<import_class name="JSONDecodeError" module="simplejson.decoder"></import_class>
<import_class name="JSONDecoder" module="simplejson.decoder"></import_class>
<attribute name="simplejson" type="module"><value><![CDATA[<module 'simplejson' from '/usr/lib/python2.7/dist-packages/simplejson/__init__.pyc'>]]></value>
</attribute>
<attribute name="__version__" type="str"><value><![CDATA[2.0.7]]></value>
</attribute>
<attribute name="use_system_version" type="bool"><value><![CDATA[True]]></value>
</attribute>
</package>
<package name="django.utils.simplejson.decoder" file="/django/utils/simplejson/decoder.pyc"><doc><![CDATA[Implementation of JSONDecoder
]]></doc>
<depends name="struct"></depends>
<depends name="re"></depends>
<depends name="sys"></depends>
<depends name="simplejson._speedups"></depends>
<import_class name="make_scanner" module="simplejson._speedups"></import_class>
<attribute name="WHITESPACE_STR" type="str"><value><![CDATA[ 	
]]></value>
</attribute>
<attribute name="c_scanstring" type="NoneType"><value></value>
</attribute>
<attribute name="NegInf" type="float"><value><![CDATA[-inf]]></value>
</attribute>
<attribute name="_CONSTANTS" type="dict"><value><![CDATA[{'Infinity': inf, 'NaN': nan, '-Infinity': -inf}]]></value>
</attribute>
<attribute name="struct" type="module"><value><![CDATA[<module 'struct' from '/usr/lib/python2.7/struct.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['JSONDecoder']]]></value>
</attribute>
<attribute name="NaN" type="float"><value><![CDATA[nan]]></value>
</attribute>
<attribute name="BACKSLASH" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="FLAGS" type="int"><value><![CDATA[88]]></value>
</attribute>
<attribute name="PosInf" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="STRINGCHUNK" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x934de90>]]></value>
</attribute>
<attribute name="WHITESPACE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x936fcc8>]]></value>
</attribute>
<attribute name="DEFAULT_ENCODING" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<function name="linecol"><doc></doc>
<argument name="doc"></argument>
<argument name="pos"></argument>
</function>
<function name="scanstring"><doc><![CDATA[Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.]]></doc>
<argument name="s"></argument>
<argument name="end"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
<argument name="strict" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="_b" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</argument>
<argument name="_m" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x934de90>]]></value>
</argument>
</function>
<function name="JSONArray"><doc></doc>
<argument name="['s', 'end']"></argument>
<argument name="scan_once"></argument>
<argument name="_w" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x936fcc8>]]></value>
</argument>
<argument name="_ws" type="str"><value><![CDATA[ 	
]]></value>
</argument>
</function>
<function name="JSONObject"><doc></doc>
<argument name="['s', 'end']"></argument>
<argument name="encoding"></argument>
<argument name="strict"></argument>
<argument name="scan_once"></argument>
<argument name="object_hook"></argument>
<argument name="_w" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x936fcc8>]]></value>
</argument>
<argument name="_ws" type="str"><value><![CDATA[ 	
]]></value>
</argument>
</function>
<function name="py_scanstring"><doc><![CDATA[Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.]]></doc>
<argument name="s"></argument>
<argument name="end"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
<argument name="strict" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="_b" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</argument>
<argument name="_m" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x934de90>]]></value>
</argument>
</function>
<function name="_floatconstants"><doc></doc>
</function>
<function name="errmsg"><doc></doc>
<argument name="msg"></argument>
<argument name="doc"></argument>
<argument name="pos"></argument>
<argument name="end" type="NoneType"><value></value>
</argument>
</function>
<class name="JSONDecoder"></class>
<doc><![CDATA[Simple JSON <http://json.org> decoder

    Performs the following translations in decoding by default:

    +---------------+-------------------+
    | JSON          | Python            |
    +===============+===================+
    | object        | dict              |
    +---------------+-------------------+
    | array         | list              |
    +---------------+-------------------+
    | string        | unicode           |
    +---------------+-------------------+
    | number (int)  | int, long         |
    +---------------+-------------------+
    | number (real) | float             |
    +---------------+-------------------+
    | true          | True              |
    +---------------+-------------------+
    | false         | False             |
    +---------------+-------------------+
    | null          | None              |
    +---------------+-------------------+

    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
    their corresponding ``float`` values, which is outside the JSON spec.

    ]]></doc>
<function name="raw_decode"><doc><![CDATA[Decode a JSON document from ``s`` (a ``str`` or ``unicode`` beginning
        with a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        ]]></doc>
<argument name="self"></argument>
<argument name="s"></argument>
<argument name="idx" type="int"><value></value>
</argument>
</function>
<function name="decode"><doc><![CDATA[Return the Python representation of ``s`` (a ``str`` or ``unicode``
        instance containing a JSON document)

        ]]></doc>
<argument name="self"></argument>
<argument name="s"></argument>
<argument name="_w" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x936fcc8>]]></value>
</argument>
</function>
<function name="__init__"><doc><![CDATA[``encoding`` determines the encoding used to interpret any ``str``
        objects decoded by this instance (utf-8 by default).  It has no
        effect when decoding ``unicode`` objects.

        Note that currently only encodings that are a superset of ASCII work,
        strings of other encodings should be passed in as ``unicode``.

        ``object_hook``, if specified, will be called with the result
        of every JSON object decoded and its return value will be used in
        place of the given ``dict``.  This can be used to provide custom
        deserializations (e.g. to support JSON-RPC class hinting).

        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).

        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).

        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.

        ]]></doc>
<argument name="self"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
<argument name="object_hook" type="NoneType"><value></value>
</argument>
<argument name="parse_float" type="NoneType"><value></value>
</argument>
<argument name="parse_int" type="NoneType"><value></value>
</argument>
<argument name="parse_constant" type="NoneType"><value></value>
</argument>
<argument name="strict" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
</package>
<package name="django.utils.simplejson.tool" file="/django/utils/simplejson/tool.pyc"><doc><![CDATA[Using simplejson from the shell to validate and
pretty-print::

    $ echo '{"json":"obj"}' | python -msimplejson.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -msimplejson.tool
    Expecting property name: line 1 column 2 (char 2)
]]></doc>
<attribute name="simplejson" type="module"><value><![CDATA[<module 'django.utils.simplejson' from '/usr/local/lib/python2.7/dist-packages/django/utils/simplejson/__init__.pyc'>]]></value>
</attribute>
<function name="main"><doc></doc>
</function>
</package>
<package name="django.utils.simplejson.encoder" file="/django/utils/simplejson/encoder.pyc"><doc><![CDATA[Implementation of JSONEncoder
]]></doc>
<depends name="re"></depends>
<depends name="__builtin__"></depends>
<import_attribute name="FLOAT_REPR" type="builtin_function_or_method" module="__builtin__"></import_attribute>
<attribute name="ESCAPE_ASCII" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x934dde0>]]></value>
</attribute>
<attribute name="INFINITY" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="i" type="int"><value><![CDATA[31]]></value>
</attribute>
<attribute name="c_make_encoder" type="NoneType"><value></value>
</attribute>
<attribute name="HAS_UTF8" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x959d9c0>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="c_encode_basestring_ascii" type="NoneType"><value></value>
</attribute>
<attribute name="ESCAPE_DCT" type="dict"><value><![CDATA[{'\x01': '\\u0001', '\x00': '\\u0000', '\x03': '\\u0003', '\x02': '\\u0002', '\x05': '\\u0005', '\x04': '\\u0004', '\x07': '\\u0007', '\x06': '\\u0006', '\t': '\\t', '\x08': '\\b', '\x0b': '\\u000b', '\n': '\\n', '\r': '\\r', '\x0c': '\\f', '\x0f': '\\u000f', '\x0e': '\\u000e', '\x11': '\\u0011', '\x10': '\\u0010', '\x13': '\\u0013', '\x12': '\\u0012', '\x15': '\\u0015', '\x14': '\\u0014', '\x17': '\\u0017', '\x16': '\\u0016', '\x19': '\\u0019', '\x18': '\\u0018', '\x1b': '\\u001b', '\x1a': '\\u001a', '\x1d': '\\u001d', '\x1c': '\\u001c', '\x1f': '\\u001f', '\x1e': '\\u001e', '"': '\\"', '\\': '\\\\'}]]></value>
</attribute>
<attribute name="ESCAPE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x94f9ca0>]]></value>
</attribute>
<function name="_make_iterencode"><doc></doc>
<argument name="markers"></argument>
<argument name="_default"></argument>
<argument name="_encoder"></argument>
<argument name="_indent"></argument>
<argument name="_floatstr"></argument>
<argument name="_key_separator"></argument>
<argument name="_item_separator"></argument>
<argument name="_sort_keys"></argument>
<argument name="_skipkeys"></argument>
<argument name="_one_shot"></argument>
<argument name="False" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="True" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="ValueError" type="type"><value><![CDATA[<type 'exceptions.ValueError'>]]></value>
</argument>
<argument name="basestring" type="type"><value><![CDATA[<type 'basestring'>]]></value>
</argument>
<argument name="dict" type="type"><value><![CDATA[<type 'dict'>]]></value>
</argument>
<argument name="float" type="type"><value><![CDATA[<type 'float'>]]></value>
</argument>
<argument name="id" type="builtin_function_or_method"><value><![CDATA[<built-in function id>]]></value>
</argument>
<argument name="int" type="type"><value><![CDATA[<type 'int'>]]></value>
</argument>
<argument name="isinstance" type="builtin_function_or_method"><value><![CDATA[<built-in function isinstance>]]></value>
</argument>
<argument name="list" type="type"><value><![CDATA[<type 'list'>]]></value>
</argument>
<argument name="long" type="type"><value><![CDATA[<type 'long'>]]></value>
</argument>
<argument name="str" type="type"><value><![CDATA[<type 'str'>]]></value>
</argument>
<argument name="tuple" type="type"><value><![CDATA[<type 'tuple'>]]></value>
</argument>
</function>
<function name="encode_basestring"><doc><![CDATA[Return a JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<function name="py_encode_basestring_ascii"><doc><![CDATA[Return an ASCII-only JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<function name="encode_basestring_ascii"><doc><![CDATA[Return an ASCII-only JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<class name="JSONEncoder"></class>
<doc><![CDATA[Extensible JSON <http://json.org> encoder for Python data structures.

    Supports the following objects and types by default:

    +-------------------+---------------+
    | Python            | JSON          |
    +===================+===============+
    | dict              | object        |
    +-------------------+---------------+
    | list, tuple       | array         |
    +-------------------+---------------+
    | str, unicode      | string        |
    +-------------------+---------------+
    | int, long, float  | number        |
    +-------------------+---------------+
    | True              | true          |
    +-------------------+---------------+
    | False             | false         |
    +-------------------+---------------+
    | None              | null          |
    +-------------------+---------------+

    To extend this to recognize other objects, subclass and implement a
    ``.default()`` method with another method that returns a serializable
    object for ``o`` if possible, otherwise it should call the superclass
    implementation (to raise ``TypeError``).

    ]]></doc>
<attribute name="key_separator" type="str"><value><![CDATA[: ]]></value>
</attribute>
<attribute name="item_separator" type="str"><value><![CDATA[, ]]></value>
</attribute>
<function name="default"><doc><![CDATA[Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).

        For example, to support arbitrary iterators, you could
        implement default like this::

            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                return JSONEncoder.default(self, o)

        ]]></doc>
<argument name="self"></argument>
<argument name="o"></argument>
</function>
<function name="__init__"><doc><![CDATA[Constructor for JSONEncoder, with sensible defaults.

        If skipkeys is False, then it is a TypeError to attempt
        encoding of keys that are not str, int, long, float or None.  If
        skipkeys is True, such items are simply skipped.

        If ensure_ascii is True, the output is guaranteed to be str
        objects with all incoming unicode characters escaped.  If
        ensure_ascii is false, the output will be unicode object.

        If check_circular is True, then lists, dicts, and custom encoded
        objects will be checked for circular references during encoding to
        prevent an infinite recursion (which would cause an OverflowError).
        Otherwise, no such check takes place.

        If allow_nan is True, then NaN, Infinity, and -Infinity will be
        encoded as such.  This behavior is not JSON specification compliant,
        but is consistent with most JavaScript based encoders and decoders.
        Otherwise, it will be a ValueError to encode such floats.

        If sort_keys is True, then the output of dictionaries will be
        sorted by key; this is useful for regression tests to ensure
        that JSON serializations can be compared on a day-to-day basis.

        If indent is a non-negative integer, then JSON array
        elements and object members will be pretty-printed with that
        indent level.  An indent level of 0 will only insert newlines.
        None is the most compact representation.

        If specified, separators should be a (item_separator, key_separator)
        tuple.  The default is (', ', ': ').  To get the most compact JSON
        representation you should specify (',', ':') to eliminate whitespace.

        If specified, default is a function that gets called for objects
        that can't otherwise be serialized.  It should return a JSON encodable
        version of the object or raise a ``TypeError``.

        If encoding is not None, then all input strings will be
        transformed into unicode using that encoding prior to JSON-encoding.
        The default is UTF-8.

        ]]></doc>
<argument name="self"></argument>
<argument name="skipkeys" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="ensure_ascii" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="check_circular" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="allow_nan" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="sort_keys" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="indent" type="NoneType"><value></value>
</argument>
<argument name="separators" type="NoneType"><value></value>
</argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="encode"><doc><![CDATA[Return a JSON string representation of a Python data structure.

        >>> JSONEncoder().encode({"foo": ["bar", "baz"]})
        '{"foo": ["bar", "baz"]}'

        ]]></doc>
<argument name="self"></argument>
<argument name="o"></argument>
</function>
<function name="iterencode"><doc><![CDATA[Encode the given object and yield each string
        representation as available.

        For example::

            for chunk in JSONEncoder().iterencode(bigobject):
                mysocket.write(chunk)

        ]]></doc>
<argument name="self"></argument>
<argument name="o"></argument>
<argument name="_one_shot" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.utils.simplejson.scanner" file="/django/utils/simplejson/scanner.pyc"><doc><![CDATA[JSON token scanner
]]></doc>
<depends name="re"></depends>
<depends name="simplejson._speedups"></depends>
<import_class name="make_scanner" module="simplejson._speedups"></import_class>
<import_class name="c_make_scanner" module="simplejson._speedups"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['make_scanner']]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="NUMBER_RE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x963a280>]]></value>
</attribute>
<function name="py_make_scanner"><doc></doc>
<argument name="context"></argument>
</function>
</package>
<package name="django.contrib.messages.storage.base" file="/django/contrib/messages/storage/base.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<attribute name="LEVEL_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.contrib.messages.utils' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/utils.pyc'>]]></value>
</attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<class name="BaseStorage"></class>
<doc><![CDATA[
    This is the base backend for temporary message storage.

    This is not a complete class; to be a usable storage backend, it must be
    subclassed and the two methods ``_get`` and ``_store`` overridden.
    ]]></doc>
<attribute name="level" type="property"><value><![CDATA[<property object at 0x960a3ec>]]></value>
</attribute>
<attribute name="_loaded_messages" type="property"><value><![CDATA[<property object at 0x960a3c4>]]></value>
</attribute>
<function name="_store" args="args" kwargs="kwargs"><doc><![CDATA[
        Stores a list of messages, returning a list of any messages which could
        not be stored.

        One type of object must be able to be stored, ``Message``.

        **This method must be implemented by a subclass.**
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
<argument name="response"></argument>
</function>
<function name="__contains__"><doc></doc>
<argument name="self"></argument>
<argument name="item"></argument>
</function>
<function name="_get_level"><doc><![CDATA[
        Returns the minimum recorded level.

        The default level is the ``MESSAGE_LEVEL`` setting. If this is
        not found, the ``INFO`` level is used.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="update"><doc><![CDATA[
        Stores all unread messages.

        If the backend has yet to be iterated, previously stored messages will
        be stored again. Otherwise, only messages added after the last
        iteration will be stored.
        ]]></doc>
<argument name="self"></argument>
<argument name="response"></argument>
</function>
<function name="_get" args="args" kwargs="kwargs"><doc><![CDATA[
        Retrieves a list of stored messages. Returns a tuple of the messages
        and a flag indicating whether or not all the messages originally
        intended to be stored in this storage were, in fact, stored and
        retrieved; e.g., ``(messages, all_retrieved)``.

        **This method must be implemented by a subclass.**

        If it is possible to tell if the backend was not used (as opposed to
        just containing no messages) then ``None`` should be returned in
        place of ``messages``.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="add"><doc><![CDATA[
        Queues a message to be stored.

        The message is only queued if it contained something and its level is
        not less than the recording level (``self.level``).
        ]]></doc>
<argument name="self"></argument>
<argument name="level"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
</function>
<function name="__len__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_prepare_messages"><doc><![CDATA[
        Prepares a list of messages for storage.
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
</function>
<function name="_set_level"><doc><![CDATA[
        Sets a custom minimum recorded level.

        If set to ``None``, the default level will be used (see the
        ``_get_level`` method).
        ]]></doc>
<argument name="self"></argument>
<argument name="value" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<class name="Message"></class>
<doc><![CDATA[
    Represents an actual message that can be stored in any of the supported
    storage classes (typically session- or cookie-based) and rendered in a view
    or template.
    ]]></doc>
<attribute name="tags" type="property"><value><![CDATA[<property object at 0x960a34c>]]></value>
</attribute>
<function name="_prepare"><doc><![CDATA[
        Prepares the message for serialization by forcing the ``message``
        and ``extra_tags`` to unicode in case they are lazy translations.

        Known "safe" types (None, int, etc.) are not converted (see Django's
        ``force_unicode`` implementation for details).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_tags"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="level"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.messages.storage.user_messages" file="/django/contrib/messages/storage/user_messages.pyc"><doc><![CDATA[
Storages used to assist in the deprecation of contrib.auth User messages.

]]></doc>
<import_class name="FallbackStorage" module="django.contrib.messages.storage.fallback"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<import_class name="Message" module="django.contrib.messages.storage.base"></import_class>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<class name="UserMessagesStorage"></class>
<doc><![CDATA[
    Retrieves messages from the User, using the legacy user.message_set API.

    This storage is "read-only" insofar as it can only retrieve and delete
    messages, not store them.
    ]]></doc>
<attribute name="session_key" type="str"><value><![CDATA[_messages]]></value>
</attribute>
<function name="_get" args="args" kwargs="kwargs"><doc><![CDATA[
        Retrieves a list of messages assigned to the User.  This backend never
        stores anything, so all_retrieved is assumed to be False.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_store" args="args" kwargs="kwargs"><doc><![CDATA[
        Removes any messages assigned to the User and returns the list of
        messages (since no messages are stored in this read-only storage).
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
</function>
<function name="_get_messages_queryset"><doc><![CDATA[
        Returns the QuerySet containing all user messages (or ``None`` if
        request.user is not a contrib.auth User).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="LegacyFallbackStorage"></class>
<doc><![CDATA[
    Works like ``FallbackStorage`` but also handles retrieving (and clearing)
    contrib.auth User messages.
    ]]></doc>
<attribute name="storage_classes" type="tuple"><value><![CDATA[(<class 'django.contrib.messages.storage.user_messages.UserMessagesStorage'>, <class 'django.contrib.messages.storage.cookie.CookieStorage'>, <class 'django.contrib.messages.storage.session.SessionStorage'>)]]></value>
</attribute>
</package>
<package name="django.contrib.auth.models" file="/django/contrib/auth/models.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="urllib"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="EmptyManager" module="django.db.models.manager"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="UNUSABLE_PASSWORD" type="str"><value><![CDATA[!]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="auth" type="module"><value><![CDATA[<module 'django.contrib.auth' from '/usr/local/lib/python2.7/dist-packages/django/contrib/auth/__init__.pyc'>]]></value>
</attribute>
<function name="_user_has_module_perms"><doc></doc>
<argument name="user"></argument>
<argument name="app_label"></argument>
</function>
<function name="check_password"><doc><![CDATA[
    Returns a boolean of whether the raw_password was correct. Handles
    encryption formats behind the scenes.
    ]]></doc>
<argument name="raw_password"></argument>
<argument name="enc_password"></argument>
</function>
<function name="get_hexdigest"><doc><![CDATA[
    Returns a string of the hexdigest of the given plaintext password and salt
    using the given algorithm ('md5', 'sha1' or 'crypt').
    ]]></doc>
<argument name="algorithm"></argument>
<argument name="salt"></argument>
<argument name="raw_password"></argument>
</function>
<function name="_user_get_all_permissions"><doc></doc>
<argument name="user"></argument>
<argument name="obj"></argument>
</function>
<function name="_user_has_perm"><doc></doc>
<argument name="user"></argument>
<argument name="perm"></argument>
<argument name="obj"></argument>
</function>
<function name="update_last_login" kwargs="kwargs"><doc><![CDATA[
    A signal receiver which updates the last_login date for
    the user logging in.
    ]]></doc>
<argument name="sender"></argument>
<argument name="user"></argument>
</function>
<class name="Group"></class>
<doc><![CDATA[Groups are a generic way of categorizing users to apply permissions, or some other label, to those users. A user can belong to any number of groups.

    A user in a group automatically has all the permissions granted to that group. For example, if the group Site editors has the permission can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to apply some label, or extended functionality, to them. For example, you could create a group 'Special users', and you could write code that would do special things to those users -- such as giving them access to a members-only portion of your site, or sending them members-only e-mail messages.
    ]]></doc>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="objects" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="_default_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="user_set" type="ManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="permissions" type="ReverseManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="PermissionManager"></class>
<doc></doc>
<function name="get_by_natural_key"><doc></doc>
<argument name="self"></argument>
<argument name="codename"></argument>
<argument name="app_label"></argument>
<argument name="model"></argument>
</function>
<class name="UserManager"></class>
<doc></doc>
<function name="create_user"><doc><![CDATA[
        Creates and saves a User with the given username, e-mail and password.
        ]]></doc>
<argument name="self"></argument>
<argument name="username"></argument>
<argument name="email"></argument>
<argument name="password" type="NoneType"><value></value>
</argument>
</function>
<function name="make_random_password"><doc><![CDATA[Generates a random password with the given length and given allowed_chars]]></doc>
<argument name="self"></argument>
<argument name="length" type="int"><value><![CDATA[10]]></value>
</argument>
<argument name="allowed_chars" type="str"><value><![CDATA[abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789]]></value>
</argument>
</function>
<function name="create_superuser"><doc></doc>
<argument name="self"></argument>
<argument name="username"></argument>
<argument name="email"></argument>
<argument name="password"></argument>
</function>
<class name="User"></class>
<doc><![CDATA[
    Users within the Django authentication system are represented by this model.

    Username and password are required. Other fields are optional.
    ]]></doc>
<import_attribute name="user_permissions" type="ReverseManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="_message_set" type="ForeignRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="groups" type="ReverseManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_function name="get_next_by_last_login" module="django.utils.functional"></import_function>
<import_function name="get_previous_by_last_login" module="django.utils.functional"></import_function>
<import_function name="get_next_by_date_joined" module="django.utils.functional"></import_function>
<import_function name="get_previous_by_date_joined" module="django.utils.functional"></import_function>
<attribute name="message_set" type="property"><value><![CDATA[<property object at 0x965d43c>]]></value>
</attribute>
<attribute name="_default_manager" type="UserManager"><value><![CDATA[<django.contrib.auth.models.UserManager object at 0x966670c>]]></value>
</attribute>
<attribute name="objects" type="UserManager"><value><![CDATA[<django.contrib.auth.models.UserManager object at 0x966670c>]]></value>
</attribute>
<function name="is_authenticated"><doc><![CDATA[
        Always return True. This is a way to tell if the user has been
        authenticated in templates.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_and_delete_messages"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_perm"><doc><![CDATA[
        Returns True if the user has the specified permission. This method
        queries all available auth backends, but returns immediately if any
        backend returns True. Thus, a user who has permission from a single
        auth backend is assumed to have permission in general. If an object
        is provided, permissions for this specific object are checked.
        ]]></doc>
<argument name="self"></argument>
<argument name="perm"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="get_profile"><doc><![CDATA[
        Returns site-specific profile for this user. Raises
        SiteProfileNotAvailable if this site does not allow profiles.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_message_set"><doc></doc>
<argument name="self"></argument>
</function>
<function name="set_unusable_password"><doc></doc>
<argument name="self"></argument>
</function>
<function name="check_password"><doc><![CDATA[
        Returns a boolean of whether the raw_password was correct. Handles
        encryption formats behind the scenes.
        ]]></doc>
<argument name="self"></argument>
<argument name="raw_password"></argument>
</function>
<function name="has_usable_password"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_absolute_url" args="moreargs" kwargs="morekwargs"><doc></doc>
</function>
<function name="get_group_permissions"><doc><![CDATA[
        Returns a list of permission strings that this user has through
        his/her groups. This method queries all available auth backends.
        If an object is passed in, only permissions matching this object
        are returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="set_password"><doc></doc>
<argument name="self"></argument>
<argument name="raw_password"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_anonymous"><doc><![CDATA[
        Always returns False. This is a way of comparing User objects to
        anonymous users.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="has_perms"><doc><![CDATA[
        Returns True if the user has each of the specified permissions.
        If object is passed, it checks if the user has all required perms
        for this object.
        ]]></doc>
<argument name="self"></argument>
<argument name="perm_list"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="get_full_name"><doc><![CDATA[Returns the first_name plus the last_name, with a space in between.]]></doc>
<argument name="self"></argument>
</function>
<function name="has_module_perms"><doc><![CDATA[
        Returns True if the user has any permissions in the given app
        label. Uses pretty much the same logic as has_perm, above.
        ]]></doc>
<argument name="self"></argument>
<argument name="app_label"></argument>
</function>
<function name="email_user"><doc><![CDATA[Sends an e-mail to this User.]]></doc>
<argument name="self"></argument>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="from_email" type="NoneType"><value></value>
</argument>
</function>
<function name="get_all_permissions"><doc></doc>
<argument name="self"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="SiteProfileNotAvailable"></class>
<doc></doc>
<class name="Permission"></class>
<doc><![CDATA[The permissions system provides a way to assign permissions to specific users and groups of users.

    The permission system is used by the Django admin site, but may also be useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form and add an object.
        - The "change" permission limits a user's ability to view the change list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.

    Permissions are set globally per type of object, not per specific object instance. It is possible to say "Mary may change news stories," but it's not currently possible to say "Mary may change news stories, but only the ones she created herself" or "Mary may only change news stories that have a certain status or publication date."

    Three basic permissions -- add, change and delete -- are automatically created for each Django model.
    ]]></doc>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="group_set" type="ManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="content_type" type="ReverseSingleRelatedObjectDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="user_set" type="ManyRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<attribute name="objects" type="PermissionManager"><value><![CDATA[<django.contrib.auth.models.PermissionManager object at 0x965c1ec>]]></value>
</attribute>
<attribute name="_default_manager" type="PermissionManager"><value><![CDATA[<django.contrib.auth.models.PermissionManager object at 0x965c1ec>]]></value>
</attribute>
<function name="natural_key"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="AnonymousUser"></class>
<doc></doc>
<import_attribute name="_groups" type="EmptyManager" module="django.db.models.manager"></import_attribute>
<import_attribute name="_user_permissions" type="EmptyManager" module="django.db.models.manager"></import_attribute>
<attribute name="username" type="str"><value></value>
</attribute>
<attribute name="is_staff" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="groups" type="property"><value><![CDATA[<property object at 0x966f02c>]]></value>
</attribute>
<attribute name="user_permissions" type="property"><value><![CDATA[<property object at 0x966f0a4>]]></value>
</attribute>
<attribute name="id" type="NoneType"><value></value>
</attribute>
<attribute name="is_active" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="is_superuser" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="__ne__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="is_authenticated"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_group_permissions"><doc></doc>
<argument name="self"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="__str__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_and_delete_messages"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_perm"><doc></doc>
<argument name="self"></argument>
<argument name="perm"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="__eq__"><doc></doc>
<argument name="self"></argument>
<argument name="other"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_module_perms"><doc></doc>
<argument name="self"></argument>
<argument name="module"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_anonymous"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_perms"><doc></doc>
<argument name="self"></argument>
<argument name="perm_list"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="set_password"><doc></doc>
<argument name="self"></argument>
<argument name="raw_password"></argument>
</function>
<function name="get_all_permissions"><doc></doc>
<argument name="self"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="check_password"><doc></doc>
<argument name="self"></argument>
<argument name="raw_password"></argument>
</function>
<function name="__hash__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_groups"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_user_permissions"><doc></doc>
<argument name="self"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
</function>
<class name="Message"></class>
<doc><![CDATA[
    The message system is a lightweight way to queue messages for given
    users. A message is associated with a User instance (so it is only
    applicable for registered users). There's no concept of expiration or
    timestamps. Messages are created by the Django admin after successful
    actions. For example, "The poll Foo was created successfully." is a
    message.
    ]]></doc>
<import_attribute name="_default_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="objects" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="user" type="ReverseSingleRelatedObjectDescriptor" module="django.db.models.fields.related"></import_attribute>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
</package>
<package name="django.contrib.contenttypes.models" file="/django/contrib/contenttypes/models.pyc"><doc></doc>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<class name="ContentType"></class>
<doc><![CDATA[ContentType(id, name, app_label, model)]]></doc>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="permission_set" type="ForeignRelatedObjectsDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<attribute name="objects" type="ContentTypeManager"><value><![CDATA[<django.contrib.contenttypes.models.ContentTypeManager object at 0x96596cc>]]></value>
</attribute>
<attribute name="_default_manager" type="ContentTypeManager"><value><![CDATA[<django.contrib.contenttypes.models.ContentTypeManager object at 0x96596cc>]]></value>
</attribute>
<function name="get_object_for_this_type" kwargs="kwargs"><doc><![CDATA[
        Returns an object of this type for the keyword arguments given.
        Basically, this is a proxy around this object_type's get_object() model
        method. The ObjectNotExist exception, if thrown, will not be caught,
        so code that calls this method should catch it.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="natural_key"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="model_class"><doc><![CDATA[Returns the Python model class for this type of content.]]></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="ContentTypeManager"></class>
<doc></doc>
<attribute name="_cache" type="dict"><value></value>
</attribute>
<function name="get_by_natural_key"><doc></doc>
<argument name="self"></argument>
<argument name="app_label"></argument>
<argument name="model"></argument>
</function>
<function name="clear_cache"><doc><![CDATA[
        Clear out the content-type cache. This needs to happen during database
        flushes to prevent caching of "stale" content type IDs (see
        django.contrib.contenttypes.management.update_contenttypes for where
        this gets called).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_add_to_cache"><doc><![CDATA[Insert a ContentType into the cache.]]></doc>
<argument name="self"></argument>
<argument name="using"></argument>
<argument name="ct"></argument>
</function>
<function name="get_for_model"><doc><![CDATA[
        Returns the ContentType object for a given model, creating the
        ContentType if necessary. Lookups are cached so that subsequent lookups
        for the same model don't hit the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="model"></argument>
</function>
<function name="get_for_id"><doc><![CDATA[
        Lookup a ContentType by ID. Uses the same shared cache as get_for_model
        (though ContentTypes are obviously not created on-the-fly by get_by_id).
        ]]></doc>
<argument name="self"></argument>
<argument name="id"></argument>
</function>
</package>
<package name="django.contrib.auth" file="/django/contrib/auth/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_warnings"></depends>
<import_attribute name="user_logged_out" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="warn" type="builtin_function_or_method" module="_warnings"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="SESSION_KEY" type="str"><value><![CDATA[_auth_user_id]]></value>
</attribute>
<attribute name="context_processors" type="module"><value><![CDATA[<module 'django.contrib.auth.context_processors' from '/usr/local/lib/python2.7/dist-packages/django/contrib/auth/context_processors.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.contrib.auth.signals' from '/usr/local/lib/python2.7/dist-packages/django/contrib/auth/signals.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.contrib.auth.models' from '/usr/local/lib/python2.7/dist-packages/django/contrib/auth/models.pyc'>]]></value>
</attribute>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<attribute name="BACKEND_SESSION_KEY" type="str"><value><![CDATA[_auth_user_backend]]></value>
</attribute>
<function name="load_backend"><doc></doc>
<argument name="path"></argument>
</function>
<function name="get_user"><doc></doc>
<argument name="request"></argument>
</function>
<function name="authenticate" kwargs="credentials"><doc><![CDATA[
    If the given credentials are valid, return a User object.
    ]]></doc>
</function>
<function name="logout"><doc><![CDATA[
    Removes the authenticated user's ID from the request and flushes their
    session data.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="login"><doc><![CDATA[
    Persist a user id and a backend in the request. This way a user doesn't
    have to reauthenticate on every request.
    ]]></doc>
<argument name="request"></argument>
<argument name="user"></argument>
</function>
<function name="get_backends"><doc></doc>
</function>
</package>
<package name="django.contrib.auth.backends" file="/django/contrib/auth/backends.pyc"><doc></doc>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_class name="Permission" module="django.contrib.auth.models"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<class name="RemoteUserBackend"></class>
<doc><![CDATA[
    This backend is to be used in conjunction with the ``RemoteUserMiddleware``
    found in the middleware module of this package, and is used when the server
    is handling authentication outside of Django.

    By default, the ``authenticate`` method creates ``User`` objects for
    usernames that don't already exist in the database.  Subclasses can disable
    this behavior by setting the ``create_unknown_user`` attribute to
    ``False``.
    ]]></doc>
<attribute name="create_unknown_user" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="authenticate"><doc><![CDATA[
        The username passed as ``remote_user`` is considered trusted.  This
        method simply returns the ``User`` object with the given username,
        creating a new ``User`` object if ``create_unknown_user`` is ``True``.

        Returns None if ``create_unknown_user`` is ``False`` and a ``User``
        object with the given username is not found in the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="remote_user"></argument>
</function>
<function name="configure_user"><doc><![CDATA[
        Configures a user after creation and returns the updated user.

        By default, returns the user unmodified.
        ]]></doc>
<argument name="self"></argument>
<argument name="user"></argument>
</function>
<function name="clean_username"><doc><![CDATA[
        Performs any cleaning on the "username" prior to using it to get or
        create the user object.  Returns the cleaned username.

        By default, returns the username unchanged.
        ]]></doc>
<argument name="self"></argument>
<argument name="username"></argument>
</function>
<class name="ModelBackend"></class>
<doc><![CDATA[
    Authenticates against django.contrib.auth.models.User.
    ]]></doc>
<attribute name="supports_anonymous_user" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_inactive_user" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="supports_object_permissions" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_all_permissions"><doc></doc>
<argument name="self"></argument>
<argument name="user_obj"></argument>
</function>
<function name="get_group_permissions"><doc><![CDATA[
        Returns a set of permission strings that this user has through his/her
        groups.
        ]]></doc>
<argument name="self"></argument>
<argument name="user_obj"></argument>
</function>
<function name="has_perm"><doc></doc>
<argument name="self"></argument>
<argument name="user_obj"></argument>
<argument name="perm"></argument>
</function>
<function name="authenticate"><doc></doc>
<argument name="self"></argument>
<argument name="username" type="NoneType"><value></value>
</argument>
<argument name="password" type="NoneType"><value></value>
</argument>
</function>
<function name="get_user"><doc></doc>
<argument name="self"></argument>
<argument name="user_id"></argument>
</function>
<function name="has_module_perms"><doc><![CDATA[
        Returns True if user_obj has any permissions in the given app_label.
        ]]></doc>
<argument name="self"></argument>
<argument name="user_obj"></argument>
<argument name="app_label"></argument>
</function>
</package>
<package name="django.contrib.auth.tokens" file="/django/contrib/auth/tokens.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_function name="salted_hmac" module="django.utils.crypto"></import_function>
<import_function name="int_to_base36" module="django.utils.http"></import_function>
<import_function name="base36_to_int" module="django.utils.http"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_class name="date" module="datetime"></import_class>
<attribute name="default_token_generator" type="PasswordResetTokenGenerator"><value><![CDATA[<django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x967deec>]]></value>
</attribute>
<class name="PasswordResetTokenGenerator"></class>
<doc><![CDATA[
    Strategy object used to generate and check tokens for the password
    reset mechanism.
    ]]></doc>
<function name="_today"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_num_days"><doc></doc>
<argument name="self"></argument>
<argument name="dt"></argument>
</function>
<function name="_make_token_with_timestamp"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
<argument name="timestamp"></argument>
</function>
<function name="check_token"><doc><![CDATA[
        Check that a password reset token is correct for a given user.
        ]]></doc>
<argument name="self"></argument>
<argument name="user"></argument>
<argument name="token"></argument>
</function>
<function name="make_token"><doc><![CDATA[
        Returns a token that can be used once to do a password reset
        for the given user.
        ]]></doc>
<argument name="self"></argument>
<argument name="user"></argument>
</function>
<function name="_make_token_with_timestamp_old"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
<argument name="timestamp"></argument>
</function>
</package>
<package name="django.contrib.auth.middleware" file="/django/contrib/auth/middleware.pyc"><doc></doc>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="auth" type="module"><value><![CDATA[<module 'django.contrib.auth' from '/usr/local/lib/python2.7/dist-packages/django/contrib/auth/__init__.pyc'>]]></value>
</attribute>
<class name="RemoteUserMiddleware"></class>
<doc><![CDATA[
    Middleware for utilizing Web-server-provided authentication.

    If request.user is not authenticated, then this middleware attempts to
    authenticate the username passed in the ``REMOTE_USER`` request header.
    If authentication is successful, the user is automatically logged in to
    persist the user in the session.

    The header used is configurable and defaults to ``REMOTE_USER``.  Subclass
    this class and change the ``header`` attribute if you need to use a
    different header.
    ]]></doc>
<attribute name="header" type="str"><value><![CDATA[REMOTE_USER]]></value>
</attribute>
<function name="process_request"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="clean_username"><doc><![CDATA[
        Allows the backend to clean the username, if the backend defines a
        clean_username method.
        ]]></doc>
<argument name="self"></argument>
<argument name="username"></argument>
<argument name="request"></argument>
</function>
<class name="AuthenticationMiddleware"></class>
<doc></doc>
<function name="process_request"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<class name="LazyUser"></class>
<doc></doc>
<function name="__get__"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj_type" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.auth.admin" file="/django/contrib/auth/admin.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="method_decorator" module="django.utils.decorators"></import_function>
<import_function name="csrf_protect_m" module="django.utils.decorators"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="get_object_or_404" module="django.shortcuts"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="UserChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="Group" module="django.contrib.auth.models"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<import_class name="UserCreationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="AdminPasswordChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="admin" type="module"><value><![CDATA[<module 'django.contrib.admin' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/__init__.pyc'>]]></value>
</attribute>
<attribute name="messages" type="module"><value><![CDATA[<module 'django.contrib.messages' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/__init__.pyc'>]]></value>
</attribute>
<class name="UserAdmin"></class>
<doc></doc>
<import_class name="form" module="django.contrib.auth.forms"></import_class>
<import_class name="change_password_form" module="django.contrib.auth.forms"></import_class>
<import_class name="add_form" module="django.contrib.auth.forms"></import_class>
<attribute name="search_fields" type="tuple"><value><![CDATA[('username', 'first_name', 'last_name', 'email')]]></value>
</attribute>
<attribute name="filter_horizontal" type="tuple"><value><![CDATA[('user_permissions',)]]></value>
</attribute>
<attribute name="fieldsets" type="tuple"><value><![CDATA[((None, {'fields': ('username', 'password')}), (<django.utils.functional.__proxy__ object at 0x968752c>, {'fields': ('first_name', 'last_name', 'email')}), (<django.utils.functional.__proxy__ object at 0x96d3a6c>, {'fields': ('is_active', 'is_staff', 'is_superuser', 'user_permissions')}), (<django.utils.functional.__proxy__ object at 0x96d3a8c>, {'fields': ('last_login', 'date_joined')}), (<django.utils.functional.__proxy__ object at 0x97205ec>, {'fields': ('groups',)}))]]></value>
</attribute>
<attribute name="add_form_template" type="str"><value><![CDATA[admin/auth/user/add_form.html]]></value>
</attribute>
<attribute name="change_user_password_template" type="NoneType"><value></value>
</attribute>
<attribute name="ordering" type="tuple"><value><![CDATA[('username',)]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x9725284>]]></value>
</attribute>
<attribute name="list_display" type="tuple"><value><![CDATA[('username', 'email', 'first_name', 'last_name', 'is_staff')]]></value>
</attribute>
<attribute name="add_fieldsets" type="tuple"><value><![CDATA[((None, {'fields': ('username', 'password1', 'password2'), 'classes': ('wide',)}),)]]></value>
</attribute>
<attribute name="list_filter" type="tuple"><value><![CDATA[('is_staff', 'is_superuser', 'is_active')]]></value>
</attribute>
<function name="user_change_password"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="id"></argument>
</function>
<function name="get_form" kwargs="kwargs"><doc><![CDATA[
        Use special form during user creation
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="get_fieldsets"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="add_view" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="response_add"><doc><![CDATA[
        Determines the HttpResponse for the add_view stage. It mostly defers to
        its superclass implementation but is customized because the User model
        has a slightly different workflow.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj"></argument>
<argument name="post_url_continue" type="str"><value><![CDATA[../%s/]]></value>
</argument>
</function>
<function name="get_urls"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="url"></argument>
</function>
<class name="GroupAdmin"></class>
<doc></doc>
<attribute name="ordering" type="tuple"><value><![CDATA[('name',)]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x97251e4>]]></value>
</attribute>
<attribute name="search_fields" type="tuple"><value><![CDATA[('name',)]]></value>
</attribute>
<attribute name="filter_horizontal" type="tuple"><value><![CDATA[('permissions',)]]></value>
</attribute>
</package>
<package name="django.shortcuts" file="/django/shortcuts/__init__.pyc"><doc><![CDATA[
This module collects helper functions and classes that "span" multiple levels
of MVC. In other words, these functions/classes introduce controlled coupling
for convenience's sake.
]]></doc>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="Manager" module="django.db.models.manager"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="HttpResponsePermanentRedirect" module="django.http"></import_class>
<attribute name="urlresolvers" type="module"><value><![CDATA[<module 'django.core.urlresolvers' from '/usr/local/lib/python2.7/dist-packages/django/core/urlresolvers.pyc'>]]></value>
</attribute>
<attribute name="loader" type="module"><value><![CDATA[<module 'django.template.loader' from '/usr/local/lib/python2.7/dist-packages/django/template/loader.pyc'>]]></value>
</attribute>
<function name="redirect" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns an HttpResponseRedirect to the apropriate URL for the arguments
    passed.

    The arguments could be:

        * A model: the model's `get_absolute_url()` function will be called.

        * A view name, possibly with arguments: `urlresolvers.reverse()` will
          be used to reverse-resolve the name.

        * A URL, which will be used as-is for the redirect location.

    By default issues a temporary redirect; pass permanent=True to issue a
    permanent redirect
    ]]></doc>
<argument name="to"></argument>
</function>
<function name="get_list_or_404" args="args" kwargs="kwargs"><doc><![CDATA[
    Uses filter() to return a list of objects, or raise a Http404 exception if
    the list is empty.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the filter() query.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="render" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns a HttpResponse whose content is filled with the result of calling
    django.template.loader.render_to_string() with the passed arguments.
    Uses a RequestContext by default.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="_get_queryset"><doc><![CDATA[
    Returns a QuerySet from a Model, Manager, or QuerySet. Created to make
    get_object_or_404 and get_list_or_404 more DRY.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="get_object_or_404" args="args" kwargs="kwargs"><doc><![CDATA[
    Uses get() to return an object, or raises a Http404 exception if the object
    does not exist.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the get() query.

    Note: Like with get(), an MultipleObjectsReturned will be raised if more than one
    object is found.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="render_to_response" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns a HttpResponse whose content is filled with the result of calling
    django.template.loader.render_to_string() with the passed arguments.
    ]]></doc>
</function>
</package>
<package name="django.contrib.admin" file="/django/contrib/admin/__init__.pyc"><doc></doc>
<import_attribute name="site" type="AdminSite" module="django.contrib.admin.sites"></import_attribute>
<import_class name="StackedInline" module="django.contrib.admin.options"></import_class>
<import_class name="AdminSite" module="django.contrib.admin.sites"></import_class>
<import_class name="TabularInline" module="django.contrib.admin.options"></import_class>
<import_class name="ModelAdmin" module="django.contrib.admin.options"></import_class>
<attribute name="actions" type="module"><value><![CDATA[<module 'django.contrib.admin.actions' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/actions.pyc'>]]></value>
</attribute>
<attribute name="sites" type="module"><value><![CDATA[<module 'django.contrib.admin.sites' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/sites.pyc'>]]></value>
</attribute>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.contrib.admin.forms' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/forms.pyc'>]]></value>
</attribute>
<attribute name="widgets" type="module"><value><![CDATA[<module 'django.contrib.admin.widgets' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/widgets.pyc'>]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="util" type="module"><value><![CDATA[<module 'django.contrib.admin.util' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/util.pyc'>]]></value>
</attribute>
<attribute name="ACTION_CHECKBOX_NAME" type="str"><value><![CDATA[_selected_action]]></value>
</attribute>
<attribute name="helpers" type="module"><value><![CDATA[<module 'django.contrib.admin.helpers' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/helpers.pyc'>]]></value>
</attribute>
<attribute name="validation" type="module"><value><![CDATA[<module 'django.contrib.admin.validation' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/validation.pyc'>]]></value>
</attribute>
<attribute name="options" type="module"><value><![CDATA[<module 'django.contrib.admin.options' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/options.pyc'>]]></value>
</attribute>
<function name="autodiscover"><doc><![CDATA[
    Auto-discover INSTALLED_APPS admin.py modules and fail silently when
    not present. This forces an import on them to register any admin bits they
    may want.
    ]]></doc>
</function>
</package>
<package name="django.contrib.admin.models" file="/django/contrib/admin/models.pyc"><doc></doc>
<import_function name="quote" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<attribute name="CHANGE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="ADDITION" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="DELETION" type="int"><value><![CDATA[3]]></value>
</attribute>
<class name="LogEntry"></class>
<doc><![CDATA[LogEntry(id, action_time, user_id, content_type_id, object_id, object_repr, action_flag, change_message)]]></doc>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<import_attribute name="content_type" type="ReverseSingleRelatedObjectDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_attribute name="user" type="ReverseSingleRelatedObjectDescriptor" module="django.db.models.fields.related"></import_attribute>
<import_function name="get_previous_by_action_time" module="django.utils.functional"></import_function>
<import_function name="get_next_by_action_time" module="django.utils.functional"></import_function>
<attribute name="objects" type="LogEntryManager"><value><![CDATA[<django.contrib.admin.models.LogEntryManager object at 0x973f9ac>]]></value>
</attribute>
<attribute name="_default_manager" type="LogEntryManager"><value><![CDATA[<django.contrib.admin.models.LogEntryManager object at 0x973f9ac>]]></value>
</attribute>
<function name="get_edited_object"><doc><![CDATA[Returns the edited object represented by this log entry]]></doc>
<argument name="self"></argument>
</function>
<function name="get_admin_url"><doc><![CDATA[
        Returns the admin URL to edit the object represented by this log entry.
        This is relative to the Django admin index page.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="is_deletion"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_change"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_addition"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="LogEntryManager"></class>
<doc></doc>
<function name="log_action"><doc></doc>
<argument name="self"></argument>
<argument name="user_id"></argument>
<argument name="content_type_id"></argument>
<argument name="object_id"></argument>
<argument name="object_repr"></argument>
<argument name="action_flag"></argument>
<argument name="change_message" type="str"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.admin.filterspecs" file="/django/contrib/admin/filterspecs.pyc"><doc><![CDATA[
FilterSpec encapsulates the logic for displaying filters in the Django admin.
Filters are specified in models with the "list_filter" option.

Each filter subclass knows how to display a filter for a field that passes a
certain test -- e.g. being a DateField or ForeignKey.
]]></doc>
<depends name="datetime"></depends>
<import_function name="get_limit_choices_to_from_path" module="django.contrib.admin.util"></import_function>
<import_function name="reverse_field_path" module="django.contrib.admin.util"></import_function>
<import_function name="get_model_from_relation" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<class name="RelatedFilterSpec"></class>
<doc></doc>
<function name="title"><doc></doc>
<argument name="self"></argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<function name="has_output"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<class name="BooleanFieldFilterSpec"></class>
<doc></doc>
<function name="title"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<class name="FilterSpec"></class>
<doc></doc>
<attribute name="create" type="instancemethod"><value><![CDATA[<bound method type.create of <class 'django.contrib.admin.filterspecs.FilterSpec'>>]]></value>
</attribute>
<attribute name="register" type="instancemethod"><value><![CDATA[<bound method type.register of <class 'django.contrib.admin.filterspecs.FilterSpec'>>]]></value>
</attribute>
<attribute name="filter_specs" type="list"><value><![CDATA[[(<function <lambda> at 0x974810c>, <class 'django.contrib.admin.filterspecs.RelatedFilterSpec'>), (<function <lambda> at 0x97483ac>, <class 'django.contrib.admin.filterspecs.BooleanFieldFilterSpec'>), (<function <lambda> at 0x974848c>, <class 'django.contrib.admin.filterspecs.ChoicesFilterSpec'>), (<function <lambda> at 0x9748534>, <class 'django.contrib.admin.filterspecs.DateFieldFilterSpec'>), (<function <lambda> at 0x9748614>, <class 'django.contrib.admin.filterspecs.AllValuesFilterSpec'>)]]]></value>
</attribute>
<function name="title"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_output"><doc></doc>
<argument name="self"></argument>
</function>
<function name="output"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<class name="AllValuesFilterSpec"></class>
<doc></doc>
<function name="title"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<class name="ChoicesFilterSpec"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
<class name="DateFieldFilterSpec"></class>
<doc></doc>
<function name="title"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="f"></argument>
<argument name="request"></argument>
<argument name="params"></argument>
<argument name="model"></argument>
<argument name="model_admin"></argument>
<argument name="field_path" type="NoneType"><value></value>
</argument>
</function>
<function name="choices"><doc></doc>
<argument name="self"></argument>
<argument name="cl"></argument>
</function>
</package>
<package name="django.contrib.admin.options" file="/django/contrib/admin/options.pyc"><doc></doc>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="unquote" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="model_format_dict" module="django.contrib.admin.util"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="csrf_protect_m" module="django.utils.decorators"></import_function>
<import_function name="method_decorator" module="django.utils.decorators"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="get_deleted_objects" module="django.contrib.admin.util"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="modelform_factory" module="django.forms.models"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="modelformset_factory" module="django.forms.models"></import_function>
<import_function name="inlineformset_factory" module="django.forms.models"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="get_object_or_404" module="django.shortcuts"></import_function>
<import_function name="all_valid" module="django.forms.formsets"></import_function>
<import_function name="escapejs" module="django.utils.html"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="Paginator" module="django.core.paginator"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="BaseInlineFormSet" module="django.forms.models"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="template" type="module"><value><![CDATA[<module 'django.template' from '/usr/local/lib/python2.7/dist-packages/django/template/__init__.pyc'>]]></value>
</attribute>
<attribute name="widgets" type="module"><value><![CDATA[<module 'django.contrib.admin.widgets' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/widgets.pyc'>]]></value>
</attribute>
<attribute name="FORMFIELD_FOR_DBFIELD_DEFAULTS" type="dict"><value><![CDATA[{<class 'django.db.models.fields.files.FileField'>: {'widget': <class 'django.contrib.admin.widgets.AdminFileWidget'>}, <class 'django.db.models.fields.TimeField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTimeWidget'>}, <class 'django.db.models.fields.DateField'>: {'widget': <class 'django.contrib.admin.widgets.AdminDateWidget'>}, <class 'django.db.models.fields.BigIntegerField'>: {'widget': <class 'django.contrib.admin.widgets.AdminIntegerFieldWidget'>}, <class 'django.db.models.fields.URLField'>: {'widget': <class 'django.contrib.admin.widgets.AdminURLFieldWidget'>}, <class 'django.db.models.fields.DateTimeField'>: {'widget': <class 'django.contrib.admin.widgets.AdminSplitDateTime'>, 'form_class': <class 'django.forms.fields.SplitDateTimeField'>}, <class 'django.db.models.fields.files.ImageField'>: {'widget': <class 'django.contrib.admin.widgets.AdminFileWidget'>}, <class 'django.db.models.fields.TextField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTextareaWidget'>}, <class 'django.db.models.fields.CharField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTextInputWidget'>}, <class 'django.db.models.fields.IntegerField'>: {'widget': <class 'django.contrib.admin.widgets.AdminIntegerFieldWidget'>}}]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="messages" type="module"><value><![CDATA[<module 'django.contrib.messages' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/__init__.pyc'>]]></value>
</attribute>
<attribute name="helpers" type="module"><value><![CDATA[<module 'django.contrib.admin.helpers' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/helpers.pyc'>]]></value>
</attribute>
<function name="get_ul_class"><doc></doc>
<argument name="x"></argument>
</function>
<class name="IncorrectLookupParameters"></class>
<doc></doc>
<class name="StackedInline"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d6234>]]></value>
</attribute>
<attribute name="template" type="str"><value><![CDATA[admin/edit_inline/stacked.html]]></value>
</attribute>
<class name="TabularInline"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d62ac>]]></value>
</attribute>
<attribute name="template" type="str"><value><![CDATA[admin/edit_inline/tabular.html]]></value>
</attribute>
<class name="InlineModelAdmin"></class>
<doc><![CDATA[
    Options for inline editing of ``model`` instances.

    Provide ``name`` to specify the attribute name of the ``ForeignKey`` from
    ``model`` to its parent. This is required if ``model`` has more than one
    ``ForeignKey`` to its parent.
    ]]></doc>
<import_class name="formset" module="django.forms.models"></import_class>
<attribute name="extra" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="can_delete" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="fk_name" type="NoneType"><value></value>
</attribute>
<attribute name="max_num" type="NoneType"><value></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d6194>]]></value>
</attribute>
<attribute name="verbose_name_plural" type="NoneType"><value></value>
</attribute>
<attribute name="template" type="NoneType"><value></value>
</attribute>
<attribute name="model" type="NoneType"><value></value>
</attribute>
<attribute name="verbose_name" type="NoneType"><value></value>
</attribute>
<function name="get_fieldsets"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="parent_model"></argument>
<argument name="admin_site"></argument>
</function>
<function name="get_formset" kwargs="kwargs"><doc><![CDATA[Returns a BaseInlineFormSet class for use in admin add/change views.]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<class name="BaseModelAdmin"></class>
<doc><![CDATA[Functionality common to both ModelAdmin and InlineAdmin.]]></doc>
<import_class name="__metaclass__" module="django.forms.widgets"></import_class>
<import_class name="form" module="django.forms.models"></import_class>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d602c>]]></value>
</attribute>
<attribute name="formfield_overrides" type="dict"><value></value>
</attribute>
<attribute name="prepopulated_fields" type="dict"><value></value>
</attribute>
<attribute name="readonly_fields" type="tuple"><value></value>
</attribute>
<attribute name="radio_fields" type="dict"><value></value>
</attribute>
<attribute name="filter_vertical" type="tuple"><value></value>
</attribute>
<attribute name="exclude" type="NoneType"><value></value>
</attribute>
<attribute name="raw_id_fields" type="tuple"><value></value>
</attribute>
<attribute name="ordering" type="NoneType"><value></value>
</attribute>
<attribute name="filter_horizontal" type="tuple"><value></value>
</attribute>
<attribute name="declared_fieldsets" type="property"><value><![CDATA[<property object at 0x96cef54>]]></value>
</attribute>
<attribute name="fieldsets" type="NoneType"><value></value>
</attribute>
<attribute name="fields" type="NoneType"><value></value>
</attribute>
<function name="formfield_for_choice_field" kwargs="kwargs"><doc><![CDATA[
        Get a form Field for a database Field that has declared choices.
        ]]></doc>
<argument name="self"></argument>
<argument name="db_field"></argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<function name="queryset"><doc><![CDATA[
        Returns a QuerySet of all model instances that can be edited by the
        admin site. This is used by changelist_view.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="formfield_for_dbfield" kwargs="kwargs"><doc><![CDATA[
        Hook for specifying the form Field instance for a given database Field
        instance.

        If kwargs are given, they're passed to the form Field's constructor.
        ]]></doc>
<argument name="self"></argument>
<argument name="db_field"></argument>
</function>
<function name="formfield_for_foreignkey" kwargs="kwargs"><doc><![CDATA[
        Get a form Field for a ForeignKey.
        ]]></doc>
<argument name="self"></argument>
<argument name="db_field"></argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="lookup_allowed"><doc></doc>
<argument name="self"></argument>
<argument name="lookup"></argument>
<argument name="value"></argument>
</function>
<function name="_declared_fieldsets"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_readonly_fields"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="formfield_for_manytomany" kwargs="kwargs"><doc><![CDATA[
        Get a form Field for a ManyToManyField.
        ]]></doc>
<argument name="self"></argument>
<argument name="db_field"></argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelAdmin"></class>
<doc><![CDATA[Encapsulates all admin options and functionality for a given model.]]></doc>
<import_class name="paginator" module="django.core.paginator"></import_class>
<import_class name="action_form" module="django.contrib.admin.helpers"></import_class>
<attribute name="list_select_related" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="actions_on_bottom" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="actions_selection_counter" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="search_fields" type="tuple"><value></value>
</attribute>
<attribute name="actions" type="list"><value></value>
</attribute>
<attribute name="save_as" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="save_on_top" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="delete_selected_confirmation_template" type="NoneType"><value></value>
</attribute>
<attribute name="list_editable" type="tuple"><value></value>
</attribute>
<attribute name="change_list_template" type="NoneType"><value></value>
</attribute>
<attribute name="actions_on_top" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="object_history_template" type="NoneType"><value></value>
</attribute>
<attribute name="list_display" type="tuple"><value><![CDATA[('__str__',)]]></value>
</attribute>
<attribute name="list_filter" type="tuple"><value></value>
</attribute>
<attribute name="list_display_links" type="tuple"><value></value>
</attribute>
<attribute name="add_form_template" type="NoneType"><value></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d607c>]]></value>
</attribute>
<attribute name="date_hierarchy" type="NoneType"><value></value>
</attribute>
<attribute name="change_form_template" type="NoneType"><value></value>
</attribute>
<attribute name="inlines" type="list"><value></value>
</attribute>
<attribute name="delete_confirmation_template" type="NoneType"><value></value>
</attribute>
<attribute name="list_per_page" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="urls" type="property"><value><![CDATA[<property object at 0x96d6054>]]></value>
</attribute>
<function name="has_delete_permission"><doc><![CDATA[
        Returns True if the given request has permission to change the given
        Django model instance, the default implementation doesn't examine the
        `obj` parameter.

        Can be overriden by the user in subclasses. In such case it should
        return True if the given request has permission to delete the `obj`
        model instance. If `obj` is None, this should return True if the given
        request has permission to delete *any* object of the given type.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="has_add_permission"><doc><![CDATA[
        Returns True if the given request has permission to add an object.
        Can be overriden by the user in subclasses.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="save_model"><doc><![CDATA[
        Given a model instance save it to the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj"></argument>
<argument name="form"></argument>
<argument name="change"></argument>
</function>
<function name="construct_change_message"><doc><![CDATA[
        Construct a change message from a changed object.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="form"></argument>
<argument name="formsets"></argument>
</function>
<function name="get_paginator"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="queryset"></argument>
<argument name="per_page"></argument>
<argument name="orphans" type="int"><value></value>
</argument>
<argument name="allow_empty_first_page" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="get_changelist" kwargs="kwargs"><doc><![CDATA[
        Returns the ChangeList class for use on the changelist page.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="get_changelist_form" kwargs="kwargs"><doc><![CDATA[
        Returns a Form class for use in the Formset on the changelist page.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="response_add"><doc><![CDATA[
        Determines the HttpResponse for the add_view stage.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj"></argument>
<argument name="post_url_continue" type="str"><value><![CDATA[../%s/]]></value>
</argument>
</function>
<function name="delete_model"><doc><![CDATA[
        Given a model instance delete it from the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj"></argument>
</function>
<function name="get_urls"><doc></doc>
<argument name="self"></argument>
</function>
<function name="response_change"><doc><![CDATA[
        Determines the HttpResponse for the change_view stage.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj"></argument>
</function>
<function name="get_changelist_formset" kwargs="kwargs"><doc><![CDATA[
        Returns a FormSet class for use on the changelist page if list_editable
        is used.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="log_deletion"><doc><![CDATA[
        Log that an object will be deleted. Note that this method is called
        before the deletion.

        The default implementation creates an admin LogEntry object.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="object"></argument>
<argument name="object_repr"></argument>
</function>
<function name="response_action"><doc><![CDATA[
        Handle an admin action. This is called if a request is POSTed to the
        changelist; it returns an HttpResponse if the action was handled, and
        None otherwise.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="queryset"></argument>
</function>
<function name="render_change_form"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="context"></argument>
<argument name="add" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="change" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="form_url" type="str"><value></value>
</argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="delete_view" args="args" kwargs="kwargs"><doc><![CDATA[The 'delete' admin view for this model.]]></doc>
<argument name="self"></argument>
</function>
<function name="change_view" args="args" kwargs="kwargs"><doc><![CDATA[The 'change' admin view for this model.]]></doc>
<argument name="self"></argument>
</function>
<function name="get_action_choices"><doc><![CDATA[
        Return a list of choices for use in a form object.  Each choice is a
        tuple (name, description).
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="default_choices" type="list"><value><![CDATA[[('', '---------')]]]></value>
</argument>
</function>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save_formset"><doc><![CDATA[
        Given an inline formset save it to the database.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="form"></argument>
<argument name="formset"></argument>
<argument name="change"></argument>
</function>
<function name="get_form" kwargs="kwargs"><doc><![CDATA[
        Returns a Form class for use in the admin add view. This is used by
        add_view and change_view.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="get_fieldsets"><doc><![CDATA[Hook for specifying fieldsets for the add form.]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="add_view" args="args" kwargs="kwargs"><doc><![CDATA[The 'add' admin view for this model.]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="model"></argument>
<argument name="admin_site"></argument>
</function>
<function name="get_model_perms"><doc><![CDATA[
        Returns a dict of all perms for this model. This dict has the keys
        ``add``, ``change``, and ``delete`` mapping to the True/False for each
        of those actions.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="log_change"><doc><![CDATA[
        Log that an object has been successfully changed.

        The default implementation creates an admin LogEntry object.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="object"></argument>
<argument name="message"></argument>
</function>
<function name="get_action"><doc><![CDATA[
        Return a given action from a parameter, which can either be a callable,
        or the name of a method on the ModelAdmin.  Return is a tuple of
        (callable, name, description).
        ]]></doc>
<argument name="self"></argument>
<argument name="action"></argument>
</function>
<function name="history_view"><doc><![CDATA[The 'history' admin view for this model.]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="object_id"></argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="action_checkbox"><doc><![CDATA[
        A list_display column containing a checkbox widget.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="has_change_permission"><doc><![CDATA[
        Returns True if the given request has permission to change the given
        Django model instance, the default implementation doesn't examine the
        `obj` parameter.

        Can be overriden by the user in subclasses. In such case it should
        return True if the given request has permission to change the `obj`
        model instance. If `obj` is None, this should return True if the given
        request has permission to change *any* object of the given type.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="log_addition"><doc><![CDATA[
        Log that an object has been successfully added.

        The default implementation creates an admin LogEntry object.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="object"></argument>
</function>
<function name="save_form"><doc><![CDATA[
        Given a ModelForm return an unsaved instance. ``change`` is True if
        the object is being changed, and False if it's being added.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="form"></argument>
<argument name="change"></argument>
</function>
<function name="get_actions"><doc><![CDATA[
        Return a dictionary mapping the names of all actions for this
        ModelAdmin to a tuple of (callable, name, description) for each action.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="get_object"><doc><![CDATA[
        Returns an instance matching the primary key provided. ``None``  is
        returned if no match is found (or the object_id failed validation
        against the primary key field).
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="object_id"></argument>
</function>
<function name="changelist_view" args="args" kwargs="kwargs"><doc><![CDATA[The 'change list' admin view for this model.]]></doc>
<argument name="self"></argument>
</function>
<function name="get_formsets"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="obj" type="NoneType"><value></value>
</argument>
</function>
<function name="message_user"><doc><![CDATA[
        Send a message to the user. The default implementation
        posts a message using the django.contrib.messages backend.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="message"></argument>
</function>
</package>
<package name="django.template" file="/django/template/__init__.pyc"><doc><![CDATA[
This is the Django template system.

How it works:

The Lexer.tokenize() function converts a template string (i.e., a string containing
markup with custom template tags) to tokens, which can be either plain text
(TOKEN_TEXT), variables (TOKEN_VAR) or block statements (TOKEN_BLOCK).

The Parser() class takes a list of tokens in its constructor, and its parse()
method returns a compiled template -- which is, under the hood, a list of
Node objects.

Each Node is responsible for creating some sort of output -- e.g. simple text
(TextNode), variable values in a given context (VariableNode), results of basic
logic (IfNode), results of looping (ForNode), or anything else. The core Node
types are TextNode, VariableNode, IfNode and ForNode, but plugin modules can
define their own custom node types.

Each Node has a render() method, which takes a Context and returns a string of
the rendered node. For example, the render() method of a Variable Node returns
the variable's value as a string. The render() method of an IfNode returns the
rendered output of whatever was inside the loop, recursively.

The Template class is a convenient wrapper that takes care of template
compilation and rendering.

Usage:

The only thing you should ever use directly in this file is the Template class.
Create a compiled template object with a template_string, then call render()
with a context. In the compilation stage, the TemplateSyntaxError exception
will be raised if the template doesn't have proper syntax.

Sample code:

>>> from django import template
>>> s = u'<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'
>>> t = template.Template(s)

(t is now a compiled template, and its render() method can be called multiple
times with multiple contexts)

>>> c = template.Context({'test':True, 'varvalue': 'Hello'})
>>> t.render(c)
u'<html><h1>Hello</h1></html>'
>>> c = template.Context({'test':False, 'varvalue': 'Hello'})
>>> t.render(c)
u'<html></html>'
]]></doc>
<import_function name="resolve_variable" module="django.template.base"></import_function>
<import_function name="get_library" module="django.template.base"></import_function>
<import_function name="import_library" module="django.template.base"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="compile_string" module="django.template.base"></import_function>
<import_function name="unescape_string_literal" module="django.utils.text"></import_function>
<import_function name="generic_tag_compiler" module="django.template.base"></import_function>
<import_function name="get_templatetags_modules" module="django.template.base"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="InvalidTemplateLibrary" module="django.template.base"></import_class>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="FilterExpression" module="django.template.base"></import_class>
<import_class name="ContextPopException" module="django.template.context"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="VariableDoesNotExist" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="TextNode" module="django.template.base"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="Lexer" module="django.template.base"></import_class>
<import_class name="Token" module="django.template.base"></import_class>
<import_class name="StringOrigin" module="django.template.base"></import_class>
<import_class name="VariableNode" module="django.template.base"></import_class>
<import_class name="Parser" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<import_class name="TemplateEncodingError" module="django.template.base"></import_class>
<import_class name="TokenParser" module="django.template.base"></import_class>
<attribute name="TOKEN_VAR" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="FILTER_ARGUMENT_SEPARATOR" type="str"><value><![CDATA[:]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="UNKNOWN_SOURCE" type="str"><value><![CDATA[<unknown source>]]></value>
</attribute>
<attribute name="defaulttags" type="module"><value><![CDATA[<module 'django.template.defaulttags' from '/usr/local/lib/python2.7/dist-packages/django/template/defaulttags.pyc'>]]></value>
</attribute>
<attribute name="constant_string" type="str"><value><![CDATA[(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')]]></value>
</attribute>
<attribute name="TOKEN_COMMENT" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="filter_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x95d4168>]]></value>
</attribute>
<attribute name="builtins" type="list"><value><![CDATA[[<django.template.base.Library object at 0x95b780c>, <django.template.base.Library object at 0x95bca8c>, <django.template.base.Library object at 0x95e774c>]]]></value>
</attribute>
<attribute name="smartif" type="module"><value><![CDATA[<module 'django.template.smartif' from '/usr/local/lib/python2.7/dist-packages/django/template/smartif.pyc'>]]></value>
</attribute>
<attribute name="defaultfilters" type="module"><value><![CDATA[<module 'django.template.defaultfilters' from '/usr/local/lib/python2.7/dist-packages/django/template/defaultfilters.pyc'>]]></value>
</attribute>
<attribute name="libraries" type="dict"><value></value>
</attribute>
<attribute name="TOKEN_TEXT" type="int"><value></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="TRANSLATOR_COMMENT_MARK" type="str"><value><![CDATA[Translators]]></value>
</attribute>
<attribute name="loader_tags" type="module"><value><![CDATA[<module 'django.template.loader_tags' from '/usr/local/lib/python2.7/dist-packages/django/template/loader_tags.pyc'>]]></value>
</attribute>
<attribute name="ALLOWED_VARIABLE_CHARS" type="str"><value><![CDATA[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.template.base' from '/usr/local/lib/python2.7/dist-packages/django/template/base.pyc'>]]></value>
</attribute>
<attribute name="FILTER_SEPARATOR" type="str"><value><![CDATA[|]]></value>
</attribute>
<attribute name="loader" type="module"><value><![CDATA[<module 'django.template.loader' from '/usr/local/lib/python2.7/dist-packages/django/template/loader.pyc'>]]></value>
</attribute>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x95cd6e0>]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Template', 'Context', 'RequestContext', 'compile_string')]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="TOKEN_BLOCK" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="context" type="module"><value><![CDATA[<module 'django.template.context' from '/usr/local/lib/python2.7/dist-packages/django/template/context.pyc'>]]></value>
</attribute>
<attribute name="VARIABLE_ATTRIBUTE_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="filter_raw_string" type="str"><value><![CDATA[
^(?P<constant>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
^(?P<var>[\w\.]+|[-+\.]?\d[\d\.e]*)|
 (?:\|
     (?P<filter_name>\w+)
         (?:\:
             (?:
              (?P<constant_arg>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
              (?P<var_arg>[\w\.]+|[-+\.]?\d[\d\.e]*)
             )
         )?
 )]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
</package>
<package name="django.template.response" file="/django/template/response.pyc"><doc></doc>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<attribute name="loader" type="module"><value><![CDATA[<module 'django.template.loader' from '/usr/local/lib/python2.7/dist-packages/django/template/loader.pyc'>]]></value>
</attribute>
<class name="TemplateResponse"></class>
<doc></doc>
<function name="__getstate__"><doc><![CDATA[Pickling support function.

        Ensures that the object can't be pickled before it has been
        rendered, and that the pickled state only includes rendered
        data, not the data used to construct the response.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="template"></argument>
<argument name="context" type="NoneType"><value></value>
</argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
<argument name="status" type="NoneType"><value></value>
</argument>
<argument name="content_type" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
</function>
<function name="resolve_context"><doc><![CDATA[Convert context data into a full RequestContext object
        (assuming it isn't already a Context object).
        ]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="ContentNotRenderedError"></class>
<doc></doc>
<class name="SimpleTemplateResponse"></class>
<doc></doc>
<attribute name="rendered_content" type="property"><value><![CDATA[<property object at 0x974a6bc>]]></value>
</attribute>
<attribute name="content" type="property"><value><![CDATA[<property object at 0x974a70c>]]></value>
</attribute>
<attribute name="is_rendered" type="property"><value><![CDATA[<property object at 0x974a6e4>]]></value>
</attribute>
<function name="__getstate__"><doc><![CDATA[Pickling support function.

        Ensures that the object can't be pickled before it has been
        rendered, and that the pickled state only includes rendered
        data, not the data used to construct the response.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc><![CDATA[Render (thereby finalizing) the content of the response.

        If the content has already been rendered, this is a no-op.

        Returns the baked response instance.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="add_post_render_callback"><doc><![CDATA[Add a new post-rendering callback.

        If the response has already been rendered, invoke the callback immediately.
        ]]></doc>
<argument name="self"></argument>
<argument name="callback"></argument>
</function>
<function name="_set_content"><doc><![CDATA[Sets the content for the response]]></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="resolve_template"><doc><![CDATA[Accepts a template object, path-to-template or list of paths]]></doc>
<argument name="self"></argument>
<argument name="template"></argument>
</function>
<function name="_get_content"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="template"></argument>
<argument name="context" type="NoneType"><value></value>
</argument>
<argument name="mimetype" type="NoneType"><value></value>
</argument>
<argument name="status" type="NoneType"><value></value>
</argument>
<argument name="content_type" type="NoneType"><value></value>
</argument>
</function>
<function name="resolve_context"><doc><![CDATA[Convert context data into a full Context object
        (assuming it isn't already a Context object).
        ]]></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
</package>
<package name="django.template.debug" file="/django/template/debug.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="localize" module="django.utils.formats"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Parser" module="django.template.base"></import_class>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="Lexer" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="EscapeData" module="django.utils.safestring"></import_class>
<import_class name="VariableNode" module="django.template.base"></import_class>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x95cd6e0>]]></value>
</attribute>
<class name="DebugNodeList"></class>
<doc></doc>
<function name="render_node"><doc></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="context"></argument>
</function>
<class name="DebugParser"></class>
<doc></doc>
<function name="enter_command"><doc></doc>
<argument name="self"></argument>
<argument name="command"></argument>
<argument name="token"></argument>
</function>
<function name="create_nodelist"><doc></doc>
<argument name="self"></argument>
</function>
<function name="compile_function_error"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="e"></argument>
</function>
<function name="unclosed_block_tag"><doc></doc>
<argument name="self"></argument>
<argument name="parse_until"></argument>
</function>
<function name="exit_command"><doc></doc>
<argument name="self"></argument>
</function>
<function name="source_error"><doc></doc>
<argument name="self"></argument>
<argument name="source"></argument>
<argument name="msg"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="lexer"></argument>
</function>
<function name="error"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
<argument name="msg"></argument>
</function>
<function name="extend_nodelist"><doc></doc>
<argument name="self"></argument>
<argument name="nodelist"></argument>
<argument name="node"></argument>
<argument name="token"></argument>
</function>
<function name="create_variable_node"><doc></doc>
<argument name="self"></argument>
<argument name="contents"></argument>
</function>
<class name="DebugLexer"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="template_string"></argument>
<argument name="origin"></argument>
</function>
<function name="create_token"><doc></doc>
<argument name="self"></argument>
<argument name="token_string"></argument>
<argument name="source"></argument>
<argument name="in_tag"></argument>
</function>
<function name="tokenize"><doc><![CDATA[Return a list of tokens from a given template_string]]></doc>
<argument name="self"></argument>
</function>
<class name="DebugVariableNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
</package>
<package name="django.template.loader_tags" file="/django/template/loader_tags.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_function name="token_kwargs" module="django.template.defaulttags"></import_function>
<import_function name="get_template" module="django.template.loader"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="TextNode" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<attribute name="BLOCK_CONTEXT_KEY" type="str"><value><![CDATA[block_context]]></value>
</attribute>
<function name="do_extends"><doc><![CDATA[
    Signal that this template extends a parent template.

    This tag may be used in two ways: ``{% extends "base" %}`` (with quotes)
    uses the literal value "base" as the name of the parent template to extend,
    or ``{% extends variable %}`` uses the value of ``variable`` as either the
    name of the parent template to extend (if it evaluates to a string) or as
    the parent tempate itelf (if it evaluates to a Template object).
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_include"><doc><![CDATA[
    Loads a template and renders it with the current context. You can pass
    additional context using keyword arguments.

    Example::

        {% include "foo/some_include" %}
        {% include "foo/some_include" with bar="BAZZ!" baz="BING!" %}

    Use the ``only`` argument to exclude the current context when rendering
    the included template::

        {% include "foo/some_include" only %}
        {% include "foo/some_include" with bar="1" only %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_block"><doc><![CDATA[
    Define a block that can be overridden by child templates.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<class name="ExtendsNode"></class>
<doc></doc>
<attribute name="must_be_first" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="get_parent"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="nodelist"></argument>
<argument name="parent_name"></argument>
<argument name="parent_name_expr"></argument>
<argument name="template_dirs" type="NoneType"><value></value>
</argument>
</function>
<class name="ExtendsError"></class>
<doc></doc>
<class name="ConstantIncludeNode"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="template_path"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="BaseIncludeNode"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render_template"><doc></doc>
<argument name="self"></argument>
<argument name="template"></argument>
<argument name="context"></argument>
</function>
<class name="BlockContext"></class>
<doc></doc>
<function name="get_block"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="add_blocks"><doc></doc>
<argument name="self"></argument>
<argument name="blocks"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="push"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="block"></argument>
</function>
<function name="pop"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<class name="BlockNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="super"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="nodelist"></argument>
<argument name="parent" type="NoneType"><value></value>
</argument>
</function>
<class name="IncludeNode"></class>
<doc></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="template_name"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
</package>
<package name="django.template.defaultfilters" file="/django/template/defaultfilters.pyc"><doc><![CDATA[Default variable filters.]]></doc>
<depends name="re"></depends>
<depends name="random"></depends>
<depends name="functools"></depends>
<depends name="decimal"></depends>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="wraps" module="functools"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="InvalidOperation" module="decimal"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<attribute name="ROUND_HALF_UP" type="str"><value><![CDATA[ROUND_HALF_UP]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="nan" type="float"><value><![CDATA[nan]]></value>
</attribute>
<attribute name="random_module" type="module"><value><![CDATA[<module 'random' from '/usr/lib/python2.7/random.pyc'>]]></value>
</attribute>
<attribute name="pos_inf" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="neg_inf" type="float"><value><![CDATA[-inf]]></value>
</attribute>
<attribute name="special_floats" type="list"><value><![CDATA[['inf', '-inf', 'nan']]]></value>
</attribute>
<attribute name="formats" type="module"><value><![CDATA[<module 'django.utils.formats' from '/usr/local/lib/python2.7/dist-packages/django/utils/formats.pyc'>]]></value>
</attribute>
<function name="truncatewords" args="args" kwargs="kwargs"><doc><![CDATA[
    Truncates a string after a certain number of words.

    Argument: Number of words to truncate after.

    Newlines within the string are removed.
    ]]></doc>
</function>
<function name="linebreaksbr" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts all newlines in a piece of plain text to HTML line breaks
    (``<br />``).
    ]]></doc>
</function>
<function name="yesno"><doc><![CDATA[
    Given a string mapping values for true, false and (optionally) None,
    returns one of those strings accoding to the value:

    ==========  ======================  ==================================
    Value       Argument                Outputs
    ==========  ======================  ==================================
    ``True``    ``"yeah,no,maybe"``     ``yeah``
    ``False``   ``"yeah,no,maybe"``     ``no``
    ``None``    ``"yeah,no,maybe"``     ``maybe``
    ``None``    ``"yeah,no"``           ``"no"`` (converts None to False
                                        if no mapping for None is given.
    ==========  ======================  ==================================
    ]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="upper" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into all uppercase.]]></doc>
</function>
<function name="urlencode" args="args" kwargs="kwargs"><doc><![CDATA[
    Escapes a value for use in a URL.

    Takes an optional ``safe`` parameter used to determine the characters which
    should not be escaped by Django's ``urlquote`` method. If not provided, the
    default safe characters will be used (but an empty string can be provided
    when *all* characters should be escaped).
    ]]></doc>
</function>
<function name="random"><doc><![CDATA[Returns a random item from the list.]]></doc>
<argument name="value"></argument>
</function>
<function name="striptags" args="args" kwargs="kwargs"><doc><![CDATA[Strips all [X]HTML tags.]]></doc>
</function>
<function name="filesizeformat"><doc><![CDATA[
    Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
    102 bytes, etc).
    ]]></doc>
<argument name="bytes"></argument>
</function>
<function name="pprint"><doc><![CDATA[A wrapper around pprint.pprint -- for debugging, really.]]></doc>
<argument name="value"></argument>
</function>
<function name="timesince"><doc><![CDATA[Formats a date as the time since that date (i.e. "4 days, 6 hours").]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="urlizetrunc" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts URLs into clickable links, truncating URLs to the given character
    limit, and adding 'rel=nofollow' attribute to discourage spamming.

    Argument: Length to truncate URLs to.
    ]]></doc>
</function>
<function name="iriencode" args="args" kwargs="kwargs"><doc><![CDATA[Escapes an IRI value for use in a URL.]]></doc>
</function>
<function name="escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Marks the value as a string that should not be auto-escaped.
    ]]></doc>
</function>
<function name="linebreaks" args="args" kwargs="kwargs"><doc><![CDATA[
    Replaces line breaks in plain text with appropriate HTML; a single
    newline becomes an HTML line break (``<br />``) and a new line
    followed by a blank line becomes a paragraph break (``</p>``).
    ]]></doc>
</function>
<function name="length_is"><doc><![CDATA[Returns a boolean of whether the value's length is the argument.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="removetags" args="args" kwargs="kwargs"><doc><![CDATA[Removes a space separated list of [X]HTML tags from the output.]]></doc>
</function>
<function name="ljust" args="args" kwargs="kwargs"><doc><![CDATA[
    Left-aligns the value in a field of a given width.

    Argument: field size.
    ]]></doc>
</function>
<function name="urlize" args="args" kwargs="kwargs"><doc><![CDATA[Converts URLs in plain text into clickable links.]]></doc>
</function>
<function name="fix_ampersands" args="args" kwargs="kwargs"><doc><![CDATA[Replaces ampersands with ``&amp;`` entities.]]></doc>
</function>
<function name="floatformat"><doc><![CDATA[
    Displays a float to a specified number of decimal places.

    If called without an argument, it displays the floating point number with
    one decimal place -- but only if there's a decimal place to be displayed:

    * num1 = 34.23234
    * num2 = 34.00000
    * num3 = 34.26000
    * {{ num1|floatformat }} displays "34.2"
    * {{ num2|floatformat }} displays "34"
    * {{ num3|floatformat }} displays "34.3"

    If arg is positive, it will always display exactly arg number of decimal
    places:

    * {{ num1|floatformat:3 }} displays "34.232"
    * {{ num2|floatformat:3 }} displays "34.000"
    * {{ num3|floatformat:3 }} displays "34.260"

    If arg is negative, it will display arg number of decimal places -- but
    only if there are places to be displayed:

    * {{ num1|floatformat:"-3" }} displays "34.232"
    * {{ num2|floatformat:"-3" }} displays "34"
    * {{ num3|floatformat:"-3" }} displays "34.260"

    If the input float is infinity or NaN, the (platform-dependent) string
    representation of that value will be displayed.
    ]]></doc>
<argument name="text"></argument>
<argument name="arg" type="int"><value><![CDATA[-1]]></value>
</argument>
</function>
<function name="phone2numeric"><doc><![CDATA[Takes a phone number and converts it in to its numerical equivalent.]]></doc>
<argument name="value"></argument>
</function>
<function name="addslashes" args="args" kwargs="kwargs"><doc><![CDATA[
    Adds slashes before quotes. Useful for escaping strings in CSV, for
    example. Less useful for escaping JavaScript; use the ``escapejs``
    filter instead.
    ]]></doc>
</function>
<function name="slice_"><doc><![CDATA[
    Returns a slice of the list.

    Uses the same syntax as Python's list slicing; see
    http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice
    for an introduction.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="add"><doc><![CDATA[Adds the arg to the value.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="force_escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Escapes a string's HTML. This returns a new string containing the escaped
    characters (as opposed to "escape", which marks the content for later
    possible escaping).
    ]]></doc>
</function>
<function name="make_list" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the value turned into a list.

    For an integer, it's a list of digits.
    For a string, it's a list of characters.
    ]]></doc>
</function>
<function name="divisibleby"><doc><![CDATA[Returns True if the value is devisible by the argument.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="time"><doc><![CDATA[Formats a time according to the given format.]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="unordered_list"><doc><![CDATA[
    Recursively takes a self-nested list and returns an HTML unordered list --
    WITHOUT opening and closing <ul> tags.

    The list is assumed to be in the proper format. For example, if ``var``
    contains: ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``,
    then ``{{ var|unordered_list }}`` would return::

        <li>States
        <ul>
                <li>Kansas
                <ul>
                        <li>Lawrence</li>
                        <li>Topeka</li>
                </ul>
                </li>
                <li>Illinois</li>
        </ul>
        </li>
    ]]></doc>
<argument name="value"></argument>
<argument name="autoescape" type="NoneType"><value></value>
</argument>
</function>
<function name="get_digit"><doc><![CDATA[
    Given a whole number, returns the requested digit of it, where 1 is the
    right-most digit, 2 is the second-right-most digit, etc. Returns the
    original value for invalid input (if input or argument is not an integer,
    or if argument is less than 1). Otherwise, output is always an integer.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="timeuntil"><doc><![CDATA[Formats a date as the time until that date (i.e. "4 days, 6 hours").]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="safeseq"><doc><![CDATA[
    A "safe" filter for sequences. Marks each element in the sequence,
    individually, as safe, after converting them to unicode. Returns a list
    with the results.
    ]]></doc>
<argument name="value"></argument>
</function>
<function name="rjust" args="args" kwargs="kwargs"><doc><![CDATA[
    Right-aligns the value in a field of a given width.

    Argument: field size.
    ]]></doc>
</function>
<function name="safe" args="args" kwargs="kwargs"><doc><![CDATA[
    Marks the value as a string that should not be auto-escaped.
    ]]></doc>
</function>
<function name="wordcount" args="args" kwargs="kwargs"><doc><![CDATA[Returns the number of words.]]></doc>
</function>
<function name="stringformat"><doc><![CDATA[
    Formats the variable according to the arg, a string formatting specifier.

    This specifier uses Python string formating syntax, with the exception that
    the leading "%" is dropped.

    See http://docs.python.org/lib/typesseq-strings.html for documentation
    of Python string formatting
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="linenumbers" args="args" kwargs="kwargs"><doc><![CDATA[Displays text with line numbers.]]></doc>
</function>
<function name="cut" args="args" kwargs="kwargs"><doc><![CDATA[
    Removes all values of arg from the given string.
    ]]></doc>
</function>
<function name="stringfilter"><doc><![CDATA[
    Decorator for filters which should only receive unicode objects. The object
    passed as the first positional argument will be converted to a unicode
    object.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="date"><doc><![CDATA[Formats a date according to the given format.]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="dictsort"><doc><![CDATA[
    Takes a list of dicts, returns that list sorted by the property given in
    the argument.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="dictsortreversed"><doc><![CDATA[
    Takes a list of dicts, returns that list sorted in reverse order by the
    property given in the argument.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="default_if_none"><doc><![CDATA[If value is None, use given default.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="pluralize"><doc><![CDATA[
    Returns a plural suffix if the value is not 1. By default, 's' is used as
    the suffix:

    * If value is 0, vote{{ value|pluralize }} displays "0 votes".
    * If value is 1, vote{{ value|pluralize }} displays "1 vote".
    * If value is 2, vote{{ value|pluralize }} displays "2 votes".

    If an argument is provided, that string is used instead:

    * If value is 0, class{{ value|pluralize:"es" }} displays "0 classes".
    * If value is 1, class{{ value|pluralize:"es" }} displays "1 class".
    * If value is 2, class{{ value|pluralize:"es" }} displays "2 classes".

    If the provided argument contains a comma, the text before the comma is
    used for the singular case and the text after the comma is used for the
    plural case:

    * If value is 0, cand{{ value|pluralize:"y,ies" }} displays "0 candies".
    * If value is 1, cand{{ value|pluralize:"y,ies" }} displays "1 candy".
    * If value is 2, cand{{ value|pluralize:"y,ies" }} displays "2 candies".
    ]]></doc>
<argument name="value"></argument>
<argument name="arg" type="unicode"><value><![CDATA[s]]></value>
</argument>
</function>
<function name="lower" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into all lowercase.]]></doc>
</function>
<function name="join"><doc><![CDATA[
    Joins a list with a string, like Python's ``str.join(list)``.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
<argument name="autoescape" type="NoneType"><value></value>
</argument>
</function>
<function name="center" args="args" kwargs="kwargs"><doc><![CDATA[Centers the value in a field of a given width.]]></doc>
</function>
<function name="default"><doc><![CDATA[If value is unavailable, use given default.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="truncatewords_html" args="args" kwargs="kwargs"><doc><![CDATA[
    Truncates HTML after a certain number of words.

    Argument: Number of words to truncate after.

    Newlines in the HTML are preserved.
    ]]></doc>
</function>
<function name="escapejs" args="args" kwargs="kwargs"><doc><![CDATA[Hex encodes characters for use in JavaScript strings.]]></doc>
</function>
<function name="length"><doc><![CDATA[Returns the length of the value - useful for lists.]]></doc>
<argument name="value"></argument>
</function>
<function name="wordwrap" args="args" kwargs="kwargs"><doc><![CDATA[
    Wraps words at specified line length.

    Argument: number of characters to wrap the text at.
    ]]></doc>
</function>
<function name="last"><doc><![CDATA[Returns the last item in a list]]></doc>
<argument name="value"></argument>
</function>
<function name="title" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into titlecase.]]></doc>
</function>
<function name="capfirst" args="args" kwargs="kwargs"><doc><![CDATA[Capitalizes the first character of the value.]]></doc>
</function>
<function name="slugify" args="args" kwargs="kwargs"><doc><![CDATA[
    Normalizes string, converts to lowercase, removes non-alpha characters,
    and converts spaces to hyphens.
    ]]></doc>
</function>
<function name="first"><doc><![CDATA[Returns the first item in a list.]]></doc>
<argument name="value"></argument>
</function>
</package>
<package name="django.template.smartif" file="/django/template/smartif.pyc"><doc><![CDATA[
Parser and utilities for the smart 'if' tag
]]></doc>
<depends name="operator"></depends>
<depends name="exceptions"></depends>
<attribute name="OPERATORS" type="dict"><value><![CDATA[{'and': <class 'django.template.smartif.Operator'>, '>=': <class 'django.template.smartif.Operator'>, 'not in': <class 'django.template.smartif.Operator'>, '==': <class 'django.template.smartif.Operator'>, '<=': <class 'django.template.smartif.Operator'>, 'in': <class 'django.template.smartif.Operator'>, 'not': <class 'django.template.smartif.Operator'>, '!=': <class 'django.template.smartif.Operator'>, 'or': <class 'django.template.smartif.Operator'>, '=': <class 'django.template.smartif.Operator'>, '<': <class 'django.template.smartif.Operator'>, '>': <class 'django.template.smartif.Operator'>}]]></value>
</attribute>
<attribute name="key" type="str"><value><![CDATA[>]]></value>
</attribute>
<attribute name="operator" type="module"><value><![CDATA[<module 'operator' (built-in)>]]></value>
</attribute>
<attribute name="EndToken" type="EndToken"><value><![CDATA[()]]></value>
</attribute>
<function name="prefix"><doc><![CDATA[
    Creates a prefix operator, given a binding power and a function that
    evaluates the node.
    ]]></doc>
<argument name="bp"></argument>
<argument name="func"></argument>
</function>
<function name="infix"><doc><![CDATA[
    Creates an infix operator, given a binding power and a function that
    evaluates the node
    ]]></doc>
<argument name="bp"></argument>
<argument name="func"></argument>
</function>
<class name="TokenBase"></class>
<doc><![CDATA[
    Base class for operators and literals, mainly for debugging and for throwing
    syntax errors.
    ]]></doc>
<attribute name="value" type="NoneType"><value></value>
</attribute>
<attribute name="id" type="NoneType"><value></value>
</attribute>
<attribute name="second" type="NoneType"><value></value>
</attribute>
<attribute name="first" type="NoneType"><value></value>
</attribute>
<function name="led"><doc></doc>
<argument name="self"></argument>
<argument name="left"></argument>
<argument name="parser"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="nud"><doc></doc>
<argument name="self"></argument>
<argument name="parser"></argument>
</function>
<function name="display"><doc><![CDATA[
        Returns what to display in error messages for this node
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="Literal"></class>
<doc><![CDATA[
    A basic self-resolvable object similar to a Django template variable.
    ]]></doc>
<attribute name="lbp" type="int"><value></value>
</attribute>
<attribute name="id" type="str"><value><![CDATA[literal]]></value>
</attribute>
<function name="display"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="eval"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="nud"><doc></doc>
<argument name="self"></argument>
<argument name="parser"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<class name="IfParser"></class>
<doc></doc>
<import_class name="error_class" module="exceptions"></import_class>
<function name="translate_token"><doc></doc>
<argument name="self"></argument>
<argument name="token"></argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="parse"><doc></doc>
<argument name="self"></argument>
</function>
<function name="create_var"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="expression"><doc></doc>
<argument name="self"></argument>
<argument name="rbp" type="int"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="tokens"></argument>
</function>
<class name="op"></class>
<doc></doc>
<attribute name="lbp" type="int"><value><![CDATA[10]]></value>
</attribute>
<attribute name="id" type="str"><value><![CDATA[>]]></value>
</attribute>
<function name="led"><doc></doc>
<argument name="self"></argument>
<argument name="left"></argument>
<argument name="parser"></argument>
</function>
<function name="eval"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
</package>
<package name="django.template.defaulttags" file="/django/template/defaulttags.pyc"><doc><![CDATA[Default tags used by the template system, available to all templates.]]></doc>
<depends name="re"></depends>
<depends name="sys"></depends>
<depends name="exceptions"></depends>
<depends name="itertools"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_function name="get_library" module="django.template.base"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="InvalidTemplateLibrary" module="django.template.base"></import_class>
<import_class name="Literal" module="django.template.smartif"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="IfParser" module="django.template.smartif"></import_class>
<import_class name="VariableDoesNotExist" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="itertools_cycle" module="itertools"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<import_class name="groupby" module="itertools"></import_class>
<attribute name="kwarg_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9363560>]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
<function name="comment"><doc><![CDATA[
    Ignores everything between ``{% comment %}`` and ``{% endcomment %}``.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="load"><doc><![CDATA[
    Loads a custom template tag set.

    For example, to load the template tags in
    ``django/templatetags/news/photos.py``::

        {% load news.photos %}

    Can also be used to load an individual tag/filter from
    a library::

        {% load byline from news %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifchanged"><doc><![CDATA[
    Checks if a value has changed from the last iteration of a loop.

    The 'ifchanged' block tag is used within a loop. It has two possible uses.

    1. Checks its own rendered contents against its previous state and only
       displays the content if it has changed. For example, this displays a
       list of days, only displaying the month if it changes::

            <h1>Archive for {{ year }}</h1>

            {% for date in days %}
                {% ifchanged %}<h3>{{ date|date:"F" }}</h3>{% endifchanged %}
                <a href="{{ date|date:"M/d"|lower }}/">{{ date|date:"j" }}</a>
            {% endfor %}

    2. If given a variable, check whether that variable has changed.
       For example, the following shows the date every time it changes, but
       only shows the hour if both the hour and the date have changed::

            {% for date in days %}
                {% ifchanged date.date %} {{ date.date }} {% endifchanged %}
                {% ifchanged date.hour date.date %}
                    {{ date.hour }}
                {% endifchanged %}
            {% endfor %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="autoescape"><doc><![CDATA[
    Force autoescape behaviour for this block.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="csrf_token"><doc></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifequal"><doc><![CDATA[
    Outputs the contents of the block if the two arguments equal each other.

    Examples::

        {% ifequal user.id comment.user_id %}
            ...
        {% endifequal %}

        {% ifnotequal user.id comment.user_id %}
            ...
        {% else %}
            ...
        {% endifnotequal %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="include_is_allowed"><doc></doc>
<argument name="filepath"></argument>
</function>
<function name="firstof"><doc><![CDATA[
    Outputs the first variable passed that is not False, without escaping.

    Outputs nothing if all the passed variables are False.

    Sample usage::

        {% firstof var1 var2 var3 %}

    This is equivalent to::

        {% if var1 %}
            {{ var1|safe }}
        {% else %}{% if var2 %}
            {{ var2|safe }}
        {% else %}{% if var3 %}
            {{ var3|safe }}
        {% endif %}{% endif %}{% endif %}

    but obviously much cleaner!

    You can also use a literal string as a fallback value in case all
    passed variables are False::

        {% firstof var1 var2 var3 "fallback value" %}

    If you want to escape the output, use a filter tag::

        {% filter force_escape %}
            {% firstof var1 var2 var3 "fallback value" %}
        {% endfilter %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifnotequal"><doc><![CDATA[
    Outputs the contents of the block if the two arguments are not equal.
    See ifequal.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="token_kwargs"><doc><![CDATA[
    A utility method for parsing token keyword arguments.

    :param bits: A list containing remainder of the token (split by spaces)
        that is to be checked for arguments. Valid arguments will be removed
        from this list.

    :param support_legacy: If set to true ``True``, the legacy format
        ``1 as foo`` will be accepted. Otherwise, only the standard ``foo=1``
        format is allowed.

    :returns: A dictionary of the arguments retrieved from the ``bits`` token
        list.

    There is no requirement for all remaining token ``bits`` to be keyword
    arguments, so the dictionary will be returned as soon as an invalid
    argument format is reached.
    ]]></doc>
<argument name="bits"></argument>
<argument name="parser"></argument>
<argument name="support_legacy" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="do_filter"><doc><![CDATA[
    Filters the contents of the block through variable filters.

    Filters can also be piped through each other, and they can have
    arguments -- just like in variable syntax.

    Sample usage::

        {% filter force_escape|lower %}
            This text will be HTML-escaped, and will appear in lowercase.
        {% endfilter %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_with"><doc><![CDATA[
    Adds one or more values to the context (inside of this block) for caching
    and easy access.

    For example::

        {% with total=person.some_sql_method %}
            {{ total }} object{{ total|pluralize }}
        {% endwith %}

    Multiple values can be added to the context::

        {% with foo=1 bar=2 %}
            ...
        {% endwith %}

    The legacy format of ``{% with person.some_sql_method as total %}`` is
    still accepted.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="spaceless"><doc><![CDATA[
    Removes whitespace between HTML tags, including tab and newline characters.

    Example usage::

        {% spaceless %}
            <p>
                <a href="foo/">Foo</a>
            </p>
        {% endspaceless %}

    This example would return this HTML::

        <p><a href="foo/">Foo</a></p>

    Only space between *tags* is normalized -- not space between tags and text.
    In this example, the space around ``Hello`` won't be stripped::

        {% spaceless %}
            <strong>
                Hello
            </strong>
        {% endspaceless %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ssi"><doc><![CDATA[
    Outputs the contents of a given file into the page.

    Like a simple "include" tag, the ``ssi`` tag includes the contents
    of another file -- which must be specified using an absolute path --
    in the current page::

        {% ssi /home/html/ljworld.com/includes/right_generic.html %}

    If the optional "parsed" parameter is given, the contents of the included
    file are evaluated as template code, with the current context::

        {% ssi /home/html/ljworld.com/includes/right_generic.html parsed %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_for"><doc><![CDATA[
    Loops over each item in an array.

    For example, to display a list of athletes given ``athlete_list``::

        <ul>
        {% for athlete in athlete_list %}
            <li>{{ athlete.name }}</li>
        {% endfor %}
        </ul>

    You can loop over a list in reverse by using
    ``{% for obj in list reversed %}``.

    You can also unpack multiple values from a two-dimensional array::

        {% for key,value in dict.items %}
            {{ key }}: {{ value }}
        {% endfor %}

    The ``for`` tag can take an optional ``{% empty %}`` clause that will
    be displayed if the given array is empty or could not be found::

        <ul>
          {% for athlete in athlete_list %}
            <li>{{ athlete.name }}</li>
          {% empty %}
            <li>Sorry, no athletes in this list.</li>
          {% endfor %}
        <ul>

    The above is equivalent to -- but shorter, cleaner, and possibly faster
    than -- the following::

        <ul>
          {% if althete_list %}
            {% for athlete in athlete_list %}
              <li>{{ athlete.name }}</li>
            {% endfor %}
          {% else %}
            <li>Sorry, no athletes in this list.</li>
          {% endif %}
        </ul>

    The for loop sets a number of variables available within the loop:

        ==========================  ================================================
        Variable                    Description
        ==========================  ================================================
        ``forloop.counter``         The current iteration of the loop (1-indexed)
        ``forloop.counter0``        The current iteration of the loop (0-indexed)
        ``forloop.revcounter``      The number of iterations from the end of the
                                    loop (1-indexed)
        ``forloop.revcounter0``     The number of iterations from the end of the
                                    loop (0-indexed)
        ``forloop.first``           True if this is the first time through the loop
        ``forloop.last``            True if this is the last time through the loop
        ``forloop.parentloop``      For nested loops, this is the loop "above" the
                                    current one
        ==========================  ================================================

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="regroup"><doc><![CDATA[
    Regroups a list of alike objects by a common attribute.

    This complex tag is best illustrated by use of an example:  say that
    ``people`` is a list of ``Person`` objects that have ``first_name``,
    ``last_name``, and ``gender`` attributes, and you'd like to display a list
    that looks like:

        * Male:
            * George Bush
            * Bill Clinton
        * Female:
            * Margaret Thatcher
            * Colendeeza Rice
        * Unknown:
            * Pat Smith

    The following snippet of template code would accomplish this dubious task::

        {% regroup people by gender as grouped %}
        <ul>
        {% for group in grouped %}
            <li>{{ group.grouper }}
            <ul>
                {% for item in group.list %}
                <li>{{ item }}</li>
                {% endfor %}
            </ul>
        {% endfor %}
        </ul>

    As you can see, ``{% regroup %}`` populates a variable with a list of
    objects with ``grouper`` and ``list`` attributes.  ``grouper`` contains the
    item that was grouped by; ``list`` contains the list of objects that share
    that ``grouper``.  In this case, ``grouper`` would be ``Male``, ``Female``
    and ``Unknown``, and ``list`` is the list of people with those genders.

    Note that ``{% regroup %}`` does not work when the list to be grouped is not
    sorted by the key you are grouping by!  This means that if your list of
    people was not sorted by gender, you'd need to make sure it is sorted
    before using it, i.e.::

        {% regroup people|dictsort:"gender" by gender as grouped %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_ifequal"><doc></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
<argument name="negate"></argument>
</function>
<function name="templatetag"><doc><![CDATA[
    Outputs one of the bits used to compose template tags.

    Since the template system has no concept of "escaping", to display one of
    the bits used in template tags, you must use the ``{% templatetag %}`` tag.

    The argument tells which template bit to output:

        ==================  =======
        Argument            Outputs
        ==================  =======
        ``openblock``       ``{%``
        ``closeblock``      ``%}``
        ``openvariable``    ``{{``
        ``closevariable``   ``}}``
        ``openbrace``       ``{``
        ``closebrace``      ``}``
        ``opencomment``     ``{#``
        ``closecomment``    ``#}``
        ==================  =======
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="now"><doc><![CDATA[
    Displays the date, formatted according to the given string.

    Uses the same format as PHP's ``date()`` function; see http://php.net/date
    for all the possible values.

    Sample usage::

        It is {% now "jS F Y H:i" %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="cycle"><doc><![CDATA[
    Cycles among the given strings each time this tag is encountered.

    Within a loop, cycles among the given strings each time through
    the loop::

        {% for o in some_list %}
            <tr class="{% cycle 'row1' 'row2' %}">
                ...
            </tr>
        {% endfor %}

    Outside of a loop, give the values a unique name the first time you call
    it, then use that name each sucessive time through::

            <tr class="{% cycle 'row1' 'row2' 'row3' as rowcolors %}">...</tr>
            <tr class="{% cycle rowcolors %}">...</tr>
            <tr class="{% cycle rowcolors %}">...</tr>

    You can use any number of values, separated by spaces. Commas can also
    be used to separate values; if a comma is used, the cycle values are
    interpreted as literal strings.

    The optional flag "silent" can be used to prevent the cycle declaration
    from returning any value::

        {% cycle 'row1' 'row2' as rowcolors silent %}{# no value here #}
        {% for o in some_list %}
            <tr class="{% cycle rowcolors %}">{# first value will be "row1" #}
                ...
            </tr>
        {% endfor %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="widthratio"><doc><![CDATA[
    For creating bar charts and such, this tag calculates the ratio of a given
    value to a maximum value, and then applies that ratio to a constant.

    For example::

        <img src='bar.gif' height='10' width='{% widthratio this_value max_value 100 %}' />

    Above, if ``this_value`` is 175 and ``max_value`` is 200, the image in
    the above example will be 88 pixels wide (because 175/200 = .875;
    .875 * 100 = 87.5 which is rounded up to 88).
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="url"><doc><![CDATA[
    Returns an absolute URL matching given view with its parameters.

    This is a way to define links that aren't tied to a particular URL
    configuration::

        {% url path.to.some_view arg1 arg2 %}

        or

        {% url path.to.some_view name1=value1 name2=value2 %}

    The first argument is a path to a view. It can be an absolute python path
    or just ``app_name.view_name`` without the project name if the view is
    located inside the project.  Other arguments are comma-separated values
    that will be filled in place of positional and keyword arguments in the
    URL. All arguments for the URL should be present.

    For example if you have a view ``app_name.client`` taking client's id and
    the corresponding line in a URLconf looks like this::

        ('^client/(\d+)/$', 'app_name.client')

    and this app's URLconf is included into the project's URLconf under some
    path::

        ('^clients/', include('project_name.app_name.urls'))

    then in a template you can create a link for a certain client like this::

        {% url app_name.client client.id %}

    The URL will look like ``/clients/client/123/``.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_if"><doc><![CDATA[
    The ``{% if %}`` tag evaluates a variable, and if that variable is "true"
    (i.e., exists, is not empty, and is not a false boolean value), the
    contents of the block are output:

    ::

        {% if athlete_list %}
            Number of athletes: {{ athlete_list|count }}
        {% else %}
            No athletes.
        {% endif %}

    In the above, if ``athlete_list`` is not empty, the number of athletes will
    be displayed by the ``{{ athlete_list|count }}`` variable.

    As you can see, the ``if`` tag can take an option ``{% else %}`` clause
    that will be displayed if the test fails.

    ``if`` tags may use ``or``, ``and`` or ``not`` to test a number of
    variables or to negate a given variable::

        {% if not athlete_list %}
            There are no athletes.
        {% endif %}

        {% if athlete_list or coach_list %}
            There are some athletes or some coaches.
        {% endif %}

        {% if athlete_list and coach_list %}
            Both atheletes and coaches are available.
        {% endif %}

        {% if not athlete_list or coach_list %}
            There are no athletes, or there are some coaches.
        {% endif %}

        {% if athlete_list and not coach_list %}
            There are some athletes and absolutely no coaches.
        {% endif %}

    Comparison operators are also available, and the use of filters is also
    allowed, for example::

        {% if articles|length >= 5 %}...{% endif %}

    Arguments and operators _must_ have a space between them, so
    ``{% if 1>2 %}`` is not a valid if tag.

    All supported operators are: ``or``, ``and``, ``in``, ``not in``
    ``==`` (or ``=``), ``!=``, ``>``, ``>=``, ``<`` and ``<=``.

    Operator precedence follows Python.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="debug"><doc><![CDATA[
    Outputs a whole load of debugging information, including the current
    context and imported modules.

    Sample usage::

        <pre>
            {% debug %}
        </pre>
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<class name="IfEqualNode"></class>
<doc></doc>
<attribute name="child_nodelists" type="tuple"><value><![CDATA[('nodelist_true', 'nodelist_false')]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="var1"></argument>
<argument name="var2"></argument>
<argument name="nodelist_true"></argument>
<argument name="nodelist_false"></argument>
<argument name="negate"></argument>
</function>
<class name="AutoEscapeControlNode"></class>
<doc><![CDATA[Implements the actions of the autoescape tag.]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="setting"></argument>
<argument name="nodelist"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="RegroupNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="target"></argument>
<argument name="expression"></argument>
<argument name="var_name"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="FilterNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="filter_expr"></argument>
<argument name="nodelist"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="FirstOfNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="vars"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="SpacelessNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="nodelist"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="IfNode"></class>
<doc></doc>
<attribute name="child_nodelists" type="tuple"><value><![CDATA[('nodelist_true', 'nodelist_false')]]></value>
</attribute>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="var"></argument>
<argument name="nodelist_true"></argument>
<argument name="nodelist_false" type="NoneType"><value></value>
</argument>
</function>
<class name="URLNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="view_name"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
<argument name="asvar"></argument>
<argument name="legacy_view_name" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="IfChangedNode"></class>
<doc></doc>
<attribute name="child_nodelists" type="tuple"><value><![CDATA[('nodelist_true', 'nodelist_false')]]></value>
</attribute>
<function name="__init__" args="varlist"><doc></doc>
<argument name="self"></argument>
<argument name="nodelist_true"></argument>
<argument name="nodelist_false"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="DebugNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="TemplateIfParser"></class>
<doc></doc>
<import_class name="error_class" module="django.template.base"></import_class>
<function name="create_var"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="parser"></argument>
</function>
<class name="WithNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="var"></argument>
<argument name="name"></argument>
<argument name="nodelist"></argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="NowNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="format_string"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="ForNode"></class>
<doc></doc>
<attribute name="child_nodelists" type="tuple"><value><![CDATA[('nodelist_loop', 'nodelist_empty')]]></value>
</attribute>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="loopvars"></argument>
<argument name="sequence"></argument>
<argument name="is_reversed"></argument>
<argument name="nodelist_loop"></argument>
<argument name="nodelist_empty" type="NoneType"><value></value>
</argument>
</function>
<class name="WidthRatioNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="val_expr"></argument>
<argument name="max_expr"></argument>
<argument name="max_width"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="LoadNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="CsrfTokenNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="SsiNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="filepath"></argument>
<argument name="parsed"></argument>
<argument name="legacy_filepath" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="CycleNode"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="cyclevars"></argument>
<argument name="variable_name" type="NoneType"><value></value>
</argument>
<argument name="silent" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="CommentNode"></class>
<doc></doc>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="TemplateLiteral"></class>
<doc></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
<argument name="text"></argument>
</function>
<function name="display"><doc></doc>
<argument name="self"></argument>
</function>
<function name="eval"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
<class name="TemplateTagNode"></class>
<doc></doc>
<attribute name="mapping" type="dict"><value><![CDATA[{'opencomment': '{#', 'openvariable': '{{', 'closeblock': '%}', 'closecomment': '#}', 'openbrace': '{', 'closevariable': '}}', 'openblock': '{%', 'closebrace': '}'}]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="tagtype"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
</function>
</package>
<package name="django.contrib.admin.validation" file="/django/contrib/admin/validation.pyc"><doc></doc>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="_get_foreign_key" module="django.forms.models"></import_function>
<import_function name="fields_for_model" module="django.forms.models"></import_function>
<import_function name="get_fields_from_path" module="django.contrib.admin.util"></import_function>
<import_class name="BaseModelFormSet" module="django.forms.models"></import_class>
<import_class name="NotRelationField" module="django.contrib.admin.util"></import_class>
<import_class name="BaseModelForm" module="django.forms.models"></import_class>
<import_class name="BaseModelAdmin" module="django.contrib.admin.options"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['validate']]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<function name="validate_base"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
</function>
<function name="check_isdict"><doc></doc>
<argument name="cls"></argument>
<argument name="label"></argument>
<argument name="obj"></argument>
</function>
<function name="check_formfield"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="check_readonly_fields"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
</function>
<function name="fetch_attr"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="validate_inline"><doc></doc>
<argument name="cls"></argument>
<argument name="parent"></argument>
<argument name="parent_model"></argument>
</function>
<function name="get_field"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="check_isseq"><doc></doc>
<argument name="cls"></argument>
<argument name="label"></argument>
<argument name="obj"></argument>
</function>
<function name="validate"><doc><![CDATA[
    Does basic ModelAdmin option validation. Calls custom validation
    classmethod in the end if it is provided in cls. The signature of the
    custom validation classmethod should be: def validate(cls, model).
    ]]></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
</function>
</package>
<package name="django.contrib.admin.helpers" file="/django/contrib/admin/helpers.pyc"><doc></doc>
<import_attribute name="checkbox" type="CheckboxInput" module="django.forms.widgets"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="capfirst" module="django.template.defaultfilters"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="display_for_field" module="django.contrib.admin.util"></import_function>
<import_function name="label_for_field" module="django.contrib.admin.util"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="lookup_field" module="django.contrib.admin.util"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="help_text_for_field" module="django.contrib.admin.util"></import_function>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="ACTION_CHECKBOX_NAME" type="str"><value><![CDATA[_selected_action]]></value>
</attribute>
<function name="normalize_fieldsets"><doc><![CDATA[
    Make sure the keys in fieldset dictionaries are strings. Returns the
    normalized data.
    ]]></doc>
<argument name="fieldsets"></argument>
</function>
<function name="normalize_dictionary"><doc><![CDATA[
    Converts all the keys in "data_dict" to strings. The keys must be
    convertible using str().
    ]]></doc>
<argument name="data_dict"></argument>
</function>
<class name="Fieldline"></class>
<doc></doc>
<function name="errors"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="field"></argument>
<argument name="readonly_fields" type="NoneType"><value></value>
</argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<class name="InlineAdminFormSet"></class>
<doc><![CDATA[
    A wrapper around an inline formset for use in the admin system.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96c143c>]]></value>
</attribute>
<function name="fields"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="inline"></argument>
<argument name="formset"></argument>
<argument name="fieldsets"></argument>
<argument name="readonly_fields" type="NoneType"><value></value>
</argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<class name="Fieldset"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96c1374>]]></value>
</attribute>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="readonly_fields" type="tuple"><value></value>
</argument>
<argument name="fields" type="tuple"><value></value>
</argument>
<argument name="classes" type="tuple"><value></value>
</argument>
<argument name="description" type="NoneType"><value></value>
</argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<class name="InlineFieldset"></class>
<doc></doc>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="formset"></argument>
</function>
<class name="AdminField"></class>
<doc></doc>
<function name="errors"><doc></doc>
<argument name="self"></argument>
</function>
<function name="label_tag"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="field"></argument>
<argument name="is_first"></argument>
</function>
<class name="AdminErrorList"></class>
<doc><![CDATA[
    Stores all errors for the form/formsets in an add/change stage view.
    ]]></doc>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="inline_formsets"></argument>
</function>
<class name="InlineAdminForm"></class>
<doc><![CDATA[
    A wrapper around an inline form for use in the admin system.
    ]]></doc>
<function name="field_count"><doc></doc>
<argument name="self"></argument>
</function>
<function name="ordering_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="pk_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="deletion_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="fk_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="has_auto_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="formset"></argument>
<argument name="form"></argument>
<argument name="fieldsets"></argument>
<argument name="prepopulated_fields"></argument>
<argument name="original"></argument>
<argument name="readonly_fields" type="NoneType"><value></value>
</argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminReadonlyField"></class>
<doc></doc>
<function name="label_tag"><doc></doc>
<argument name="self"></argument>
</function>
<function name="contents"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="field"></argument>
<argument name="is_first"></argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminForm"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96c1324>]]></value>
</attribute>
<function name="first_field"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="form"></argument>
<argument name="fieldsets"></argument>
<argument name="prepopulated_fields"></argument>
<argument name="readonly_fields" type="NoneType"><value></value>
</argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<class name="ActionForm"></class>
<doc></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96c12fc>]]></value>
</attribute>
</package>
<package name="django.contrib.admin.util" file="/django/contrib/admin/util.pyc"><doc></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="pretty_name" module="django.forms.forms"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="formats" type="module"><value><![CDATA[<module 'django.utils.formats' from '/usr/local/lib/python2.7/dist-packages/django/utils/formats.pyc'>]]></value>
</attribute>
<function name="unquote"><doc><![CDATA[
    Undo the effects of quote(). Based heavily on urllib.unquote().
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="reverse_field_path"><doc><![CDATA[ Create a reversed field path.

    E.g. Given (Order, "user__groups"),
    return (Group, "user__order").

    Final field must be a related model, not a data field.

    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<function name="model_format_dict"><doc><![CDATA[
    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
    typically for use with string formatting.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.

    ]]></doc>
<argument name="obj"></argument>
</function>
<function name="flatten_fieldsets"><doc><![CDATA[Returns a list of field names from an admin fieldsets structure.]]></doc>
<argument name="fieldsets"></argument>
</function>
<function name="get_model_from_relation"><doc></doc>
<argument name="field"></argument>
</function>
<function name="display_for_field"><doc></doc>
<argument name="value"></argument>
<argument name="field"></argument>
</function>
<function name="label_for_field"><doc></doc>
<argument name="name"></argument>
<argument name="model"></argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
<argument name="return_attr" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="model_ngettext"><doc><![CDATA[
    Return the appropriate `verbose_name` or `verbose_name_plural` value for
    `obj` depending on the count `n`.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
    `QuerySet` is used.

    ]]></doc>
<argument name="obj"></argument>
<argument name="n" type="NoneType"><value></value>
</argument>
</function>
<function name="remove_trailing_data_field"><doc><![CDATA[ Discard trailing non-relation field if extant. ]]></doc>
<argument name="fields"></argument>
</function>
<function name="quote"><doc><![CDATA[
    Ensure that primary key values do not confuse the admin URLs by escaping
    any '/', '_' and ':' characters. Similar to urllib.quote, except that the
    quoting is slightly different so that it doesn't get automatically
    unquoted by the Web browser.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="lookup_field"><doc></doc>
<argument name="name"></argument>
<argument name="obj"></argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<function name="get_fields_from_path"><doc><![CDATA[ Return list of Fields given path relative to model.

    e.g. (ModelX, "user__groups__name") -> [
        <django.db.models.fields.related.ForeignKey object at 0x...>,
        <django.db.models.fields.related.ManyToManyField object at 0x...>,
        <django.db.models.fields.CharField object at 0x...>,
    ]
    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<function name="help_text_for_field"><doc></doc>
<argument name="name"></argument>
<argument name="model"></argument>
</function>
<function name="get_deleted_objects"><doc><![CDATA[
    Find all objects related to ``objs`` that should also be deleted. ``objs``
    must be a homogenous iterable of objects (e.g. a QuerySet).

    Returns a nested list of strings suitable for display in the
    template with the ``unordered_list`` filter.

    ]]></doc>
<argument name="objs"></argument>
<argument name="opts"></argument>
<argument name="user"></argument>
<argument name="admin_site"></argument>
<argument name="using"></argument>
</function>
<function name="get_limit_choices_to_from_path"><doc><![CDATA[ Return Q object for limiting choices if applicable.

    If final model in path is linked via a ForeignKey or ManyToManyField which
    has a `limit_choices_to` attribute, return it as a Q object.
    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<class name="NestedObjects"></class>
<doc></doc>
<function name="_nested"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="seen"></argument>
<argument name="format_callback"></argument>
</function>
<function name="add_edge"><doc></doc>
<argument name="self"></argument>
<argument name="source"></argument>
<argument name="target"></argument>
</function>
<function name="collect" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="objs"></argument>
<argument name="source_attr" type="NoneType"><value></value>
</argument>
</function>
<function name="related_objects"><doc></doc>
<argument name="self"></argument>
<argument name="related"></argument>
<argument name="objs"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="nested"><doc><![CDATA[
        Return the graph as a nested list.

        ]]></doc>
<argument name="self"></argument>
<argument name="format_callback" type="NoneType"><value></value>
</argument>
</function>
<class name="NotRelationField"></class>
<doc></doc>
</package>
<package name="django.contrib.admin.widgets" file="/django/contrib/admin/widgets.pyc"><doc><![CDATA[
Form Widget classes specific to the Django admin site.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="truncate_words" module="django.utils.text"></import_function>
<import_class name="NoReverseMatch" module="django.core.urlresolvers"></import_class>
<import_class name="RadioFieldRenderer" module="django.forms.widgets"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="copy" type="module"><value><![CDATA[<module 'django.utils.copycompat' from '/usr/local/lib/python2.7/dist-packages/django/utils/copycompat.pyc'>]]></value>
</attribute>
<function name="url_params_from_lookup_dict"><doc><![CDATA[
    Converts the type of lookups specified in a ForeignKey limit_choices_to
    attribute to a dictionary of query parameters
    ]]></doc>
<argument name="lookups"></argument>
</function>
<class name="AdminTextareaWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce7d4>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminRadioSelect"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce5f4>]]></value>
</attribute>
<class name="renderer"></class>
<doc></doc>
<function name="render"><doc><![CDATA[Outputs a <ul> for this set of radio fields.]]></doc>
<argument name="self"></argument>
</function>
<class name="AdminSplitDateTime"></class>
<doc><![CDATA[
    A SplitDateTime Widget that has some admin-specific styling.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce554>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="format_output"><doc></doc>
<argument name="self"></argument>
<argument name="rendered_widgets"></argument>
</function>
<class name="FilteredSelectMultiple"></class>
<doc><![CDATA[
    A SelectMultiple with a JavaScript filter interface.

    Note that the resulting JavaScript assumes that the jsi18n
    catalog has been loaded in the page
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce464>]]></value>
</attribute>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="verbose_name"></argument>
<argument name="is_stacked"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="choices" type="tuple"><value></value>
</argument>
</function>
<class name="Media"></class>
<doc></doc>
<attribute name="js" type="tuple"><value><![CDATA[('/static/admin/js/core.js', '/static/admin/js/SelectBox.js', '/static/admin/js/SelectFilter2.js')]]></value>
</attribute>
<class name="AdminIntegerFieldWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce8c4>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminRadioFieldRenderer"></class>
<doc></doc>
<function name="render"><doc><![CDATA[Outputs a <ul> for this set of radio fields.]]></doc>
<argument name="self"></argument>
</function>
<class name="AdminTextInputWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce824>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminTimeWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce504>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="dict"><value></value>
</argument>
<argument name="format" type="NoneType"><value></value>
</argument>
</function>
<class name="Media"></class>
<doc></doc>
<attribute name="js" type="tuple"><value><![CDATA[('/static/admin/js/calendar.js', '/static/admin/js/admin/DateTimeShortcuts.js')]]></value>
</attribute>
<class name="RelatedFieldWidgetWrapper"></class>
<doc><![CDATA[
    This class is a wrapper to a given widget to add the add icon for the
    admin interface.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce70c>]]></value>
</attribute>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<function name="id_for_label"><doc></doc>
<argument name="self"></argument>
<argument name="id_"></argument>
</function>
<function name="__deepcopy__"><doc></doc>
<argument name="self"></argument>
<argument name="memo"></argument>
</function>
<function name="build_attrs" kwargs="kwargs"><doc><![CDATA[Helper function for building an attribute dictionary.]]></doc>
<argument name="self"></argument>
<argument name="extra_attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="_media"><doc></doc>
<argument name="self"></argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="widget"></argument>
<argument name="rel"></argument>
<argument name="admin_site"></argument>
<argument name="can_add_related" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminDateWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce4b4>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="dict"><value></value>
</argument>
<argument name="format" type="NoneType"><value></value>
</argument>
</function>
<class name="Media"></class>
<doc></doc>
<attribute name="js" type="tuple"><value><![CDATA[('/static/admin/js/calendar.js', '/static/admin/js/admin/DateTimeShortcuts.js')]]></value>
</attribute>
<class name="AdminURLFieldWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce874>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminCommaSeparatedIntegerFieldWidget"></class>
<doc></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce914>]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<class name="ManyToManyRawIdWidget"></class>
<doc><![CDATA[
    A Widget for displaying ManyToMany ids in the "raw_id" interface rather than
    in a <select multiple> box.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce6e4>]]></value>
</attribute>
<function name="url_parameters"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_has_changed"><doc></doc>
<argument name="self"></argument>
<argument name="initial"></argument>
<argument name="data"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="label_for_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="value_from_datadict"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
<argument name="files"></argument>
<argument name="name"></argument>
</function>
<class name="AdminFileWidget"></class>
<doc></doc>
<attribute name="template_with_initial" type="unicode"><value><![CDATA[<p class="file-upload">%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s</p>]]></value>
</attribute>
<attribute name="template_with_clear" type="unicode"><value><![CDATA[<span class="clearable-file-input">%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label></span>]]></value>
</attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce644>]]></value>
</attribute>
<class name="ForeignKeyRawIdWidget"></class>
<doc><![CDATA[
    A Widget for displaying ForeignKeys in the "raw_id" interface rather than
    in a <select> box.
    ]]></doc>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96ce694>]]></value>
</attribute>
<function name="url_parameters"><doc></doc>
<argument name="self"></argument>
</function>
<function name="render"><doc></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
</function>
<function name="label_for_value"><doc></doc>
<argument name="self"></argument>
<argument name="value"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="rel"></argument>
<argument name="attrs" type="NoneType"><value></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="base_url_parameters"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.admin.forms" file="/django/contrib/admin/forms.pyc"><doc></doc>
<import_attribute name="ERROR_MESSAGE" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="authenticate" module="django.contrib.auth"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="AuthenticationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<class name="AdminAuthenticationForm"></class>
<doc><![CDATA[
    A custom authentication form used in the admin app.

    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96d6bbc>]]></value>
</attribute>
<function name="clean"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.admin.sites" file="/django/contrib/admin/sites.pyc"><doc></doc>
<depends name="re"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="never_cache" module="django.views.decorators.cache"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="AdminAuthenticationForm" module="django.contrib.admin.forms"></import_class>
<import_class name="ModelBase" module="django.db.models.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="ModelAdmin" module="django.contrib.admin.options"></import_class>
<attribute name="site" type="AdminSite"><value><![CDATA[<django.contrib.admin.sites.AdminSite object at 0x97205cc>]]></value>
</attribute>
<attribute name="actions" type="module"><value><![CDATA[<module 'django.contrib.admin.actions' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/actions.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="LOGIN_FORM_KEY" type="str"><value><![CDATA[this_is_the_login_form]]></value>
</attribute>
<attribute name="template" type="module"><value><![CDATA[<module 'django.template' from '/usr/local/lib/python2.7/dist-packages/django/template/__init__.pyc'>]]></value>
</attribute>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<attribute name="http" type="module"><value><![CDATA[<module 'django.http' from '/usr/local/lib/python2.7/dist-packages/django/http/__init__.pyc'>]]></value>
</attribute>
<attribute name="contenttype_views" type="module"><value><![CDATA[<module 'django.contrib.contenttypes.views' from '/usr/local/lib/python2.7/dist-packages/django/contrib/contenttypes/views.pyc'>]]></value>
</attribute>
<class name="NotRegistered"></class>
<doc></doc>
<class name="AlreadyRegistered"></class>
<doc></doc>
<class name="AdminSite"></class>
<doc><![CDATA[
    An AdminSite object encapsulates an instance of the Django admin application, ready
    to be hooked in to your URLconf. Models are registered with the AdminSite using the
    register() method, and the get_urls() method can then be used to access Django view
    functions that present a full admin interface for the collection of registered
    models.
    ]]></doc>
<attribute name="urls" type="property"><value><![CDATA[<property object at 0x97250f4>]]></value>
</attribute>
<attribute name="index_template" type="NoneType"><value></value>
</attribute>
<attribute name="password_change_template" type="NoneType"><value></value>
</attribute>
<attribute name="actions" type="property"><value><![CDATA[<property object at 0x97250cc>]]></value>
</attribute>
<attribute name="login_form" type="NoneType"><value></value>
</attribute>
<attribute name="app_index_template" type="NoneType"><value></value>
</attribute>
<attribute name="login_template" type="NoneType"><value></value>
</attribute>
<attribute name="password_change_done_template" type="NoneType"><value></value>
</attribute>
<attribute name="logout_template" type="NoneType"><value></value>
</attribute>
<function name="app_index"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="app_label"></argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="register" kwargs="options"><doc><![CDATA[
        Registers the given model(s) with the given admin class.

        The model(s) should be Model classes, not instances.

        If an admin class isn't given, it will use ModelAdmin (the default
        admin options). If keyword arguments are given -- e.g., list_display --
        they'll be applied as options to the admin class.

        If a model is already registered, this will raise AlreadyRegistered.

        If a model is abstract, this will raise ImproperlyConfigured.
        ]]></doc>
<argument name="self"></argument>
<argument name="model_or_iterable"></argument>
<argument name="admin_class" type="NoneType"><value></value>
</argument>
</function>
<function name="unregister"><doc><![CDATA[
        Unregisters the given model(s).

        If a model isn't already registered, this will raise NotRegistered.
        ]]></doc>
<argument name="self"></argument>
<argument name="model_or_iterable"></argument>
</function>
<function name="get_action"><doc><![CDATA[
        Explicitally get a registered global action wheather it's enabled or
        not. Raises KeyError for invalid names.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="logout" args="args" kwargs="kwargs"><doc><![CDATA[
        Logs out the user for the given HttpRequest.

        This should *not* assume the user is already logged in.
        ]]></doc>
<argument name="request"></argument>
</function>
<function name="password_change_done"><doc><![CDATA[
        Displays the "success" page after a password change.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="app_name" type="str"><value><![CDATA[admin]]></value>
</argument>
</function>
<function name="index" args="args" kwargs="kwargs"><doc><![CDATA[
        Displays the main admin index page, which lists all of the installed
        apps that have been registered in this site.
        ]]></doc>
<argument name="request"></argument>
</function>
<function name="add_action"><doc><![CDATA[
        Register an action to be available globally.
        ]]></doc>
<argument name="self"></argument>
<argument name="action"></argument>
<argument name="name" type="NoneType"><value></value>
</argument>
</function>
<function name="admin_view"><doc><![CDATA[
        Decorator to create an admin view attached to this ``AdminSite``. This
        wraps the view and provides permission checking by calling
        ``self.has_permission``.

        You'll want to use this from within ``AdminSite.get_urls()``:

            class MyAdminSite(AdminSite):

                def get_urls(self):
                    from django.conf.urls.defaults import patterns, url

                    urls = super(MyAdminSite, self).get_urls()
                    urls += patterns('',
                        url(r'^my_view/$', self.admin_view(some_view))
                    )
                    return urls

        By default, admin_views are marked non-cacheable using the
        ``never_cache`` decorator. If the view can be safely cached, set
        cacheable=True.
        ]]></doc>
<argument name="self"></argument>
<argument name="view"></argument>
<argument name="cacheable" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="i18n_javascript"><doc><![CDATA[
        Displays the i18n JavaScript that the Django admin requires.

        This takes into account the USE_I18N setting. If it's set to False, the
        generated JavaScript will be leaner and faster.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="password_change"><doc><![CDATA[
        Handles the "change password" task -- both form display and validation.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="get_urls"><doc></doc>
<argument name="self"></argument>
</function>
<function name="check_dependencies"><doc><![CDATA[
        Check that all things needed to run the admin have been correctly installed.

        The default implementation checks that LogEntry, ContentType and the
        auth context processor are installed.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="disable_action"><doc><![CDATA[
        Disable a globally-registered action. Raises KeyError for invalid names.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="has_permission"><doc><![CDATA[
        Returns True if the given HttpRequest has permission to view
        *at least one* page in the admin site.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="login" args="args" kwargs="kwargs"><doc><![CDATA[
        Displays the login form for the given HttpRequest.
        ]]></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.views.decorators.cache" file="/django/views/decorators/cache.pyc"><doc></doc>
<depends name="functools"></depends>
<import_function name="add_never_cache_headers" module="django.utils.cache"></import_function>
<import_function name="wraps" module="functools"></import_function>
<import_function name="available_attrs" module="django.utils.decorators"></import_function>
<import_function name="patch_cache_control" module="django.utils.cache"></import_function>
<import_function name="decorator_from_middleware_with_args" module="django.utils.decorators"></import_function>
<import_class name="CacheMiddleware" module="django.middleware.cache"></import_class>
<function name="cache_control" kwargs="kwargs"><doc></doc>
</function>
<function name="cache_page" args="args" kwargs="kwargs"><doc><![CDATA[
    Decorator for views that tries getting the page from the cache and
    populates the cache if the page isn't in the cache yet.

    The cache is keyed by the URL and some data from the headers.
    Additionally there is the key prefix that is used to distinguish different
    cache areas in a multi-site setup. You could use the
    sites.get_current().domain, for example, as that is unique across a Django
    project.

    Additionally, all headers from the response's Vary header will be taken
    into account on caching -- just like the middleware does.
    ]]></doc>
</function>
<function name="never_cache"><doc><![CDATA[
    Decorator that adds headers to a response so that it will
    never be cached.
    ]]></doc>
<argument name="view_func"></argument>
</function>
</package>
<package name="django.middleware.cache" file="/django/middleware/cache.pyc"><doc><![CDATA[
Cache middleware. If enabled, each Django-powered page will be cached based on
URL. The canonical way to enable cache middleware is to set
``UpdateCacheMiddleware`` as your first piece of middleware, and
``FetchFromCacheMiddleware`` as the last::

    MIDDLEWARE_CLASSES = [
        'django.middleware.cache.UpdateCacheMiddleware',
        ...
        'django.middleware.cache.FetchFromCacheMiddleware'
    ]

This is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run
last during the response phase, which processes middleware bottom-up;
``FetchFromCacheMiddleware`` needs to run last during the request phase, which
processes middleware top-down.

The single-class ``CacheMiddleware`` can be used for some simple sites.
However, if any other piece of middleware needs to affect the cache key, you'll
need to use the two-part ``UpdateCacheMiddleware`` and
``FetchFromCacheMiddleware``. This'll most often happen when you're using
Django's ``LocaleMiddleware``.

More details about how the caching works:

* Only GET or HEAD-requests with status code 200 are cached.

* The number of seconds each page is stored for is set by the "max-age" section
  of the response's "Cache-Control" header, falling back to the
  CACHE_MIDDLEWARE_SECONDS setting if the section was not found.

* If CACHE_MIDDLEWARE_ANONYMOUS_ONLY is set to True, only anonymous requests
  (i.e., those not made by a logged-in user) will be cached. This is a simple
  and effective way of avoiding the caching of the Django admin (and any other
  user-specific content).

* This middleware expects that a HEAD request is answered with the same response
  headers exactly like the corresponding GET request.

* When a hit occurs, a shallow copy of the original response object is returned
  from process_request.

* Pages will be cached based on the contents of the request headers listed in
  the response's "Vary" header.

* This middleware also sets ETag, Last-Modified, Expires and Cache-Control
  headers on the response object.

]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_cache" module="django.core.cache"></import_function>
<import_function name="patch_response_headers" module="django.utils.cache"></import_function>
<import_function name="get_cache_key" module="django.utils.cache"></import_function>
<import_function name="get_max_age" module="django.utils.cache"></import_function>
<import_function name="learn_cache_key" module="django.utils.cache"></import_function>
<attribute name="DEFAULT_CACHE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="CacheMiddleware"></class>
<doc><![CDATA[
    Cache middleware that provides basic behavior for many simple sites.

    Also used as the hook point for the cache decorator, which is generated
    using the decorator-from-middleware utility.
    ]]></doc>
<function name="__init__" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="cache_timeout" type="NoneType"><value></value>
</argument>
<argument name="cache_anonymous_only" type="NoneType"><value></value>
</argument>
</function>
<class name="UpdateCacheMiddleware"></class>
<doc><![CDATA[
    Response-phase cache middleware that updates the cache if the response is
    cacheable.

    Must be used as part of the two-part update/fetch cache middleware.
    UpdateCacheMiddleware must be the first piece of middleware in
    MIDDLEWARE_CLASSES so that it'll get called last during the response phase.
    ]]></doc>
<function name="_session_accessed"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="_should_update_cache"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="process_response"><doc><![CDATA[Sets the cache, if needed.]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<class name="FetchFromCacheMiddleware"></class>
<doc><![CDATA[
    Request-phase cache middleware that fetches a page from the cache.

    Must be used as part of the two-part update/fetch cache middleware.
    FetchFromCacheMiddleware must be the last piece of middleware in
    MIDDLEWARE_CLASSES so that it'll get called last during the request phase.
    ]]></doc>
<function name="process_request"><doc><![CDATA[
        Checks whether the page is already cached and returns the cached
        version if available.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.contenttypes.views" file="/django/contrib/contenttypes/views.pyc"><doc></doc>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="Site" module="django.contrib.sites.models"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<attribute name="http" type="module"><value><![CDATA[<module 'django.http' from '/usr/local/lib/python2.7/dist-packages/django/http/__init__.pyc'>]]></value>
</attribute>
<function name="shortcut"><doc><![CDATA[Redirect to an object's page based on a content-type ID and an object ID.]]></doc>
<argument name="request"></argument>
<argument name="content_type_id"></argument>
<argument name="object_id"></argument>
</function>
</package>
<package name="django.contrib.sites.models" file="/django/contrib/sites/models.pyc"><doc></doc>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="SITE_CACHE" type="dict"><value></value>
</attribute>
<function name="get_current_site"><doc><![CDATA[
    Checks if contrib.sites is installed and returns either the current
    ``Site`` object or a ``RequestSite`` object based on the request.
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="SiteManager"></class>
<doc></doc>
<function name="get_current"><doc><![CDATA[
        Returns the current ``Site`` based on the SITE_ID in the
        project's settings. The ``Site`` object is cached the first
        time it's retrieved from the database.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="clear_cache"><doc><![CDATA[Clears the ``Site`` object cache.]]></doc>
<argument name="self"></argument>
</function>
<class name="Site"></class>
<doc><![CDATA[Site(id, domain, name)]]></doc>
<import_attribute name="_meta" type="Options" module="django.db.models.options"></import_attribute>
<import_attribute name="_base_manager" type="Manager" module="django.db.models.manager"></import_attribute>
<attribute name="objects" type="SiteManager"><value><![CDATA[<django.contrib.sites.models.SiteManager object at 0x96e226c>]]></value>
</attribute>
<attribute name="_default_manager" type="SiteManager"><value><![CDATA[<django.contrib.sites.models.SiteManager object at 0x96e226c>]]></value>
</attribute>
<function name="save" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
</function>
<class name="MultipleObjectsReturned"></class>
<doc></doc>
<class name="DoesNotExist"></class>
<doc></doc>
<class name="RequestSite"></class>
<doc><![CDATA[
    A class that shares the primary interface of Site (i.e., it has
    ``domain`` and ``name`` attributes) but gets its data from a Django
    HttpRequest object rather than from a database.

    The save() and delete() methods raise NotImplementedError.
    ]]></doc>
<function name="__unicode__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="force_insert" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="force_update" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="delete"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.admin.actions" file="/django/contrib/admin/actions.pyc"><doc><![CDATA[
Built-in, globally-available admin actions.
]]></doc>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="get_deleted_objects" module="django.contrib.admin.util"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="model_ngettext" module="django.contrib.admin.util"></import_function>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<attribute name="helpers" type="module"><value><![CDATA[<module 'django.contrib.admin.helpers' from '/usr/local/lib/python2.7/dist-packages/django/contrib/admin/helpers.pyc'>]]></value>
</attribute>
<attribute name="template" type="module"><value><![CDATA[<module 'django.template' from '/usr/local/lib/python2.7/dist-packages/django/template/__init__.pyc'>]]></value>
</attribute>
<function name="delete_selected"><doc><![CDATA[
    Default action which deletes the selected objects.

    This action first displays a confirmation page whichs shows all the
    deleteable objects, or, if the user has no permission one of the related
    childs (foreignkeys), a "permission denied" message.

    Next, it delets all selected objects and redirects back to the change list.
    ]]></doc>
<argument name="modeladmin"></argument>
<argument name="request"></argument>
<argument name="queryset"></argument>
</function>
</package>
<package name="django.contrib.auth.create_superuser" file="/django/contrib/auth/create_superuser.pyc"><doc><![CDATA[
Create a superuser from the command line. Deprecated; use manage.py
createsuperuser instead.
]]></doc>
</package>
<package name="django.contrib.auth.urls" file="/django/contrib/auth/urls.pyc"><doc></doc>
<import_function name="include" module="django.conf.urls.defaults"></import_function>
<import_function name="patterns" module="django.conf.urls.defaults"></import_function>
<import_function name="url" module="django.conf.urls.defaults"></import_function>
<attribute name="handler404" type="str"><value><![CDATA[django.views.defaults.page_not_found]]></value>
</attribute>
<attribute name="handler500" type="str"><value><![CDATA[django.views.defaults.server_error]]></value>
</attribute>
<attribute name="urlpatterns" type="list"><value><![CDATA[[<RegexURLPattern None ^login/$>, <RegexURLPattern None ^logout/$>, <RegexURLPattern None ^password_change/$>, <RegexURLPattern None ^password_change/done/$>, <RegexURLPattern None ^password_reset/$>, <RegexURLPattern None ^password_reset/done/$>, <RegexURLPattern None ^reset/(?P<uidb36>[0-9A-Za-z]{1,13})-(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$>, <RegexURLPattern None ^reset/done/$>]]]></value>
</attribute>
</package>
<package name="django.conf.urls.defaults" file="/django/conf/urls/defaults.pyc"><doc></doc>
<import_class name="RegexURLResolver" module="django.core.urlresolvers"></import_class>
<import_class name="RegexURLPattern" module="django.core.urlresolvers"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['handler404', 'handler500', 'include', 'patterns', 'url']]]></value>
</attribute>
<attribute name="handler404" type="str"><value><![CDATA[django.views.defaults.page_not_found]]></value>
</attribute>
<attribute name="handler500" type="str"><value><![CDATA[django.views.defaults.server_error]]></value>
</attribute>
<function name="include"><doc></doc>
<argument name="arg"></argument>
<argument name="namespace" type="NoneType"><value></value>
</argument>
<argument name="app_name" type="NoneType"><value></value>
</argument>
</function>
<function name="patterns" args="args"><doc></doc>
<argument name="prefix"></argument>
</function>
<function name="url"><doc></doc>
<argument name="regex"></argument>
<argument name="view"></argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="prefix" type="str"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.auth.views" file="/django/contrib/auth/views.pyc"><doc></doc>
<depends name="urlparse"></depends>
<import_attribute name="default_token_generator" type="PasswordResetTokenGenerator" module="django.contrib.auth.tokens"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="auth_login" module="django.contrib.auth"></import_function>
<import_function name="never_cache" module="django.views.decorators.cache"></import_function>
<import_function name="login_required" module="django.contrib.auth.decorators"></import_function>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="base36_to_int" module="django.utils.http"></import_function>
<import_function name="auth_logout" module="django.contrib.auth"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="AuthenticationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="QueryDict" module="django.http"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="PasswordResetForm" module="django.contrib.auth.forms"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="PasswordChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="SetPasswordForm" module="django.contrib.auth.forms"></import_class>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<function name="logout_then_login"><doc><![CDATA[
    Logs out the user if he is logged in. Then redirects to the log-in page.
    ]]></doc>
<argument name="request"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset_confirm" args="args" kwargs="kwargs"><doc><![CDATA[
    View that checks the hash in a password reset link and presents a
    form for entering a new password.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="password_reset_done"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_reset_done.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="redirect_to_login"><doc><![CDATA[
    Redirects the user to the login page, passing the given 'next' page
    ]]></doc>
<argument name="next"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
</function>
<function name="logout"><doc><![CDATA[
    Logs out the user and displays 'You are logged out' message.
    ]]></doc>
<argument name="request"></argument>
<argument name="next_page" type="NoneType"><value></value>
</argument>
<argument name="template_name" type="str"><value><![CDATA[registration/logged_out.html]]></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset_complete"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_reset_complete.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset" args="args" kwargs="kwargs"><doc></doc>
<argument name="request"></argument>
</function>
<function name="password_change_done"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_change_done.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="login" args="args" kwargs="kwargs"><doc><![CDATA[
    Displays the login form and handles the login action.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="password_change" args="args" kwargs="kwargs"><doc></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.auth.decorators" file="/django/contrib/auth/decorators.pyc"><doc></doc>
<depends name="urlparse"></depends>
<depends name="functools"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<import_function name="available_attrs" module="django.utils.decorators"></import_function>
<attribute name="urlparse" type="module"><value><![CDATA[<module 'urlparse' from '/usr/lib/python2.7/urlparse.pyc'>]]></value>
</attribute>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<function name="login_required"><doc><![CDATA[
    Decorator for views that checks that the user is logged in, redirecting
    to the log-in page if necessary.
    ]]></doc>
<argument name="function" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
</function>
<function name="user_passes_test"><doc><![CDATA[
    Decorator for views that checks that the user passes the given test,
    redirecting to the log-in page if necessary. The test should be a callable
    that takes the user object and returns True if the user passes.
    ]]></doc>
<argument name="test_func"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
</function>
<function name="permission_required"><doc><![CDATA[
    Decorator for views that checks whether a user has a particular permission
    enabled, redirecting to the log-in page if necessary.
    ]]></doc>
<argument name="perm"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.auth.forms" file="/django/contrib/auth/forms.pyc"><doc></doc>
<import_attribute name="default_token_generator" type="PasswordResetTokenGenerator" module="django.contrib.auth.tokens"></import_attribute>
<import_function name="authenticate" module="django.contrib.auth"></import_function>
<import_function name="int_to_base36" module="django.utils.http"></import_function>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<attribute name="forms" type="module"><value><![CDATA[<module 'django.forms' from '/usr/local/lib/python2.7/dist-packages/django/forms/__init__.pyc'>]]></value>
</attribute>
<attribute name="loader" type="module"><value><![CDATA[<module 'django.template.loader' from '/usr/local/lib/python2.7/dist-packages/django/template/loader.pyc'>]]></value>
</attribute>
<class name="UserChangeForm"></class>
<doc></doc>
<import_attribute name="declared_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<import_attribute name="_meta" type="ModelFormOptions" module="django.forms.models"></import_attribute>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0694>]]></value>
</attribute>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="Meta"></class>
<doc></doc>
<import_class name="model" module="django.contrib.auth.models"></import_class>
<class name="UserCreationForm"></class>
<doc><![CDATA[
    A form that creates a user, with no privileges, from the given username and password.
    ]]></doc>
<import_attribute name="declared_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<import_attribute name="_meta" type="ModelFormOptions" module="django.forms.models"></import_attribute>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e05cc>]]></value>
</attribute>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="clean_username"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clean_password2"><doc></doc>
<argument name="self"></argument>
</function>
<class name="Meta"></class>
<doc></doc>
<import_class name="model" module="django.contrib.auth.models"></import_class>
<attribute name="fields" type="tuple"><value><![CDATA[('username',)]]></value>
</attribute>
<class name="SetPasswordForm"></class>
<doc><![CDATA[
    A form that lets a user change set his/her password without
    entering the old password
    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0c5c>]]></value>
</attribute>
<function name="clean_new_password2"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
</function>
<class name="PasswordChangeForm"></class>
<doc><![CDATA[
    A form that lets a user change his/her password by entering
    their old password.
    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0cac>]]></value>
</attribute>
<function name="clean_old_password"><doc><![CDATA[
        Validates that the old_password field is correct.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="AuthenticationForm"></class>
<doc><![CDATA[
    Base class for authenticating users. Extend this to get a form that accepts
    username/password logins.
    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0bbc>]]></value>
</attribute>
<function name="check_for_test_cookie"><doc></doc>
<argument name="self"></argument>
</function>
<function name="clean"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_user_id"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_user"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc><![CDATA[
        If request is passed in, the form will validate that cookies are
        enabled. Note that the request (a HttpRequest object) must have set a
        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before
        running this validation.
        ]]></doc>
<argument name="self"></argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<class name="PasswordResetForm"></class>
<doc></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0c0c>]]></value>
</attribute>
<function name="clean_email"><doc><![CDATA[
        Validates that an active user exists with the given e-mail address.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc><![CDATA[
        Generates a one-use only link for resetting password and sends to the user
        ]]></doc>
<argument name="self"></argument>
<argument name="domain_override" type="NoneType"><value></value>
</argument>
<argument name="email_template_name" type="str"><value><![CDATA[registration/password_reset_email.html]]></value>
</argument>
<argument name="use_https" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="token_generator" type="PasswordResetTokenGenerator"><value><![CDATA[<django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0x967deec>]]></value>
</argument>
<argument name="from_email" type="NoneType"><value></value>
</argument>
<argument name="request" type="NoneType"><value></value>
</argument>
</function>
<class name="AdminPasswordChangeForm"></class>
<doc><![CDATA[
    A form used to change the password of a user in the admin interface.
    ]]></doc>
<import_attribute name="base_fields" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<attribute name="media" type="property"><value><![CDATA[<property object at 0x96e0cfc>]]></value>
</attribute>
<function name="clean_password2"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc><![CDATA[
        Saves the new password.
        ]]></doc>
<argument name="self"></argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="user"></argument>
</function>
</package>
<package name="django.contrib.auth.signals" file="/django/contrib/auth/signals.pyc"><doc></doc>
<import_attribute name="user_logged_out" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.contrib.messages.storage.session" file="/django/contrib/messages/storage/session.pyc"><doc></doc>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<class name="SessionStorage"></class>
<doc><![CDATA[
    Stores messages in the session (that is, django.contrib.sessions).
    ]]></doc>
<attribute name="session_key" type="str"><value><![CDATA[_messages]]></value>
</attribute>
<function name="_get" args="args" kwargs="kwargs"><doc><![CDATA[
        Retrieves a list of messages from the request's session.  This storage
        always stores everything it is given, so return True for the
        all_retrieved flag.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_store" args="args" kwargs="kwargs"><doc><![CDATA[
        Stores a list of messages to the request's session.
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
<argument name="response"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.storage.fallback" file="/django/contrib/messages/storage/fallback.pyc"><doc></doc>
<import_class name="SessionStorage" module="django.contrib.messages.storage.session"></import_class>
<import_class name="CookieStorage" module="django.contrib.messages.storage.cookie"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<class name="FallbackStorage"></class>
<doc><![CDATA[
    Tries to store all messages in the first backend, storing any unstored
    messages in each subsequent backend backend.
    ]]></doc>
<attribute name="storage_classes" type="tuple"><value><![CDATA[(<class 'django.contrib.messages.storage.cookie.CookieStorage'>, <class 'django.contrib.messages.storage.session.SessionStorage'>)]]></value>
</attribute>
<function name="_store" args="args" kwargs="kwargs"><doc><![CDATA[
        Stores the messages, returning any unstored messages after trying all
        backends.

        For each storage backend, any messages not stored are passed on to the
        next backend.
        ]]></doc>
<argument name="self"></argument>
<argument name="messages"></argument>
<argument name="response"></argument>
</function>
<function name="_get" args="args" kwargs="kwargs"><doc><![CDATA[
        Gets a single list of messages from all storage backends.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.messages.api" file="/django/contrib/messages/api.pyc"><doc></doc>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="default_storage" module="django.contrib.messages.storage"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<attribute name="__all__" type="tuple"><value><![CDATA[('add_message', 'get_messages', 'get_level', 'set_level', 'debug', 'info', 'success', 'warning', 'error')]]></value>
</attribute>
<attribute name="constants" type="module"><value><![CDATA[<module 'django.contrib.messages.constants' from '/usr/local/lib/python2.7/dist-packages/django/contrib/messages/constants.pyc'>]]></value>
</attribute>
<function name="info"><doc><![CDATA[
    Adds a message with the ``INFO`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="success"><doc><![CDATA[
    Adds a message with the ``SUCCESS`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_messages"><doc><![CDATA[
    Returns the message storage on the request if it exists, otherwise returns
    user.message_set.all() as the old auth context processor did.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="get_level"><doc><![CDATA[
    Returns the minimum level of messages to be recorded.

    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,
    the ``INFO`` level is used.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="warning"><doc><![CDATA[
    Adds a message with the ``WARNING`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="set_level"><doc><![CDATA[
    Sets the minimum level of messages to be recorded, returning ``True`` if
    the level was recorded successfully.

    If set to ``None``, the default level will be used (see the ``get_level``
    method).
    ]]></doc>
<argument name="request"></argument>
<argument name="level"></argument>
</function>
<function name="error"><doc><![CDATA[
    Adds a message with the ``ERROR`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="debug"><doc><![CDATA[
    Adds a message with the ``DEBUG`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_message"><doc><![CDATA[
    Attempts to add a message to the request using the 'messages' app, falling
    back to the user's message_set if MessageMiddleware hasn't been enabled.
    ]]></doc>
<argument name="request"></argument>
<argument name="level"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="MessageFailure"></class>
<doc></doc>
</package>
<package name="django.core.paginator" file="/django/core/paginator.pyc"><doc></doc>
<depends name="math"></depends>
<import_attribute name="ceil" type="builtin_function_or_method" module="math"></import_attribute>
<class name="Paginator"></class>
<doc></doc>
<attribute name="count" type="property"><value><![CDATA[<property object at 0x96ced9c>]]></value>
</attribute>
<attribute name="num_pages" type="property"><value><![CDATA[<property object at 0x96cedc4>]]></value>
</attribute>
<attribute name="page_range" type="property"><value><![CDATA[<property object at 0x96cedec>]]></value>
</attribute>
<function name="validate_number"><doc><![CDATA[Validates the given 1-based page number.]]></doc>
<argument name="self"></argument>
<argument name="number"></argument>
</function>
<function name="_get_num_pages"><doc><![CDATA[Returns the total number of pages.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_count"><doc><![CDATA[Returns the total number of objects, across all pages.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_page_range"><doc><![CDATA[
        Returns a 1-based range of pages for iterating through within
        a template for loop.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="page"><doc><![CDATA[Returns a Page object for the given 1-based page number.]]></doc>
<argument name="self"></argument>
<argument name="number"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="object_list"></argument>
<argument name="per_page"></argument>
<argument name="orphans" type="int"><value></value>
</argument>
<argument name="allow_empty_first_page" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="InvalidPage"></class>
<doc></doc>
<class name="EmptyPage"></class>
<doc></doc>
<class name="QuerySetPaginator"></class>
<doc></doc>
<attribute name="count" type="property"><value><![CDATA[<property object at 0x96ced9c>]]></value>
</attribute>
<attribute name="num_pages" type="property"><value><![CDATA[<property object at 0x96cedc4>]]></value>
</attribute>
<attribute name="page_range" type="property"><value><![CDATA[<property object at 0x96cedec>]]></value>
</attribute>
<function name="validate_number"><doc><![CDATA[Validates the given 1-based page number.]]></doc>
<argument name="self"></argument>
<argument name="number"></argument>
</function>
<function name="_get_num_pages"><doc><![CDATA[Returns the total number of pages.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_count"><doc><![CDATA[Returns the total number of objects, across all pages.]]></doc>
<argument name="self"></argument>
</function>
<function name="_get_page_range"><doc><![CDATA[
        Returns a 1-based range of pages for iterating through within
        a template for loop.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="page"><doc><![CDATA[Returns a Page object for the given 1-based page number.]]></doc>
<argument name="self"></argument>
<argument name="number"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="object_list"></argument>
<argument name="per_page"></argument>
<argument name="orphans" type="int"><value></value>
</argument>
<argument name="allow_empty_first_page" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<class name="PageNotAnInteger"></class>
<doc></doc>
<class name="Page"></class>
<doc></doc>
<function name="has_next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="next_page_number"><doc></doc>
<argument name="self"></argument>
</function>
<function name="end_index"><doc><![CDATA[
        Returns the 1-based index of the last object on this page,
        relative to total objects found (hits).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="has_previous"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="object_list"></argument>
<argument name="number"></argument>
<argument name="paginator"></argument>
</function>
<function name="has_other_pages"><doc></doc>
<argument name="self"></argument>
</function>
<function name="previous_page_number"><doc></doc>
<argument name="self"></argument>
</function>
<function name="start_index"><doc><![CDATA[
        Returns the 1-based index of the first object on this page,
        relative to total objects in the paginator.
        ]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management" file="/django/core/management/__init__.pyc"><doc></doc>
<depends name="imp"></depends>
<depends name="sys"></depends>
<depends name="os"></depends>
<depends name="optparse"></depends>
<import_function name="get_version" module="django"></import_function>
<import_function name="handle_default_options" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="OptionParser" module="optparse"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<attribute name="color" type="module"><value><![CDATA[<module 'django.core.management.color' from '/usr/local/lib/python2.7/dist-packages/django/core/management/color.pyc'>]]></value>
</attribute>
<attribute name="imp" type="module"><value><![CDATA[<module 'imp' (built-in)>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="NO_DEFAULT" type="tuple"><value><![CDATA[('NO', 'DEFAULT')]]></value>
</attribute>
<attribute name="_commands" type="dict"><value><![CDATA[{'dbshell': 'django.core', 'compilemessages': 'django.core', 'dumpdata': 'django.core', 'sql': 'django.core', 'sqlcustom': 'django.core', 'createcachetable': 'django.core', 'flush': 'django.core', 'syncdb': 'django.core', 'sqlinitialdata': 'django.core', 'runserver': 'django.core', 'cleanup': 'django.core', 'runfcgi': 'django.core', 'test': 'django.core', 'sqlclear': 'django.core', 'sqlreset': 'django.core', 'shell': 'django.core', 'sqlsequencereset': 'django.core', 'testserver': 'django.core', 'makemessages': 'django.core', 'validate': 'django.core', 'sqlall': 'django.core', 'reset': 'django.core', 'diffsettings': 'django.core', 'harvester': 'dox.harvester', 'inspectdb': 'django.core', 'startapp': <django.core.management.commands.startapp.ProjectCommand object at 0xb6ec53ac>, 'sqlflush': 'django.core', 'loaddata': 'django.core', 'sqlindexes': 'django.core'}]]></value>
</attribute>
<attribute name="commands" type="module"><value><![CDATA[<module 'django.core.management.commands' from '/usr/local/lib/python2.7/dist-packages/django/core/management/commands/__init__.pyc'>]]></value>
</attribute>
<attribute name="validation" type="module"><value><![CDATA[<module 'django.core.management.validation' from '/usr/local/lib/python2.7/dist-packages/django/core/management/validation.pyc'>]]></value>
</attribute>
<attribute name="django" type="module"><value><![CDATA[<module 'django' from '/usr/local/lib/python2.7/dist-packages/django/__init__.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.management.base' from '/usr/local/lib/python2.7/dist-packages/django/core/management/base.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="find_management_module"><doc><![CDATA[
    Determines the path to the management module for the given app_name,
    without actually importing the application or the management module.

    Raises ImportError if the management module cannot be found for any reason.
    ]]></doc>
<argument name="app_name"></argument>
</function>
<function name="execute_manager"><doc><![CDATA[
    Like execute_from_command_line(), but for use by manage.py, a
    project-specific django-admin.py utility.
    ]]></doc>
<argument name="settings_mod"></argument>
<argument name="argv" type="NoneType"><value></value>
</argument>
</function>
<function name="find_commands"><doc><![CDATA[
    Given a path to a management directory, returns a list of all the command
    names that are available.

    Returns an empty list if no commands are defined.
    ]]></doc>
<argument name="management_dir"></argument>
</function>
<function name="call_command" args="args" kwargs="options"><doc><![CDATA[
    Calls the given command, with the given options and args/kwargs.

    This is the primary API you should use for calling specific commands.

    Some examples:
        call_command('syncdb')
        call_command('shell', plain=True)
        call_command('sqlall', 'myapp')
    ]]></doc>
<argument name="name"></argument>
</function>
<function name="execute_from_command_line"><doc><![CDATA[
    A simple method that runs a ManagementUtility.
    ]]></doc>
<argument name="argv" type="NoneType"><value></value>
</argument>
</function>
<function name="setup_environ"><doc><![CDATA[
    Configures the runtime environment. This can also be used by external
    scripts wanting to set up a similar environment to manage.py.
    Returns the project directory (assuming the passed settings module is
    directly in the project directory).

    The "original_settings_path" parameter is optional, but recommended, since
    trying to work out the original path from the module can be problematic.
    ]]></doc>
<argument name="settings_mod"></argument>
<argument name="original_settings_path" type="NoneType"><value></value>
</argument>
</function>
<function name="get_commands"><doc><![CDATA[
    Returns a dictionary mapping command names to their callback applications.

    This works by looking for a management.commands package in django.core, and
    in each installed application -- if a commands package exists, all commands
    in that package are registered.

    Core commands are always included. If a settings module has been
    specified, user-defined commands will also be included, the
    startproject command will be disabled, and the startapp command
    will be modified to use the directory in which the settings module appears.

    The dictionary is in the format {command_name: app_name}. Key-value
    pairs from this dictionary can then be used in calls to
    load_command_class(app_name, command_name)

    If a specific version of a command must be loaded (e.g., with the
    startapp command), the instantiated module can be placed in the
    dictionary in place of the application name.

    The dictionary is cached on the first call and reused on subsequent
    calls.
    ]]></doc>
</function>
<function name="load_command_class"><doc><![CDATA[
    Given a command name and an application name, returns the Command
    class instance. All errors raised by the import process
    (ImportError, AttributeError) are allowed to propagate.
    ]]></doc>
<argument name="app_name"></argument>
<argument name="name"></argument>
</function>
<class name="ManagementUtility"></class>
<doc><![CDATA[
    Encapsulates the logic of the django-admin.py and manage.py utilities.

    A ManagementUtility has a number of commands, which can be manipulated
    by editing the self.commands dictionary.
    ]]></doc>
<function name="autocomplete"><doc><![CDATA[
        Output completion suggestions for BASH.

        The output of this function is passed to BASH's `COMREPLY` variable and
        treated as completion suggestions. `COMREPLY` expects a space
        separated string as the result.

        The `COMP_WORDS` and `COMP_CWORD` BASH environment variables are used
        to get information about the cli input. Please refer to the BASH
        man-page for more information about this variables.

        Subcommand options are saved as pairs. A pair consists of
        the long option string (e.g. '--exclude') and a boolean
        value indicating if the option requires arguments. When printing to
        stdout, a equal sign is appended to options which require arguments.

        Note: If debugging this function, it is recommended to write the debug
        output in a separate file. Otherwise the debug output will be treated
        and formatted as potential completion suggestions.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="execute"><doc><![CDATA[
        Given the command-line arguments, this figures out which subcommand is
        being run, creates a parser appropriate to that command, and runs it.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="fetch_command"><doc><![CDATA[
        Tries to fetch the given subcommand, printing a message with the
        appropriate command called from the command line (usually
        "django-admin.py" or "manage.py") if it can't be found.
        ]]></doc>
<argument name="self"></argument>
<argument name="subcommand"></argument>
</function>
<function name="main_help_text"><doc><![CDATA[
        Returns the script's main help text, as a string.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="argv" type="NoneType"><value></value>
</argument>
</function>
<class name="LaxOptionParser"></class>
<doc><![CDATA[
    An option parser that doesn't raise any errors on unknown options.

    This is needed because the --settings and --pythonpath options affect
    the commands (and thus the options) that are available to the user.
    ]]></doc>
<function name="print_help"><doc><![CDATA[Output nothing.

        The lax options are included in the normal option parser, so under
        normal usage, we don't need to print the lax options.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_process_args"><doc><![CDATA[
        Overrides OptionParser._process_args to exclusively handle default
        options and ignore args and other options.

        This overrides the behavior of the super class, which stop parsing
        at the first unrecognized option.
        ]]></doc>
<argument name="self"></argument>
<argument name="largs"></argument>
<argument name="rargs"></argument>
<argument name="values"></argument>
</function>
<function name="print_lax_help"><doc><![CDATA[Output the basic options available to every command.

        This just redirects to the default print_help() behaviour.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="error"><doc></doc>
<argument name="self"></argument>
<argument name="msg"></argument>
</function>
</package>
<package name="django.core.management.sql" file="/django/core/management/sql.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="sql_delete"><doc><![CDATA[Returns a list of the DROP TABLE SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="custom_sql_for_model"><doc></doc>
<argument name="model"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_reset"><doc><![CDATA[Returns a list of the DROP TABLE SQL, then the CREATE TABLE SQL, for the given module.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_custom"><doc><![CDATA[Returns a list of the custom table modifying SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_all"><doc><![CDATA[Returns a list of CREATE TABLE SQL, initial-data inserts, and CREATE INDEX SQL for the given module.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="emit_post_sync_signal"><doc></doc>
<argument name="created_models"></argument>
<argument name="verbosity"></argument>
<argument name="interactive"></argument>
<argument name="db"></argument>
</function>
<function name="sql_create"><doc><![CDATA[Returns a list of the CREATE TABLE SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_flush"><doc><![CDATA[
    Returns a list of the SQL statements used to flush the database.

    If only_django is True, then only table names that have associated Django
    models and are in INSTALLED_APPS will be included.
    ]]></doc>
<argument name="style"></argument>
<argument name="connection"></argument>
<argument name="only_django" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="sql_indexes"><doc><![CDATA[Returns a list of the CREATE INDEX SQL statements for all models in the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
</package>
<package name="django.core.management.base" file="/django/core/management/base.pyc"><doc><![CDATA[
Base classes for writing management commands (named commands which can
be executed through ``django-admin.py`` or ``manage.py``).

]]></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<depends name="optparse"></depends>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="OptionParser" module="optparse"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="django" type="module"><value><![CDATA[<module 'django' from '/usr/local/lib/python2.7/dist-packages/django/__init__.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="_make_writeable"><doc><![CDATA[
    Make sure that the file is writeable. Useful if our source is
    read-only.

    ]]></doc>
<argument name="filename"></argument>
</function>
<function name="handle_default_options"><doc><![CDATA[
    Include any default options that all commands should accept here
    so that ManagementUtility can handle them before searching for
    user commands.

    ]]></doc>
<argument name="options"></argument>
</function>
<function name="copy_helper"><doc><![CDATA[
    Copies either a Django application layout template or a Django project
    layout template into the specified directory.

    ]]></doc>
<argument name="style"></argument>
<argument name="app_or_project"></argument>
<argument name="name"></argument>
<argument name="directory"></argument>
<argument name="other_name" type="str"><value></value>
</argument>
</function>
<class name="BaseCommand"></class>
<doc><![CDATA[
    The base class from which all management commands ultimately
    derive.

    Use this class if you want access to all of the mechanisms which
    parse the command-line arguments and work out what code to call in
    response; if you don't need to change any of that behavior,
    consider using one of the subclasses defined in this file.

    If you are interested in overriding/customizing various aspects of
    the command-parsing and -execution behavior, the normal flow works
    as follows:

    1. ``django-admin.py`` or ``manage.py`` loads the command class
       and calls its ``run_from_argv()`` method.

    2. The ``run_from_argv()`` method calls ``create_parser()`` to get
       an ``OptionParser`` for the arguments, parses them, performs
       any environment changes requested by options like
       ``pythonpath``, and then calls the ``execute()`` method,
       passing the parsed arguments.

    3. The ``execute()`` method attempts to carry out the command by
       calling the ``handle()`` method with the parsed arguments; any
       output produced by ``handle()`` will be printed to standard
       output and, if the command is intended to produce a block of
       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.

    4. If ``handle()`` raised a ``CommandError``, ``execute()`` will
       instead print an error message to ``stderr``.

    Thus, the ``handle()`` method is typically the starting point for
    subclasses; many built-in commands and command types either place
    all of their logic in ``handle()``, or perform some additional
    parsing work in ``handle()`` and then delegate from it to more
    specialized methods as needed.

    Several attributes affect behavior at various steps along the way:

    ``args``
        A string listing the arguments accepted by the command,
        suitable for use in help messages; e.g., a command which takes
        a list of application names might set this to '<appname
        appname ...>'.

    ``can_import_settings``
        A boolean indicating whether the command needs to be able to
        import Django settings; if ``True``, ``execute()`` will verify
        that this is possible before proceeding. Default value is
        ``True``.

    ``help``
        A short description of the command, which will be printed in
        help messages.

    ``option_list``
        This is the list of ``optparse`` options which will be fed
        into the command's ``OptionParser`` for parsing arguments.

    ``output_transaction``
        A boolean indicating whether the command outputs SQL
        statements; if ``True``, the output will automatically be
        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is
        ``False``.

    ``requires_model_validation``
        A boolean; if ``True``, validation of installed models will be
        performed prior to executing the command. Default value is
        ``True``. To validate an individual application's models
        rather than all applications' models, call
        ``self.validate(app)`` from ``handle()``, where ``app`` is the
        application's Python module.

    ]]></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value></value>
</attribute>
<attribute name="args" type="str"><value></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>)]]></value>
</attribute>
<attribute name="can_import_settings" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="print_help"><doc><![CDATA[
        Print the help message for this command, derived from
        ``self.usage()``.

        ]]></doc>
<argument name="self"></argument>
<argument name="prog_name"></argument>
<argument name="subcommand"></argument>
</function>
<function name="run_from_argv"><doc><![CDATA[
        Set up any environment changes requested (e.g., Python path
        and Django settings), then run this command.

        ]]></doc>
<argument name="self"></argument>
<argument name="argv"></argument>
</function>
<function name="create_parser"><doc><![CDATA[
        Create and return the ``OptionParser`` which will be used to
        parse the arguments to this command.

        ]]></doc>
<argument name="self"></argument>
<argument name="prog_name"></argument>
<argument name="subcommand"></argument>
</function>
<function name="handle" args="args" kwargs="options"><doc><![CDATA[
        The actual logic of the command. Subclasses must implement
        this method.

        ]]></doc>
<argument name="self"></argument>
</function>
<function name="validate"><doc><![CDATA[
        Validates the given app, raising CommandError for any errors.

        If app is None, then this will validate all installed apps.

        ]]></doc>
<argument name="self"></argument>
<argument name="app" type="NoneType"><value></value>
</argument>
<argument name="display_num_errors" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="execute" args="args" kwargs="options"><doc><![CDATA[
        Try to execute this command, performing model validation if
        needed (as controlled by the attribute
        ``self.requires_model_validation``). If the command raises a
        ``CommandError``, intercept it and print it sensibly to
        stderr.

        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_version"><doc><![CDATA[
        Return the Django version, which should be correct for all
        built-in Django commands. User-supplied commands should
        override this method.

        ]]></doc>
<argument name="self"></argument>
</function>
<function name="usage"><doc><![CDATA[
        Return a brief description of how to use this command, by
        default from the attribute ``self.help``.

        ]]></doc>
<argument name="self"></argument>
<argument name="subcommand"></argument>
</function>
<class name="AppCommand"></class>
<doc><![CDATA[
    A management command which takes one or more installed application
    names as arguments, and does something with each of them.

    Rather than implementing ``handle()``, subclasses must implement
    ``handle_app()``, which will be called once for each application.

    ]]></doc>
<attribute name="args" type="str"><value><![CDATA[<appname appname ...>]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc><![CDATA[
        Perform the command's actions for ``app``, which will be the
        Python module corresponding to an application name given on
        the command line.

        ]]></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
<function name="handle" args="app_labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
<class name="CommandError"></class>
<doc><![CDATA[
    Exception class indicating a problem while executing a management
    command.

    If this exception is raised during the execution of a management
    command, it will be caught and turned into a nicely-printed error
    message to the appropriate output stream (i.e., stderr); as a
    result, raising this exception (with a sensible description of the
    error) is the preferred way to indicate that something has gone
    wrong in the execution of a command.

    ]]></doc>
<class name="LabelCommand"></class>
<doc><![CDATA[
    A management command which takes one or more arbitrary arguments
    (labels) on the command line, and does something with each of
    them.

    Rather than implementing ``handle()``, subclasses must implement
    ``handle_label()``, which will be called once for each label.

    If the arguments should be names of installed applications, use
    ``AppCommand`` instead.

    ]]></doc>
<attribute name="args" type="str"><value><![CDATA[<label label ...>]]></value>
</attribute>
<attribute name="label" type="str"><value><![CDATA[label]]></value>
</attribute>
<function name="handle" args="labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
<function name="handle_label" kwargs="options"><doc><![CDATA[
        Perform the command's actions for ``label``, which will be the
        string as given on the command line.

        ]]></doc>
<argument name="self"></argument>
<argument name="label"></argument>
</function>
<class name="NoArgsCommand"></class>
<doc><![CDATA[
    A command which takes no arguments on the command line.

    Rather than implementing ``handle()``, subclasses must implement
    ``handle_noargs()``; ``handle()`` itself is overridden to ensure
    no arguments are passed to the command.

    Attempting to pass arguments will raise ``CommandError``.

    ]]></doc>
<attribute name="args" type="str"><value></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc><![CDATA[
        Perform this command's actions.

        ]]></doc>
<argument name="self"></argument>
</function>
<function name="handle" args="args" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.validation" file="/django/core/management/validation.pyc"><doc></doc>
<depends name="sys"></depends>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="is_iterable" module="django.utils.itercompat"></import_function>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<function name="get_validation_errors"><doc><![CDATA[
    Validates all models that are part of the specified app. If no app name is provided,
    validates all models of all installed apps. Writes errors, if any, to outfile.
    Returns number of errors.
    ]]></doc>
<argument name="outfile"></argument>
<argument name="app" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelErrorCollection"></class>
<doc></doc>
<function name="add"><doc></doc>
<argument name="self"></argument>
<argument name="context"></argument>
<argument name="error"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="outfile" type="file"><value><![CDATA[<open file '<stdout>', mode 'w' at 0xb73b8078>]]></value>
</argument>
</function>
</package>
<package name="django.core.management.commands" file="/django/core/management/commands/__init__.pyc"><doc></doc>
<attribute name="startapp" type="module"><value><![CDATA[<module 'django.core.management.commands.startapp' from '/usr/local/lib/python2.7/dist-packages/django/core/management/commands/startapp.pyc'>]]></value>
</attribute>
</package>
<package name="django.core.management.commands.sqlflush" file="/django/core/management/commands/sqlflush.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_flush" module="django.core.management.sql"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x97f6acc: --database>)]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.dbshell" file="/django/core/management/commands/dbshell.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Runs the command-line client for specified database, or the default database if none is provided.]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x97fb26c: --database>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.runfcgi" file="/django/core/management/commands/runfcgi.pyc"><doc></doc>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Runs this project as a FastCGI application. Requires flup.]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[various KEY=val options, use `runfcgi help` for help]]]></value>
</attribute>
<function name="handle" args="args" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
<function name="usage"><doc></doc>
<argument name="self"></argument>
<argument name="subcommand"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlcustom" file="/django/core/management/commands/sqlcustom.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_custom" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the custom table modifying SQL statements for the given app name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x980004c: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlall" file="/django/core/management/commands/sqlall.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_all" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x980080c: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.flush" file="/django/core/management/commands/flush.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="call_command" module="django.core.management"></import_function>
<import_function name="emit_post_sync_signal" module="django.core.management.sql"></import_function>
<import_function name="sql_flush" module="django.core.management.sql"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x980502c: --noinput>, <Option at 0x98050ac: --database>)]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Executes ``sqlflush`` on the current database.]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.startproject" file="/django/core/management/commands/startproject.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="os"></depends>
<depends name="random"></depends>
<import_attribute name="choice" type="instancemethod" module="random"></import_attribute>
<import_function name="copy_helper" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="can_import_settings" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Creates a Django project directory structure for the given project name in the current directory.]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[projectname]]]></value>
</attribute>
<attribute name="label" type="str"><value><![CDATA[project name]]></value>
</attribute>
<function name="handle_label" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="project_name"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlsequencereset" file="/django/core/management/commands/sqlsequencereset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the SQL statements for resetting sequences for the given app name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x9805e0c: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlinitialdata" file="/django/core/management/commands/sqlinitialdata.pyc"><doc></doc>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[RENAMED: see 'sqlcustom']]></value>
</attribute>
<function name="handle" args="apps" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.shell" file="/django/core/management/commands/shell.pyc"><doc></doc>
<depends name="os"></depends>
<depends name="optparse"></depends>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Runs a Python interactive interpreter. Tries to use IPython, if it's available.]]></value>
</attribute>
<attribute name="shells" type="list"><value><![CDATA[['ipython', 'bpython']]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x981eaac: --plain>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="bpython"><doc></doc>
<argument name="self"></argument>
</function>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
<function name="ipython"><doc></doc>
<argument name="self"></argument>
</function>
<function name="run_shell"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.loaddata" file="/django/core/management/commands/loaddata.pyc"><doc></doc>
<depends name="bz2"></depends>
<depends name="zipfile"></depends>
<depends name="sys"></depends>
<depends name="gzip"></depends>
<depends name="os"></depends>
<depends name="itertools"></depends>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_apps" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="product" module="itertools"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="serializers" type="module"><value><![CDATA[<module 'django.core.serializers' from '/usr/local/lib/python2.7/dist-packages/django/core/serializers/__init__.pyc'>]]></value>
</attribute>
<attribute name="bz2" type="module"><value><![CDATA[<module 'bz2' from '/usr/lib/python2.7/lib-dynload/bz2.so'>]]></value>
</attribute>
<attribute name="has_bz2" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="zipfile" type="module"><value><![CDATA[<module 'zipfile' from '/usr/lib/python2.7/zipfile.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="gzip" type="module"><value><![CDATA[<module 'gzip' from '/usr/lib/python2.7/gzip.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Installs the named fixture(s) in the database.]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[fixture [fixture ...]]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x983e6ec: --database>)]]></value>
</attribute>
<function name="handle" args="fixture_labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.serializers" file="/django/core/serializers/__init__.pyc"><doc><![CDATA[
Interfaces for serializing Django objects.

Usage::

    from django.core import serializers
    json = serializers.serialize("json", some_query_set)
    objects = list(serializers.deserialize("json", json))

To add your own serializers, use the SERIALIZATION_MODULES setting::

    SERIALIZATION_MODULES = {
        "csv" : "path.to.csv.serializer",
        "txt" : "path.to.txt.serializer",
    }

]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<attribute name="importlib" type="module"><value><![CDATA[<module 'django.utils.importlib' from '/usr/local/lib/python2.7/dist-packages/django/utils/importlib.pyc'>]]></value>
</attribute>
<attribute name="BUILTIN_SERIALIZERS" type="dict"><value><![CDATA[{'xml': 'django.core.serializers.xml_serializer', 'python': 'django.core.serializers.python', 'json': 'django.core.serializers.json'}]]></value>
</attribute>
<attribute name="_serializers" type="dict"><value></value>
</attribute>
<function name="get_deserializer"><doc></doc>
<argument name="format"></argument>
</function>
<function name="get_serializer"><doc></doc>
<argument name="format"></argument>
</function>
<function name="serialize" kwargs="options"><doc><![CDATA[
    Serialize a queryset (or any iterator that returns database objects) using
    a certain serializer.
    ]]></doc>
<argument name="format"></argument>
<argument name="queryset"></argument>
</function>
<function name="_load_serializers"><doc><![CDATA[
    Register built-in and settings-defined serializers. This is done lazily so
    that user code has a chance to (e.g.) set up custom settings without
    needing to be careful of import order.
    ]]></doc>
</function>
<function name="deserialize" kwargs="options"><doc><![CDATA[
    Deserialize a stream or a string. Returns an iterator that yields ``(obj,
    m2m_relation_dict)``, where ``obj`` is a instantiated -- but *unsaved* --
    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :
    list_of_related_objects}``.
    ]]></doc>
<argument name="format"></argument>
<argument name="stream_or_string"></argument>
</function>
<function name="get_serializer_formats"><doc></doc>
</function>
<function name="unregister_serializer"><doc><![CDATA[Unregister a given serializer. This is not a thread-safe operation.]]></doc>
<argument name="format"></argument>
</function>
<function name="get_public_serializer_formats"><doc></doc>
</function>
<function name="register_serializer"><doc><![CDATA[Register a new serializer.

    ``serializer_module`` should be the fully qualified module name
    for the serializer.

    If ``serializers`` is provided, the registration will be added
    to the provided dictionary.

    If ``serializers`` is not provided, the registration will be made
    directly into the global register of serializers. Adding serializers
    directly is not a thread-safe operation.
    ]]></doc>
<argument name="format"></argument>
<argument name="serializer_module"></argument>
<argument name="serializers" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.serializers.xml_serializer" file="/django/core/serializers/xml_serializer.pyc"><doc><![CDATA[
XML serializer.
]]></doc>
<depends name="xml.dom.pulldom"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="SimplerXMLGenerator" module="django.utils.xmlutils"></import_class>
<attribute name="pulldom" type="module"><value><![CDATA[<module 'xml.dom.pulldom' from '/usr/lib/python2.7/xml/dom/pulldom.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.serializers.base' from '/usr/local/lib/python2.7/dist-packages/django/core/serializers/base.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="getInnerText"><doc><![CDATA[
    Get all the inner text of a DOM node (recursively).
    ]]></doc>
<argument name="node"></argument>
</function>
<class name="Deserializer"></class>
<doc><![CDATA[
    Deserialize XML.
    ]]></doc>
<function name="_handle_fk_field_node"><doc><![CDATA[
        Handle a <field> node for a ForeignKey
        ]]></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="field"></argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_handle_m2m_field_node"><doc><![CDATA[
        Handle a <field> node for a ManyToManyField.
        ]]></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="field"></argument>
</function>
<function name="_handle_object"><doc><![CDATA[
        Convert an <object> node to a DeserializedObject.
        ]]></doc>
<argument name="self"></argument>
<argument name="node"></argument>
</function>
<function name="_get_model_from_node"><doc><![CDATA[
        Helper to look up a model from a <object model=...> or a <field
        rel=... to=...> node.
        ]]></doc>
<argument name="self"></argument>
<argument name="node"></argument>
<argument name="attr"></argument>
</function>
<function name="__init__" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="stream_or_string"></argument>
</function>
<class name="Serializer"></class>
<doc><![CDATA[
    Serializes a QuerySet to XML.
    ]]></doc>
<function name="indent"><doc></doc>
<argument name="self"></argument>
<argument name="level"></argument>
</function>
<function name="end_object"><doc><![CDATA[
        Called after handling all fields for an object.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="handle_fk_field"><doc><![CDATA[
        Called to handle a ForeignKey (we need to treat them slightly
        differently from regular fields).
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_field"><doc><![CDATA[
        Called to handle each field on an object (except for ForeignKeys and
        ManyToManyFields)
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_m2m_field"><doc><![CDATA[
        Called to handle a ManyToManyField. Related objects are only
        serialized as references to the object's PK (i.e. the related *data*
        is not dumped, just the relation).
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="start_serialization"><doc><![CDATA[
        Start serialization -- open the XML document and the root element.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="_start_relational_field"><doc><![CDATA[
        Helper to output the <field> element for relational fields
        ]]></doc>
<argument name="self"></argument>
<argument name="field"></argument>
</function>
<function name="start_object"><doc><![CDATA[
        Called as each object is handled.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="end_serialization"><doc><![CDATA[
        End serialization -- end the document.
        ]]></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.serializers.base" file="/django/core/serializers/base.pyc"><doc><![CDATA[
Module for abstract serializer/unserializer base classes.
]]></doc>
<depends name="StringIO"></depends>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="StringIO" module="StringIO"></import_class>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<class name="DeserializedObject"></class>
<doc><![CDATA[
    A deserialized model.

    Basically a container for holding the pre-saved deserialized data along
    with the many-to-many data saved with the object.

    Call ``save()`` to save the object (with the many-to-many data) to the
    database; call ``save(save_m2m=False)`` to save just the object fields
    (and not touch the many-to-many stuff.)
    ]]></doc>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="save"><doc></doc>
<argument name="self"></argument>
<argument name="save_m2m" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="m2m_data" type="NoneType"><value></value>
</argument>
</function>
<class name="SerializationError"></class>
<doc><![CDATA[Something bad happened during serialization.]]></doc>
<class name="Deserializer"></class>
<doc><![CDATA[
    Abstract base deserializer class.
    ]]></doc>
<function name="next"><doc><![CDATA[Iteration iterface -- return the next item in the stream]]></doc>
<argument name="self"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__" kwargs="options"><doc><![CDATA[
        Init this serializer given a stream or a string
        ]]></doc>
<argument name="self"></argument>
<argument name="stream_or_string"></argument>
</function>
<class name="Serializer"></class>
<doc><![CDATA[
    Abstract serializer base class.
    ]]></doc>
<attribute name="internal_use_only" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="serialize" kwargs="options"><doc><![CDATA[
        Serialize a queryset.
        ]]></doc>
<argument name="self"></argument>
<argument name="queryset"></argument>
</function>
<function name="end_object"><doc><![CDATA[
        Called when serializing of an object ends.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="handle_fk_field"><doc><![CDATA[
        Called to handle a ForeignKey field.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="get_string_value"><doc><![CDATA[
        Convert a field's value to a string.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_field"><doc><![CDATA[
        Called to handle each individual (non-relational) field on an object.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_m2m_field"><doc><![CDATA[
        Called to handle a ManyToManyField.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="getvalue"><doc><![CDATA[
        Return the fully serialized queryset (or None if the output stream is
        not seekable).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="start_serialization"><doc><![CDATA[
        Called when serializing of the queryset starts.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="start_object"><doc><![CDATA[
        Called when serializing of an object starts.
        ]]></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="end_serialization"><doc><![CDATA[
        Called when serializing of the queryset ends.
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="DeserializationError"></class>
<doc><![CDATA[Something bad happened during deserialization.]]></doc>
</package>
<package name="django.core.serializers.json" file="/django/core/serializers/json.pyc"><doc><![CDATA[
Serialize data to/from JSON
]]></doc>
<depends name="decimal"></depends>
<depends name="datetime"></depends>
<depends name="StringIO"></depends>
<import_function name="PythonDeserializer" module="django.core.serializers.python"></import_function>
<import_class name="StringIO" module="StringIO"></import_class>
<import_class name="PythonSerializer" module="django.core.serializers.python"></import_class>
<attribute name="decimal" type="module"><value><![CDATA[<module 'decimal' from '/usr/lib/python2.7/decimal.pyc'>]]></value>
</attribute>
<attribute name="simplejson" type="module"><value><![CDATA[<module 'django.utils.simplejson' from '/usr/local/lib/python2.7/dist-packages/django/utils/simplejson/__init__.pyc'>]]></value>
</attribute>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<attribute name="datetime_safe" type="module"><value><![CDATA[<module 'django.utils.datetime_safe' from '/usr/local/lib/python2.7/dist-packages/django/utils/datetime_safe.pyc'>]]></value>
</attribute>
<function name="Deserializer" kwargs="options"><doc><![CDATA[
    Deserialize a stream or string of JSON data.
    ]]></doc>
<argument name="stream_or_string"></argument>
</function>
<class name="DjangoJSONEncoder"></class>
<doc><![CDATA[
    JSONEncoder subclass that knows how to encode date/time and decimal types.
    ]]></doc>
<attribute name="TIME_FORMAT" type="str"><value><![CDATA[%H:%M:%S]]></value>
</attribute>
<attribute name="DATE_FORMAT" type="str"><value><![CDATA[%Y-%m-%d]]></value>
</attribute>
<function name="default"><doc></doc>
<argument name="self"></argument>
<argument name="o"></argument>
</function>
<class name="DateTimeAwareJSONEncoder"></class>
<doc><![CDATA[
    JSONEncoder subclass that knows how to encode date/time and decimal types.
    ]]></doc>
<attribute name="TIME_FORMAT" type="str"><value><![CDATA[%H:%M:%S]]></value>
</attribute>
<attribute name="DATE_FORMAT" type="str"><value><![CDATA[%Y-%m-%d]]></value>
</attribute>
<function name="default"><doc></doc>
<argument name="self"></argument>
<argument name="o"></argument>
</function>
<class name="Serializer"></class>
<doc><![CDATA[
    Convert a queryset to JSON.
    ]]></doc>
<attribute name="internal_use_only" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="end_serialization"><doc></doc>
<argument name="self"></argument>
</function>
<function name="getvalue"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.serializers.python" file="/django/core/serializers/python.pyc"><doc><![CDATA[
A Python "serializer". Doesn't do much serializing per se -- just converts to
and from basic Python data types (lists, dicts, strings, etc.). Useful as a basis for
other serializers.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="is_protected_type" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.serializers.base' from '/usr/local/lib/python2.7/dist-packages/django/core/serializers/base.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="Deserializer" kwargs="options"><doc><![CDATA[
    Deserialize simple Python objects back into Django ORM instances.

    It's expected that you pass the Python objects themselves (instead of a
    stream or a string) to the constructor
    ]]></doc>
<argument name="object_list"></argument>
</function>
<function name="_get_model"><doc><![CDATA[
    Helper to look up a model from an "app_label.module_name" string.
    ]]></doc>
<argument name="model_identifier"></argument>
</function>
<class name="Serializer"></class>
<doc><![CDATA[
    Serializes a QuerySet to basic Python objects.
    ]]></doc>
<attribute name="internal_use_only" type="bool"><value><![CDATA[True]]></value>
</attribute>
<function name="end_object"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="handle_fk_field"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_field"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="handle_m2m_field"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
<argument name="field"></argument>
</function>
<function name="getvalue"><doc></doc>
<argument name="self"></argument>
</function>
<function name="start_serialization"><doc></doc>
<argument name="self"></argument>
</function>
<function name="start_object"><doc></doc>
<argument name="self"></argument>
<argument name="obj"></argument>
</function>
<function name="end_serialization"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.serializers.pyyaml" file="" error="No module named yaml"></package>
<package name="django.core.management.commands.compilemessages" file="/django/core/management/commands/compilemessages.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="codecs"></depends>
<depends name="os"></depends>
<depends name="optparse"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="codecs" type="module"><value><![CDATA[<module 'codecs' from '/usr/lib/python2.7/codecs.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="has_bom"><doc></doc>
<argument name="fn"></argument>
</function>
<function name="compile_messages"><doc></doc>
<argument name="stderr"></argument>
<argument name="locale" type="NoneType"><value></value>
</argument>
</function>
<class name="Command"></class>
<doc></doc>
<attribute name="can_import_settings" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Compiles .po files to .mo files for use with builtin gettext support.]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x988540c: -l/--locale>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.diffsettings" file="/django/core/management/commands/diffsettings.pyc"><doc></doc>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<function name="module_to_dict"><doc><![CDATA[Converts a module namespace to a Python dictionary. Used by get_settings_diff.]]></doc>
<argument name="module"></argument>
<argument name="omittable" type="function"><value><![CDATA[<function <lambda> at 0x9887144>]]></value>
</argument>
</function>
<class name="Command"></class>
<doc></doc>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Displays differences between the current settings.py and Django's
    default settings. Settings that don't appear in the defaults are
    followed by "###".]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.createcachetable" file="/django/core/management/commands/createcachetable.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x988a22c: --database>)]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Creates the table needed to use the SQL cache backend.]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[<tablename>]]></value>
</attribute>
<attribute name="label" type="str"><value><![CDATA[tablename]]></value>
</attribute>
<function name="handle_label" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="tablename"></argument>
</function>
</package>
<package name="django.core.management.commands.validate" file="/django/core/management/commands/validate.pyc"><doc></doc>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
<doc></doc>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Validates all installed models.]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.reset" file="/django/core/management/commands/reset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_reset" module="django.core.management.sql"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x988ad0c: --noinput>, <Option at 0x988ad8c: --database>)]]></value>
</attribute>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Executes ``sqlreset`` for the given app(s) in the current database.]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[appname ...]]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.dumpdata" file="/django/core/management/commands/dumpdata.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="serializers" type="module"><value><![CDATA[<module 'django.core.serializers' from '/usr/local/lib/python2.7/dist-packages/django/core/serializers/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="sort_dependencies"><doc><![CDATA[Sort a list of app,modellist pairs into a single list of models.

    The single list of models is sorted so that any model with a natural key
    is serialized before a normal model, and any model with a natural key
    dependency has it's dependencies serialized first.
    ]]></doc>
<argument name="app_list"></argument>
</function>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Output the contents of the database as a fixture of the given format (using each model's default manager unless --all is specified).]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[appname appname.ModelName ...]]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x988f9ac: --format>, <Option at 0x988fa2c: --indent>, <Option at 0x988fa8c: --database>, <Option at 0x988fb0c: -e/--exclude>, <Option at 0x988fb6c: -n/--natural>, <Option at 0x988fbcc: -a/--all>)]]></value>
</attribute>
<function name="handle" args="app_labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.test" file="/django/core/management/commands/test.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x9892b6c: --noinput>, <Option at 0x9892bcc: --failfast>)]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Runs the test suite for the specified applications, or the entire site if no apps are specified.]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[appname ...]]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle" args="test_labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlclear" file="/django/core/management/commands/sqlclear.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_delete" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the DROP TABLE SQL statements for the given app name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98964ec: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlreset" file="/django/core/management/commands/sqlreset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_reset" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the DROP TABLE SQL, then the CREATE TABLE SQL, for the given app name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x9896cac: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.runserver" file="/django/core/management/commands/runserver.pyc"><doc></doc>
<depends name="socket"></depends>
<depends name="sys"></depends>
<depends name="re"></depends>
<depends name="os"></depends>
<depends name="optparse"></depends>
<import_function name="run" module="django.core.servers.basehttp"></import_function>
<import_class name="AdminMediaHandler" module="django.core.servers.basehttp"></import_class>
<import_class name="WSGIServerException" module="django.core.servers.basehttp"></import_class>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="WSGIHandler" module="django.core.handlers.wsgi"></import_class>
<attribute name="autoreload" type="module"><value><![CDATA[<module 'django.utils.autoreload' from '/usr/local/lib/python2.7/dist-packages/django/utils/autoreload.pyc'>]]></value>
</attribute>
<attribute name="socket" type="module"><value><![CDATA[<module 'socket' from '/usr/lib/python2.7/socket.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="naiveip_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x98d8048>]]></value>
</attribute>
<attribute name="DEFAULT_PORT" type="str"><value><![CDATA[8000]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98a14ac: -6/--ipv6>, <Option at 0x98a18ec: --noreload>, <Option at 0x98a13ac: --adminmedia>)]]></value>
</attribute>
<function name="get_handler" args="args" kwargs="options"><doc><![CDATA[
        Serves admin media like old-school (deprecation pending).
        ]]></doc>
<argument name="self"></argument>
</function>
<class name="BaseRunserverCommand"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Starts a lightweight Web server for development.]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[optional port number, or ipaddr:port]]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98a14ac: -6/--ipv6>, <Option at 0x98a18ec: --noreload>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle" args="args" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="addrport" type="str"><value></value>
</argument>
</function>
<function name="get_handler" args="args" kwargs="options"><doc><![CDATA[
        Returns the default WSGI handler for the runner.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="run" args="args" kwargs="options"><doc><![CDATA[
        Runs the server, using the autoreloader if needed
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="inner_run" args="args" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.handlers.wsgi" file="/django/core/handlers/wsgi.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="socket"></depends>
<depends name="logging"></depends>
<depends name="cStringIO"></depends>
<depends name="thread"></depends>
<depends name="pprint"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="Lock" type="builtin_function_or_method" module="thread"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="pformat" module="pprint"></import_function>
<import_function name="set_script_prefix" module="django.core.urlresolvers"></import_function>
<attribute name="datastructures" type="module"><value><![CDATA[<module 'django.utils.datastructures' from '/usr/local/lib/python2.7/dist-packages/django/utils/datastructures.pyc'>]]></value>
</attribute>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.core.signals' from '/usr/local/lib/python2.7/dist-packages/django/core/signals.pyc'>]]></value>
</attribute>
<attribute name="http" type="module"><value><![CDATA[<module 'django.http' from '/usr/local/lib/python2.7/dist-packages/django/http/__init__.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.handlers.base' from '/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.pyc'>]]></value>
</attribute>
<attribute name="socket" type="module"><value><![CDATA[<module 'socket' from '/usr/lib/python2.7/socket.pyc'>]]></value>
</attribute>
<attribute name="STATUS_CODE_TEXT" type="dict"><value><![CDATA[{200: 'OK', 201: 'CREATED', 202: 'ACCEPTED', 203: 'NON-AUTHORITATIVE INFORMATION', 204: 'NO CONTENT', 205: 'RESET CONTENT', 206: 'PARTIAL CONTENT', 400: 'BAD REQUEST', 401: 'UNAUTHORIZED', 402: 'PAYMENT REQUIRED', 403: 'FORBIDDEN', 404: 'NOT FOUND', 405: 'METHOD NOT ALLOWED', 406: 'NOT ACCEPTABLE', 407: 'PROXY AUTHENTICATION REQUIRED', 408: 'REQUEST TIMEOUT', 409: 'CONFLICT', 410: 'GONE', 411: 'LENGTH REQUIRED', 412: 'PRECONDITION FAILED', 413: 'REQUEST ENTITY TOO LARGE', 414: 'REQUEST-URI TOO LONG', 415: 'UNSUPPORTED MEDIA TYPE', 416: 'REQUESTED RANGE NOT SATISFIABLE', 417: 'EXPECTATION FAILED', 100: 'CONTINUE', 101: 'SWITCHING PROTOCOLS', 300: 'MULTIPLE CHOICES', 301: 'MOVED PERMANENTLY', 302: 'FOUND', 303: 'SEE OTHER', 304: 'NOT MODIFIED', 305: 'USE PROXY', 306: 'RESERVED', 307: 'TEMPORARY REDIRECT', 500: 'INTERNAL SERVER ERROR', 501: 'NOT IMPLEMENTED', 502: 'BAD GATEWAY', 503: 'SERVICE UNAVAILABLE', 504: 'GATEWAY TIMEOUT', 505: 'HTTP VERSION NOT SUPPORTED'}]]></value>
</attribute>
<class name="LimitedStream"></class>
<doc><![CDATA[
    LimitedStream wraps another stream in order to not allow reading from it
    past specified amount of bytes.
    ]]></doc>
<function name="read"><doc></doc>
<argument name="self"></argument>
<argument name="size" type="NoneType"><value></value>
</argument>
</function>
<function name="_read_limited"><doc></doc>
<argument name="self"></argument>
<argument name="size" type="NoneType"><value></value>
</argument>
</function>
<function name="readline"><doc></doc>
<argument name="self"></argument>
<argument name="size" type="NoneType"><value></value>
</argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="stream"></argument>
<argument name="limit"></argument>
<argument name="buf_size" type="int"><value><![CDATA[67108864]]></value>
</argument>
</function>
<class name="WSGIRequest"></class>
<doc></doc>
<attribute name="REQUEST" type="property"><value><![CDATA[<property object at 0x989f734>]]></value>
</attribute>
<attribute name="POST" type="property"><value><![CDATA[<property object at 0x989f5a4>]]></value>
</attribute>
<attribute name="FILES" type="property"><value><![CDATA[<property object at 0x989f70c>]]></value>
</attribute>
<attribute name="COOKIES" type="property"><value><![CDATA[<property object at 0x989f6e4>]]></value>
</attribute>
<attribute name="GET" type="property"><value><![CDATA[<property object at 0x989f43c>]]></value>
</attribute>
<function name="_set_get"><doc></doc>
<argument name="self"></argument>
<argument name="get"></argument>
</function>
<function name="_set_cookies"><doc></doc>
<argument name="self"></argument>
<argument name="cookies"></argument>
</function>
<function name="_get_request"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_full_path"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_secure"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="environ"></argument>
</function>
<function name="_get_cookies"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_post"><doc></doc>
<argument name="self"></argument>
<argument name="post"></argument>
</function>
<function name="_get_get"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_files"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_post"><doc></doc>
<argument name="self"></argument>
</function>
<class name="WSGIHandler"></class>
<doc></doc>
<attribute name="initLock" type="lock"><value><![CDATA[<thread.lock object at 0x983c240>]]></value>
</attribute>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="environ"></argument>
<argument name="start_response"></argument>
</function>
<class name="request_class"></class>
<doc></doc>
<attribute name="REQUEST" type="property"><value><![CDATA[<property object at 0x989f734>]]></value>
</attribute>
<attribute name="POST" type="property"><value><![CDATA[<property object at 0x989f5a4>]]></value>
</attribute>
<attribute name="FILES" type="property"><value><![CDATA[<property object at 0x989f70c>]]></value>
</attribute>
<attribute name="COOKIES" type="property"><value><![CDATA[<property object at 0x989f6e4>]]></value>
</attribute>
<attribute name="GET" type="property"><value><![CDATA[<property object at 0x989f43c>]]></value>
</attribute>
<function name="_set_get"><doc></doc>
<argument name="self"></argument>
<argument name="get"></argument>
</function>
<function name="_set_cookies"><doc></doc>
<argument name="self"></argument>
<argument name="cookies"></argument>
</function>
<function name="_get_request"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_full_path"><doc></doc>
<argument name="self"></argument>
</function>
<function name="is_secure"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="environ"></argument>
</function>
<function name="_get_cookies"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_set_post"><doc></doc>
<argument name="self"></argument>
<argument name="post"></argument>
</function>
<function name="_get_get"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_files"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_get_post"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.handlers.base" file="/django/core/handlers/base.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="logging"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<attribute name="signals" type="module"><value><![CDATA[<module 'django.core.signals' from '/usr/local/lib/python2.7/dist-packages/django/core/signals.pyc'>]]></value>
</attribute>
<attribute name="http" type="module"><value><![CDATA[<module 'django.http' from '/usr/local/lib/python2.7/dist-packages/django/http/__init__.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<function name="get_script_name"><doc><![CDATA[
    Returns the equivalent of the HTTP request's SCRIPT_NAME environment
    variable. If Apache mod_rewrite has been used, returns what would have been
    the script name prior to any rewriting (so it's the script name as seen
    from the client's perspective), unless DJANGO_USE_POST_REWRITE is set (to
    anything).
    ]]></doc>
<argument name="environ"></argument>
</function>
<class name="BaseHandler"></class>
<doc></doc>
<attribute name="response_fixes" type="list"><value><![CDATA[[<function fix_location_header at 0x93743ac>, <function conditional_content_removal at 0x93743e4>, <function fix_IE_for_attach at 0x937441c>, <function fix_IE_for_vary at 0x9374454>]]]></value>
</attribute>
<function name="load_middleware"><doc><![CDATA[
        Populate middleware lists from settings.MIDDLEWARE_CLASSES.

        Must be called after the environment is fixed (see __call__).
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get_response"><doc><![CDATA[Returns an HttpResponse object for the given HttpRequest]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="handle_uncaught_exception"><doc><![CDATA[
        Processing for any otherwise uncaught exceptions (those that will
        generate HTTP 500 responses). Can be overridden by subclasses who want
        customised 500 handling.

        Be *very* careful when overriding this because the error could be
        caused by anything, so assuming something like the database is always
        available would be an error.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="resolver"></argument>
<argument name="exc_info"></argument>
</function>
<function name="apply_response_fixes"><doc><![CDATA[
        Applies each of the functions in self.response_fixes to the request and
        response, modifying the response in the process. Returns the new
        response.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.servers.basehttp" version="0.1" file="/django/core/servers/basehttp.pyc"><doc><![CDATA[
BaseHTTPServer that implements the Python WSGI protocol (PEP 333, rev 1.21).

Adapted from wsgiref.simple_server: http://svn.eby-sarna.com/wsgiref/

This is a simple server for use in testing or debugging Django apps. It hasn't
been reviewed for security issues. Don't use it for production use.
]]></doc>
<depends name="urllib"></depends>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="sys"></depends>
<depends name="socket"></depends>
<depends name="os"></depends>
<depends name="BaseHTTPServer"></depends>
<depends name="mimetools"></depends>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_class name="HTTPServer" module="BaseHTTPServer"></import_class>
<import_class name="BaseHTTPRequestHandler" module="BaseHTTPServer"></import_class>
<attribute name="_hop_headers" type="dict"><value><![CDATA[{'trailers': 1, 'transfer-encoding': 1, 'connection': 1, 'proxy-authorization': 1, 'proxy-authenticate': 1, 'te': 1, 'upgrade': 1, 'keep-alive': 1}]]></value>
</attribute>
<attribute name="static" type="module"><value><![CDATA[<module 'django.views.static' from '/usr/local/lib/python2.7/dist-packages/django/views/static.pyc'>]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['WSGIServer', 'WSGIRequestHandler']]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="tspecials" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x985b700>]]></value>
</attribute>
<attribute name="__version__" type="str"><value><![CDATA[0.1]]></value>
</attribute>
<attribute name="software_version" type="str"><value><![CDATA[WSGIServer/0.1 Python/2.7.1+]]></value>
</attribute>
<attribute name="warnings" type="module"><value><![CDATA[<module 'warnings' from '/usr/lib/python2.7/warnings.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="server_version" type="str"><value><![CDATA[WSGIServer/0.1]]></value>
</attribute>
<attribute name="socket" type="module"><value><![CDATA[<module 'socket' from '/usr/lib/python2.7/socket.pyc'>]]></value>
</attribute>
<attribute name="handlers" type="module"><value><![CDATA[<module 'django.contrib.staticfiles.handlers' from '/usr/local/lib/python2.7/dist-packages/django/contrib/staticfiles/handlers.pyc'>]]></value>
</attribute>
<attribute name="sys_version" type="str"><value><![CDATA[Python/2.7.1+]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="_formatparam"><doc><![CDATA[Convenience function to format and return a key=value pair.

    This will quote the value if needed or if quote is true.
    ]]></doc>
<argument name="param"></argument>
<argument name="value" type="NoneType"><value></value>
</argument>
<argument name="quote" type="int"><value><![CDATA[1]]></value>
</argument>
</function>
<function name="run"><doc></doc>
<argument name="addr"></argument>
<argument name="port"></argument>
<argument name="wsgi_handler"></argument>
<argument name="ipv6" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="guess_scheme"><doc><![CDATA[Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'
    ]]></doc>
<argument name="environ"></argument>
</function>
<function name="is_hop_by_hop"><doc><![CDATA[Return true if 'header_name' is an HTTP/1.1 "Hop-by-Hop" header]]></doc>
<argument name="header_name"></argument>
</function>
<class name="WSGIServerException"></class>
<doc></doc>
<class name="ServerHandler"></class>
<doc><![CDATA[Manage the invocation of a WSGI application]]></doc>
<attribute name="headers_sent" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="wsgi_multiprocess" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="result" type="NoneType"><value></value>
</attribute>
<attribute name="wsgi_multithread" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="http_version" type="str"><value><![CDATA[1.0]]></value>
</attribute>
<attribute name="wsgi_version" type="tuple"><value><![CDATA[(1, 0)]]></value>
</attribute>
<attribute name="error_status" type="str"><value><![CDATA[500 INTERNAL SERVER ERROR]]></value>
</attribute>
<attribute name="error_headers" type="list"><value><![CDATA[[('Content-Type', 'text/plain')]]]></value>
</attribute>
<attribute name="os_environ" type="dict"><value><![CDATA[{'USERNAME': 'ice', 'WINDOWID': '90182937', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'LOGNAME': 'ice', 'USER': 'ice', 'GNOME_KEYRING_CONTROL': '/tmp/keyring-ACZvIM', 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/android-sdk-linux_86/tools', 'DISPLAY': ':0.0', 'SSH_AGENT_PID': '1939', 'LANG': 'ru_RU.UTF-8', 'TERM': 'xterm', 'SHELL': '/bin/bash', 'TZ': 'Europe/Moscow', 'XDG_SESSION_COOKIE': '816662bbce2e14e486adaafe00000008-1323192123.585219-1965577340', 'LANGUAGE': 'ru_RU:en', 'SESSION_MANAGER': 'local/phenom:@/tmp/.ICE-unix/1906,unix/phenom:/tmp/.ICE-unix/1906', 'SHLVL': '1', 'MANDATORY_PATH': '/usr/share/gconf/gnome-classic.mandatory.path', 'WINDOWPATH': '7', 'ORBIT_SOCKETDIR': '/tmp/orbit-ice', 'HOME': '/home/ice', 'GDM_KEYBOARD_LAYOUT': 'us', 'SSH_AUTH_SOCK': '/tmp/keyring-ACZvIM/ssh', 'GDMSESSION': 'gnome-classic', 'XAUTHORITY': '/var/run/gdm/auth-for-ice-dVTNux/database', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-gnome-classic:/etc/xdg', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-oeCmueKkYQ,guid=980c742f8ccaa81117bb19a90000001d', '_': './manage.py', 'DEFAULTS_PATH': '/usr/share/gconf/gnome-classic.default.path', 'DESKTOP_SESSION': 'gnome-classic', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'GNOME_KEYRING_PID': '1887', 'UBUNTU_MENUPROXY': 'libappmenu.so', 'OLDPWD': '/home/ice', 'GDM_LANG': 'ru_RU', 'GTK_MODULES': 'canberra-gtk-module', 'XDG_DATA_DIRS': '/usr/share/gnome-classic:/usr/share/gnome:/usr/local/share/:/usr/share/', 'PWD': '/home/ice/kengine/ipython_ru/project', 'DJANGO_SETTINGS_MODULE': 'project.settings', 'COLORTERM': 'gnome-terminal', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:'}]]></value>
</attribute>
<attribute name="status" type="NoneType"><value></value>
</attribute>
<attribute name="server_software" type="str"><value><![CDATA[WSGIServer/0.1 Python/2.7.1+]]></value>
</attribute>
<attribute name="wsgi_run_once" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="traceback_limit" type="NoneType"><value></value>
</attribute>
<attribute name="origin_server" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="bytes_sent" type="int"><value></value>
</attribute>
<attribute name="headers" type="NoneType"><value></value>
</attribute>
<function name="sendfile"><doc><![CDATA[Platform-specific file transmission

        Override this method in subclasses to support platform-specific
        file transmission.  It is only called if the application's
        return iterable ('self.result') is an instance of
        'self.wsgi_file_wrapper'.

        This method should return a true value if it was able to actually
        transmit the wrapped file-like object using a platform-specific
        approach.  It should return a false value if normal iteration
        should be used instead.  An exception can be raised to indicate
        that transmission was attempted, but failed.

        NOTE: this method should call 'self.send_headers()' if
        'self.headers_sent' is false and it is going to attempt direct
        transmission of the file1.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="start_response"><doc><![CDATA['start_response()' callable as specified by PEP 333]]></doc>
<argument name="self"></argument>
<argument name="status"></argument>
<argument name="headers"></argument>
<argument name="exc_info" type="NoneType"><value></value>
</argument>
</function>
<function name="get_stdin"><doc></doc>
<argument name="self"></argument>
</function>
<function name="set_content_length"><doc><![CDATA[Compute Content-Length or switch to chunked encoding if possible]]></doc>
<argument name="self"></argument>
</function>
<function name="send_preamble"><doc><![CDATA[Transmit version/status/date/server, via self._write()]]></doc>
<argument name="self"></argument>
</function>
<function name="close"><doc></doc>
<argument name="self"></argument>
</function>
<function name="handle_error"><doc><![CDATA[Log current error, and send error output to client if possible]]></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="stdin"></argument>
<argument name="stdout"></argument>
<argument name="stderr"></argument>
<argument name="environ"></argument>
<argument name="multithread" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="multiprocess" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="finish_response"><doc><![CDATA[
        Send any iterable data, then close self and the iterable

        Subclasses intended for use in asynchronous servers will want to
        redefine this method, such that it sets up callbacks in the event loop
        to iterate over the data, and to call 'self.close()' once the response
        is finished.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="write"><doc><![CDATA['write()' callable as specified by PEP 333]]></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="setup_environ"><doc><![CDATA[Set up the environment for one request]]></doc>
<argument name="self"></argument>
</function>
<function name="run"><doc><![CDATA[Invoke the application]]></doc>
<argument name="self"></argument>
<argument name="application"></argument>
</function>
<function name="log_exception"><doc><![CDATA[Log the 'exc_info' tuple in the server log

        Subclasses may override to retarget the output or change its format.
        ]]></doc>
<argument name="self"></argument>
<argument name="exc_info"></argument>
</function>
<function name="client_is_modern"><doc><![CDATA[True if client can accept status and headers]]></doc>
<argument name="self"></argument>
</function>
<function name="_flush"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_write"><doc></doc>
<argument name="self"></argument>
<argument name="data"></argument>
</function>
<function name="error_output"><doc></doc>
<argument name="self"></argument>
<argument name="environ"></argument>
<argument name="start_response"></argument>
</function>
<function name="get_scheme"><doc><![CDATA[Return the URL scheme being used]]></doc>
<argument name="self"></argument>
</function>
<function name="get_stderr"><doc></doc>
<argument name="self"></argument>
</function>
<function name="send_headers"><doc><![CDATA[Transmit headers to the client, via self._write()]]></doc>
<argument name="self"></argument>
</function>
<function name="cleanup_headers"><doc><![CDATA[Make any necessary header changes or defaults

        Subclasses can extend this to add other defaults.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="finish_content"><doc><![CDATA[Ensure headers and content have both been sent]]></doc>
<argument name="self"></argument>
</function>
<function name="result_is_file"><doc><![CDATA[True if 'self.result' is an instance of 'self.wsgi_file_wrapper']]></doc>
<argument name="self"></argument>
</function>
<function name="add_cgi_vars"><doc></doc>
<argument name="self"></argument>
</function>
<class name="wsgi_file_wrapper"></class>
<doc><![CDATA[Wrapper to convert file-like objects to iterables]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="filelike"></argument>
<argument name="blksize" type="int"><value><![CDATA[8192]]></value>
</argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<class name="headers_class"></class>
<doc><![CDATA[Manage a collection of HTTP response headers]]></doc>
<function name="__getitem__"><doc><![CDATA[Get the first header value for 'name'

        Return None if the header is missing instead of raising an exception.

        Note that if the header appeared multiple times, the first exactly which
        occurrance gets returned is undefined.  Use getall() to get all
        the values matching a header field name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="get_all"><doc><![CDATA[Return a list of all the values for the named field.

        These will be sorted in the order they appeared in the original header
        list or were added to this instance, and may contain duplicates.  Any
        fields deleted and re-inserted are always appended to the header list.
        If no fields exist with the given name, returns an empty list.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="keys"><doc><![CDATA[Return a list of all the header field names.

        These will be sorted in the order they appeared in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc><![CDATA[str() returns the formatted headers, complete with end line,
        suitable for direct HTTP transmission.]]></doc>
<argument name="self"></argument>
</function>
<function name="add_header" kwargs="_params"><doc><![CDATA[Extended header setting.

        _name is the header field to add.  keyword arguments can be used to set
        additional parameters for the header field, with underscores converted
        to dashes.  Normally the parameter will be added as key="value" unless
        value is None, in which case only the key will be added.

        Example:

        h.add_header('content-disposition', 'attachment', filename='bud.gif')

        Note that unlike the corresponding 'email.Message' method, this does
        *not* handle '(charset, language, value)' tuples: all values must be
        strings or None.
        ]]></doc>
<argument name="self"></argument>
<argument name="_name"></argument>
<argument name="_value"></argument>
</function>
<function name="__setitem__"><doc><![CDATA[Set the value of a header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="val"></argument>
</function>
<function name="has_key"><doc><![CDATA[Return true if the message contains the header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="headers"></argument>
</function>
<function name="__delitem__"><doc><![CDATA[Delete all occurrences of a header, if present.

        Does *not* raise an exception if the header is missing.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="setdefault"><doc><![CDATA[Return first matching header value for 'name', or 'value'

        If there is no header named 'name', add a new header with name 'name'
        and value 'value'.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<function name="__contains__"><doc><![CDATA[Return true if the message contains the header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="items"><doc><![CDATA[Get all the header fields and values.

        These will be sorted in the order they were in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get"><doc><![CDATA[Get the first header value for 'name', or return 'default']]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="values"><doc><![CDATA[Return a list of all header values.

        These will be sorted in the order they appeared in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__len__"><doc><![CDATA[Return the total number of headers, including duplicates.]]></doc>
<argument name="self"></argument>
</function>
<class name="Headers"></class>
<doc><![CDATA[Manage a collection of HTTP response headers]]></doc>
<function name="__getitem__"><doc><![CDATA[Get the first header value for 'name'

        Return None if the header is missing instead of raising an exception.

        Note that if the header appeared multiple times, the first exactly which
        occurrance gets returned is undefined.  Use getall() to get all
        the values matching a header field name.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="get_all"><doc><![CDATA[Return a list of all the values for the named field.

        These will be sorted in the order they appeared in the original header
        list or were added to this instance, and may contain duplicates.  Any
        fields deleted and re-inserted are always appended to the header list.
        If no fields exist with the given name, returns an empty list.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="keys"><doc><![CDATA[Return a list of all the header field names.

        These will be sorted in the order they appeared in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__str__"><doc><![CDATA[str() returns the formatted headers, complete with end line,
        suitable for direct HTTP transmission.]]></doc>
<argument name="self"></argument>
</function>
<function name="add_header" kwargs="_params"><doc><![CDATA[Extended header setting.

        _name is the header field to add.  keyword arguments can be used to set
        additional parameters for the header field, with underscores converted
        to dashes.  Normally the parameter will be added as key="value" unless
        value is None, in which case only the key will be added.

        Example:

        h.add_header('content-disposition', 'attachment', filename='bud.gif')

        Note that unlike the corresponding 'email.Message' method, this does
        *not* handle '(charset, language, value)' tuples: all values must be
        strings or None.
        ]]></doc>
<argument name="self"></argument>
<argument name="_name"></argument>
<argument name="_value"></argument>
</function>
<function name="__setitem__"><doc><![CDATA[Set the value of a header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="val"></argument>
</function>
<function name="has_key"><doc><![CDATA[Return true if the message contains the header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="headers"></argument>
</function>
<function name="__delitem__"><doc><![CDATA[Delete all occurrences of a header, if present.

        Does *not* raise an exception if the header is missing.
        ]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="setdefault"><doc><![CDATA[Return first matching header value for 'name', or 'value'

        If there is no header named 'name', add a new header with name 'name'
        and value 'value'.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="value"></argument>
</function>
<function name="__contains__"><doc><![CDATA[Return true if the message contains the header.]]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
</function>
<function name="items"><doc><![CDATA[Get all the header fields and values.

        These will be sorted in the order they were in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="get"><doc><![CDATA[Get the first header value for 'name', or return 'default']]></doc>
<argument name="self"></argument>
<argument name="name"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="values"><doc><![CDATA[Return a list of all header values.

        These will be sorted in the order they appeared in the original header
        list, or were added to this instance, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        ]]></doc>
<argument name="self"></argument>
</function>
<function name="__repr__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__len__"><doc><![CDATA[Return the total number of headers, including duplicates.]]></doc>
<argument name="self"></argument>
</function>
<class name="FileWrapper"></class>
<doc><![CDATA[Wrapper to convert file-like objects to iterables]]></doc>
<function name="__getitem__"><doc></doc>
<argument name="self"></argument>
<argument name="key"></argument>
</function>
<function name="__iter__"><doc></doc>
<argument name="self"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="filelike"></argument>
<argument name="blksize" type="int"><value><![CDATA[8192]]></value>
</argument>
</function>
<function name="next"><doc></doc>
<argument name="self"></argument>
</function>
<class name="AdminMediaHandler"></class>
<doc><![CDATA[
    WSGI middleware that intercepts calls to the admin media directory, as
    defined by the ADMIN_MEDIA_PREFIX setting, and serves those images.
    Use this ONLY LOCALLY, for development! This hasn't been tested for
    security and is not super efficient.

    This is pending for deprecation since 1.3.
    ]]></doc>
<function name="get_base_dir"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_base_url"><doc></doc>
<argument name="self"></argument>
</function>
<function name="serve"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="file_path"><doc><![CDATA[
        Returns the path to the media file on disk for the given URL.

        The passed URL is assumed to begin with ``self.base_url``.  If the
        resulting file path is outside the media directory, then a ValueError
        is raised.
        ]]></doc>
<argument name="self"></argument>
<argument name="url"></argument>
</function>
<function name="_should_handle"><doc><![CDATA[
        Checks if the path should be handled. Ignores the path if:

        * the host is provided as part of the base_url
        * the request's path isn't under the base path
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<class name="WSGIRequestHandler"></class>
<doc></doc>
<attribute name="server_version" type="str"><value><![CDATA[WSGIServer/0.1]]></value>
</attribute>
<function name="get_stderr"><doc></doc>
<argument name="self"></argument>
</function>
<function name="handle"><doc><![CDATA[Handle a single HTTP request]]></doc>
<argument name="self"></argument>
</function>
<function name="get_environ"><doc></doc>
<argument name="self"></argument>
</function>
<function name="log_message" args="args"><doc></doc>
<argument name="self"></argument>
<argument name="format"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<class name="WSGIServer"></class>
<doc><![CDATA[BaseHTTPServer that implements the Python WSGI protocol]]></doc>
<attribute name="application" type="NoneType"><value></value>
</attribute>
<function name="setup_environ"><doc></doc>
<argument name="self"></argument>
</function>
<function name="server_bind"><doc><![CDATA[Override server_bind to store the server name.]]></doc>
<argument name="self"></argument>
</function>
<function name="set_app"><doc></doc>
<argument name="self"></argument>
<argument name="application"></argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_app"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.contrib.staticfiles.handlers" file="/django/contrib/staticfiles/handlers.pyc"><doc></doc>
<depends name="urllib"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="serve" module="django.contrib.staticfiles.views"></import_function>
<import_function name="urlparse" module="urlparse"></import_function>
<import_class name="WSGIHandler" module="django.core.handlers.wsgi"></import_class>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.contrib.staticfiles.utils' from '/usr/local/lib/python2.7/dist-packages/django/contrib/staticfiles/utils.pyc'>]]></value>
</attribute>
<class name="StaticFilesHandler"></class>
<doc><![CDATA[
    WSGI middleware that intercepts calls to the static files directory, as
    defined by the STATIC_URL setting, and serves those files.
    ]]></doc>
<function name="get_base_url"><doc></doc>
<argument name="self"></argument>
</function>
<function name="serve"><doc><![CDATA[
        Actually serves the request path.
        ]]></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="file_path"><doc><![CDATA[
        Returns the relative path to the media file on disk for the given URL.
        ]]></doc>
<argument name="self"></argument>
<argument name="url"></argument>
</function>
<function name="__call__"><doc></doc>
<argument name="self"></argument>
<argument name="environ"></argument>
<argument name="start_response"></argument>
</function>
<function name="get_response"><doc></doc>
<argument name="self"></argument>
<argument name="request"></argument>
</function>
<function name="get_base_dir"><doc></doc>
<argument name="self"></argument>
</function>
<function name="_should_handle"><doc><![CDATA[
        Checks if the path should be handled. Ignores the path if:

        * the host is provided as part of the base_url
        * the request's path isn't under the media path (or equal)
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
</function>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="application"></argument>
<argument name="base_dir" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.staticfiles.views" file="/django/contrib/staticfiles/views.pyc"><doc><![CDATA[
Views and functions for serving static files. These are only to be used during
development, and SHOULD NOT be used in a production setting.

]]></doc>
<depends name="posixpath"></depends>
<depends name="urllib"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<attribute name="posixpath" type="module"><value><![CDATA[<module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'>]]></value>
</attribute>
<attribute name="finders" type="module"><value><![CDATA[<module 'django.contrib.staticfiles.finders' from '/usr/local/lib/python2.7/dist-packages/django/contrib/staticfiles/finders.pyc'>]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="static" type="module"><value><![CDATA[<module 'django.views.static' from '/usr/local/lib/python2.7/dist-packages/django/views/static.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="serve" kwargs="kwargs"><doc><![CDATA[
    Serve static files below a given point in the directory structure or
    from locations inferred from the staticfiles finders.

    To use, put a URL pattern such as::

        (r'^(?P<path>.*)$', 'django.contrib.staticfiles.views.serve')

    in your URLconf.

    It uses the django.views.static view to serve the found files.
    ]]></doc>
<argument name="request"></argument>
<argument name="path"></argument>
<argument name="document_root" type="NoneType"><value></value>
</argument>
<argument name="insecure" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.contrib.staticfiles.finders" file="/django/contrib/staticfiles/finders.pyc"><doc></doc>
<depends name="os"></depends>
<import_attribute name="default_storage" type="DefaultStorage" module="django.core.files.storage"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="_finders" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="FileSystemStorage" module="django.core.files.storage"></import_class>
<import_class name="Storage" module="django.core.files.storage"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="AppStaticStorage" module="django.contrib.staticfiles.storage"></import_class>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.contrib.staticfiles.utils' from '/usr/local/lib/python2.7/dist-packages/django/contrib/staticfiles/utils.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="_get_finder"><doc><![CDATA[
    Imports the staticfiles finder class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
<argument name="import_path"></argument>
</function>
<function name="find"><doc><![CDATA[
    Find a static file with the given path using all enabled finders.

    If ``all`` is ``False`` (default), return the first matching
    absolute path (or ``None`` if no match). Otherwise return a list.
    ]]></doc>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_finder" args="args"><doc><![CDATA[
    Imports the staticfiles finder class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
</function>
<function name="get_finders"><doc></doc>
</function>
<class name="BaseStorageFinder"></class>
<doc><![CDATA[
    A base static files finder to be used to extended
    with an own storage class.
    ]]></doc>
<attribute name="storage" type="NoneType"><value></value>
</attribute>
<function name="list"><doc><![CDATA[
        List all files of the storage.
        ]]></doc>
<argument name="self"></argument>
<argument name="ignore_patterns"></argument>
</function>
<function name="find"><doc><![CDATA[
        Looks for files in the default file storage, if it's local.
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="storage" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseFinder"></class>
<doc><![CDATA[
    A base file finder to be used for custom staticfiles finder classes.
    ]]></doc>
<function name="list"><doc><![CDATA[
        Given an optional list of paths to ignore, this should return
        a two item iterable consisting of the relative path and storage
        instance.
        ]]></doc>
<argument name="self"></argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
</function>
<function name="find"><doc><![CDATA[
        Given a relative file path this ought to find an
        absolute file path.

        If the ``all`` parameter is ``False`` (default) only
        the first found file path will be returned; if set
        to ``True`` a list of all found files paths is returned.
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="FileSystemFinder"></class>
<doc><![CDATA[
    A static files finder that uses the ``STATICFILES_DIRS`` setting
    to locate files.
    ]]></doc>
<function name="find_location"><doc><![CDATA[
        Finds a requested static file in a location, returning the found
        absolute path (or ``None`` if no match).
        ]]></doc>
<argument name="self"></argument>
<argument name="root"></argument>
<argument name="path"></argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
</function>
<function name="list"><doc><![CDATA[
        List all files in all locations.
        ]]></doc>
<argument name="self"></argument>
<argument name="ignore_patterns"></argument>
</function>
<function name="find"><doc><![CDATA[
        Looks for files in the extra locations
        as defined in ``STATICFILES_DIRS``.
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="apps" type="NoneType"><value></value>
</argument>
</function>
<class name="AppDirectoriesFinder"></class>
<doc><![CDATA[
    A static files finder that looks in the directory of each app as
    specified in the source_dir attribute of the given storage class.
    ]]></doc>
<import_class name="storage_class" module="django.contrib.staticfiles.storage"></import_class>
<function name="find_in_app"><doc><![CDATA[
        Find a requested static file in an app's static locations.
        ]]></doc>
<argument name="self"></argument>
<argument name="app"></argument>
<argument name="path"></argument>
</function>
<function name="list"><doc><![CDATA[
        List all files in all app storages.
        ]]></doc>
<argument name="self"></argument>
<argument name="ignore_patterns"></argument>
</function>
<function name="find"><doc><![CDATA[
        Looks for files in the app directories.
        ]]></doc>
<argument name="self"></argument>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="apps" type="NoneType"><value></value>
</argument>
</function>
<class name="DefaultStorageFinder"></class>
<doc><![CDATA[
    A static files finder that uses the default storage backend.
    ]]></doc>
<import_attribute name="storage" type="DefaultStorage" module="django.core.files.storage"></import_attribute>
</package>
<package name="django.contrib.staticfiles.storage" file="/django/contrib/staticfiles/storage.pyc"><doc></doc>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="FileSystemStorage" module="django.core.files.storage"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.contrib.staticfiles.utils' from '/usr/local/lib/python2.7/dist-packages/django/contrib/staticfiles/utils.pyc'>]]></value>
</attribute>
<class name="StaticFilesStorage"></class>
<doc><![CDATA[
    Standard file system storage for static files.

    The defaults for ``location`` and ``base_url`` are
    ``STATIC_ROOT`` and ``STATIC_URL``.
    ]]></doc>
<function name="__init__" args="args" kwargs="kwargs"><doc></doc>
<argument name="self"></argument>
<argument name="location" type="NoneType"><value></value>
</argument>
<argument name="base_url" type="NoneType"><value></value>
</argument>
</function>
<class name="AppStaticStorage"></class>
<doc><![CDATA[
    A file system storage backend that takes an app module and works
    for the ``static`` directory of it.
    ]]></doc>
<attribute name="source_dir" type="str"><value><![CDATA[static]]></value>
</attribute>
<attribute name="prefix" type="NoneType"><value></value>
</attribute>
<function name="__init__" args="args" kwargs="kwargs"><doc><![CDATA[
        Returns a static file storage if available in the given app.
        ]]></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.contrib.staticfiles.utils" file="/django/contrib/staticfiles/utils.pyc"><doc></doc>
<depends name="fnmatch"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="fnmatch" type="module"><value><![CDATA[<module 'fnmatch' from '/usr/lib/python2.7/fnmatch.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="get_files"><doc><![CDATA[
    Recursively walk the storage directories yielding the paths
    of all files that should be copied.
    ]]></doc>
<argument name="storage"></argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
<argument name="location" type="str"><value></value>
</argument>
</function>
<function name="is_ignored"><doc><![CDATA[
    Return True or False depending on whether the ``path`` should be
    ignored (if it matches any pattern in ``ignore_patterns``).
    ]]></doc>
<argument name="path"></argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
</function>
<function name="check_settings"><doc><![CDATA[
    Checks if the staticfiles settings have sane values.

    ]]></doc>
</function>
</package>
<package name="django.views.static" file="/django/views/static.pyc"><doc><![CDATA[
Views and functions for serving static files. These are only to be used
during development, and SHOULD NOT be used in a production setting.
]]></doc>
<depends name="posixpath"></depends>
<depends name="urllib"></depends>
<depends name="re"></depends>
<depends name="mimetypes"></depends>
<depends name="os"></depends>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="parse_http_date" module="django.utils.http"></import_function>
<import_class name="HttpResponseNotModified" module="django.http"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<attribute name="DEFAULT_DIRECTORY_INDEX_TEMPLATE" type="str"><value><![CDATA[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="en-us" />
    <meta name="robots" content="NONE,NOARCHIVE" />
    <title>Index of {{ directory }}</title>
  </head>
  <body>
    <h1>Index of {{ directory }}</h1>
    <ul>
      {% ifnotequal directory "/" %}
      <li><a href="../">../</a></li>
      {% endifnotequal %}
      {% for f in file_list %}
      <li><a href="{{ f|urlencode }}">{{ f }}</a></li>
      {% endfor %}
    </ul>
  </body>
</html>
]]></value>
</attribute>
<attribute name="posixpath" type="module"><value><![CDATA[<module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'>]]></value>
</attribute>
<attribute name="urllib" type="module"><value><![CDATA[<module 'urllib' from '/usr/lib/python2.7/urllib.pyc'>]]></value>
</attribute>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="mimetypes" type="module"><value><![CDATA[<module 'mimetypes' from '/usr/lib/python2.7/mimetypes.pyc'>]]></value>
</attribute>
<attribute name="loader" type="module"><value><![CDATA[<module 'django.template.loader' from '/usr/local/lib/python2.7/dist-packages/django/template/loader.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="was_modified_since"><doc><![CDATA[
    Was something modified since the user last downloaded it?

    header
      This is the value of the If-Modified-Since header.  If this is None,
      I'll just return True.

    mtime
      This is the modification time of the item we're talking about.

    size
      This is the size of the item we're talking about.
    ]]></doc>
<argument name="header" type="NoneType"><value></value>
</argument>
<argument name="mtime" type="int"><value></value>
</argument>
<argument name="size" type="int"><value></value>
</argument>
</function>
<function name="directory_index"><doc></doc>
<argument name="path"></argument>
<argument name="fullpath"></argument>
</function>
<function name="serve"><doc><![CDATA[
    Serve static files below a given point in the directory structure.

    To use, put a URL pattern such as::

        (r'^(?P<path>.*)$', 'django.views.static.serve', {'document_root' : '/path/to/my/files/'})

    in your URLconf. You must provide the ``document_root`` param. You may
    also set ``show_indexes`` to ``True`` if you'd like to serve a basic index
    of the directory.  This index view will use the template hardcoded below,
    but if you'd like to override it, you can create a template called
    ``static/directory_index.html``.
    ]]></doc>
<argument name="request"></argument>
<argument name="path"></argument>
<argument name="document_root" type="NoneType"><value></value>
</argument>
<argument name="show_indexes" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.core.management.commands.inspectdb" file="/django/core/management/commands/inspectdb.pyc"><doc></doc>
<depends name="keyword"></depends>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="keyword" type="module"><value><![CDATA[<module 'keyword' from '/usr/lib/python2.7/keyword.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="db_module" type="str"><value><![CDATA[django.db]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Introspects the database tables in the given database and outputs a Django model module.]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98ed6cc: --database>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="get_field_type"><doc><![CDATA[
        Given the database connection, the table name, and the cursor row
        description, this routine will return the given field type name, as
        well as any additional keyword parameters and notes for the field.
        ]]></doc>
<argument name="self"></argument>
<argument name="connection"></argument>
<argument name="table_name"></argument>
<argument name="row"></argument>
</function>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
<function name="get_meta"><doc><![CDATA[
        Return a sequence comprising the lines of code necessary
        to construct the inner Meta class for the model corresponding
        to the given database table name.
        ]]></doc>
<argument name="self"></argument>
<argument name="table_name"></argument>
</function>
<function name="handle_inspection"><doc></doc>
<argument name="self"></argument>
<argument name="options"></argument>
</function>
</package>
<package name="django.core.management.commands.cleanup" file="/django/core/management/commands/cleanup.pyc"><doc></doc>
<depends name="datetime"></depends>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<attribute name="datetime" type="module"><value><![CDATA[<module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.so'>]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Can be run as a cronjob or directly to clean out old data from the database (only expired sessions at the moment).]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.sql" file="/django/core/management/commands/sql.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_create" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the CREATE TABLE SQL statements for the given app name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98f120c: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.sqlindexes" file="/django/core/management/commands/sqlindexes.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_indexes" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="output_transaction" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Prints the CREATE INDEX SQL statements for the given model module name(s).]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98f19ac: --database>)]]></value>
</attribute>
<function name="handle_app" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app"></argument>
</function>
</package>
<package name="django.core.management.commands.makemessages" file="/django/core/management/commands/makemessages.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="glob"></depends>
<depends name="sys"></depends>
<depends name="fnmatch"></depends>
<depends name="os"></depends>
<depends name="itertools"></depends>
<depends name="subprocess"></depends>
<depends name="optparse"></depends>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_class name="dropwhile" module="itertools"></import_class>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="Popen" module="subprocess"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="re" type="module"><value><![CDATA[<module 're' from '/usr/lib/python2.7/re.pyc'>]]></value>
</attribute>
<attribute name="PIPE" type="int"><value><![CDATA[-1]]></value>
</attribute>
<attribute name="plural_forms_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x992bb98>]]></value>
</attribute>
<attribute name="glob" type="module"><value><![CDATA[<module 'glob' from '/usr/lib/python2.7/glob.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="pythonize_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x98f92e0>]]></value>
</attribute>
<attribute name="fnmatch" type="module"><value><![CDATA[<module 'fnmatch' from '/usr/lib/python2.7/fnmatch.pyc'>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="walk"><doc><![CDATA[
    A version of os.walk that can follow symlinks for Python < 2.6
    ]]></doc>
<argument name="root"></argument>
<argument name="topdown" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="onerror" type="NoneType"><value></value>
</argument>
<argument name="followlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="make_messages"><doc><![CDATA[
    Uses the locale directory from the Django SVN tree or an application/
    project to process all
    ]]></doc>
<argument name="locale" type="NoneType"><value></value>
</argument>
<argument name="domain" type="str"><value><![CDATA[django]]></value>
</argument>
<argument name="verbosity" type="str"><value><![CDATA[1]]></value>
</argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="extensions" type="NoneType"><value></value>
</argument>
<argument name="symlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
<argument name="no_wrap" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="no_obsolete" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="is_ignored"><doc><![CDATA[
    Helper function to check if the given path should be ignored or not.
    ]]></doc>
<argument name="path"></argument>
<argument name="ignore_patterns"></argument>
</function>
<function name="handle_extensions"><doc><![CDATA[
    organizes multiple extensions that are separated with commas or passed by
    using --extension/-e multiple times.

    for example: running 'django-admin makemessages -e js,txt -e xhtml -a'
    would result in a extension list: ['.js', '.txt', '.xhtml']

    >>> handle_extensions(['.html', 'html,js,py,py,py,.py', 'py,.py'])
    ['.html', '.js']
    >>> handle_extensions(['.html, txt,.tpl'])
    ['.html', '.tpl', '.txt']
    ]]></doc>
<argument name="extensions" type="tuple"><value><![CDATA[('html',)]]></value>
</argument>
</function>
<function name="copy_plural_forms"><doc><![CDATA[
    Copies plural forms header contents from a Django catalog of locale to
    the msgs string, inserting it at the right place. msgs should be the
    contents of a newly created .po file.
    ]]></doc>
<argument name="msgs"></argument>
<argument name="locale"></argument>
<argument name="domain"></argument>
<argument name="verbosity"></argument>
</function>
<function name="_popen"><doc><![CDATA[
    Friendly wrapper around Popen for Windows
    ]]></doc>
<argument name="cmd"></argument>
</function>
<function name="find_files"><doc><![CDATA[
    Helper function to get all files in the given root.
    ]]></doc>
<argument name="root"></argument>
<argument name="ignore_patterns"></argument>
<argument name="verbosity"></argument>
<argument name="symlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="Command"></class>
<doc></doc>
<attribute name="can_import_settings" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Runs over the entire source tree of the current directory and pulls out all strings marked for translation. It creates (or updates) a message file in the conf/locale (in the django tree) or locale (for projects and applications) directory.

You must run this command with one of either the --locale or --all options.]]></value>
</attribute>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x98f794c: -l/--locale>, <Option at 0x98f79ac: -d/--domain>, <Option at 0x98f7a2c: -a/--all>, <Option at 0x98f798c: -e/--extension>, <Option at 0x98f79cc: -s/--symlinks>, <Option at 0x98f7f6c: -i/--ignore>, <Option at 0x98f7f4c: --no-default-ignore>, <Option at 0x98f7eac: --no-wrap>, <Option at 0x98f7f8c: --no-obsolete>)]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle_noargs" args="args" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.testserver" file="/django/core/management/commands/testserver.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x990dfac: --noinput>, <Option at 0x990dfec: --addrport>, <Option at 0x991106c: -6/--ipv6>)]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Runs a development server with data from the given fixture(s).]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[fixture ...]]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<function name="handle" args="fixture_labels" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.syncdb" file="/django/core/management/commands/syncdb.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="custom_sql_for_model" module="django.core.management.sql"></import_function>
<import_function name="emit_post_sync_signal" module="django.core.management.sql"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="transaction" type="module"><value><![CDATA[<module 'django.db.transaction' from '/usr/local/lib/python2.7/dist-packages/django/db/transaction.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="models" type="module"><value><![CDATA[<module 'django.db.models' from '/usr/local/lib/python2.7/dist-packages/django/db/models/__init__.pyc'>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
<doc></doc>
<attribute name="option_list" type="tuple"><value><![CDATA[(<Option at 0xb6fd4eec: -v/--verbosity>, <Option at 0xb6ebd40c: --settings>, <Option at 0xb6ebd3ac: --pythonpath>, <Option at 0xb6ebd44c: --traceback>, <Option at 0x9911b0c: --noinput>, <Option at 0x9911b8c: --database>)]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Create the database tables for all apps in INSTALLED_APPS whose tables haven't already been created.]]></value>
</attribute>
<function name="handle_noargs" kwargs="options"><doc></doc>
<argument name="self"></argument>
</function>
</package>
<package name="django.core.management.commands.startapp" file="/django/core/management/commands/startapp.pyc"><doc></doc>
<depends name="os"></depends>
<import_function name="copy_helper" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<class name="ProjectCommand"></class>
<doc></doc>
<attribute name="help" type="str"><value><![CDATA[Creates a Django app directory structure for the given app name in this project's directory.]]></value>
</attribute>
<function name="__init__"><doc></doc>
<argument name="self"></argument>
<argument name="project_directory"></argument>
</function>
<function name="handle_label" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app_name"></argument>
</function>
<class name="Command"></class>
<doc></doc>
<attribute name="can_import_settings" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="help" type="str"><value><![CDATA[Creates a Django app directory structure for the given app name in the current directory.]]></value>
</attribute>
<attribute name="requires_model_validation" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="args" type="str"><value><![CDATA[[appname]]]></value>
</attribute>
<attribute name="label" type="str"><value><![CDATA[application name]]></value>
</attribute>
<function name="handle_label" kwargs="options"><doc></doc>
<argument name="self"></argument>
<argument name="app_name"></argument>
<argument name="directory" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.management.color" file="/django/core/management/color.pyc"><doc><![CDATA[
Sets up the terminal color scheme.
]]></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<attribute name="termcolors" type="module"><value><![CDATA[<module 'django.utils.termcolors' from '/usr/local/lib/python2.7/dist-packages/django/utils/termcolors.pyc'>]]></value>
</attribute>
<attribute name="sys" type="module"><value><![CDATA[<module 'sys' (built-in)>]]></value>
</attribute>
<attribute name="os" type="module"><value><![CDATA[<module 'os' from '/usr/lib/python2.7/os.pyc'>]]></value>
</attribute>
<function name="supports_color"><doc><![CDATA[
    Returns True if the running system's terminal supports color, and False
    otherwise.
    ]]></doc>
</function>
<function name="color_style"><doc><![CDATA[Returns a Style object with the Django color scheme.]]></doc>
</function>
<function name="no_style"><doc><![CDATA[Returns a Style object that has no colors.]]></doc>
</function>
</package>
<package name="django.core.files" file="/django/core/files/__init__.pyc"><doc></doc>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="uploadedfile" type="module"><value><![CDATA[<module 'django.core.files.uploadedfile' from '/usr/local/lib/python2.7/dist-packages/django/core/files/uploadedfile.pyc'>]]></value>
</attribute>
<attribute name="temp" type="module"><value><![CDATA[<module 'django.core.files.temp' from '/usr/local/lib/python2.7/dist-packages/django/core/files/temp.pyc'>]]></value>
</attribute>
<attribute name="locks" type="module"><value><![CDATA[<module 'django.core.files.locks' from '/usr/local/lib/python2.7/dist-packages/django/core/files/locks.pyc'>]]></value>
</attribute>
<attribute name="move" type="module"><value><![CDATA[<module 'django.core.files.move' from '/usr/local/lib/python2.7/dist-packages/django/core/files/move.pyc'>]]></value>
</attribute>
<attribute name="storage" type="module"><value><![CDATA[<module 'django.core.files.storage' from '/usr/local/lib/python2.7/dist-packages/django/core/files/storage.pyc'>]]></value>
</attribute>
<attribute name="uploadhandler" type="module"><value><![CDATA[<module 'django.core.files.uploadhandler' from '/usr/local/lib/python2.7/dist-packages/django/core/files/uploadhandler.pyc'>]]></value>
</attribute>
<attribute name="base" type="module"><value><![CDATA[<module 'django.core.files.base' from '/usr/local/lib/python2.7/dist-packages/django/core/files/base.pyc'>]]></value>
</attribute>
<attribute name="images" type="module"><value><![CDATA[<module 'django.core.files.images' from '/usr/local/lib/python2.7/dist-packages/django/core/files/images.pyc'>]]></value>
</attribute>
<attribute name="utils" type="module"><value><![CDATA[<module 'django.core.files.utils' from '/usr/local/lib/python2.7/dist-packages/django/core/files/utils.pyc'>]]></value>
</attribute>
</package>
</dox:ipython_ru>
