<?xml version="1.0" encoding="utf-8"?><dox:ipython_ru xsi:schemaLocation="dox.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dox="http://ipython.ru/dox/v1"><package name="django" version="(1, 3, 1, 'final', 0)" file="/django/__init__.pyc"><doc></doc>
<attribute name="VERSION" type="tuple"><value><![CDATA[(1, 3, 1, 'final', 0)]]></value>
</attribute>
<function name="get_version"><doc></doc>
</function>
</package>
<package name="django.utils" file="/django/utils/__init__.pyc"><doc></doc>
</package>
<package name="django.utils.timesince" file="/django/utils/timesince.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="time"></depends>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_class name="LocalTimezone" module="django.utils.tzinfo"></import_class>
<function name="timeuntil"><doc><![CDATA[
    Like timesince, but returns a string measuring the time until
    the given time.
    ]]></doc>
<argument name="d"></argument>
<argument name="now" type="NoneType"><value></value>
</argument>
</function>
<function name="timesince"><doc><![CDATA[
    Takes two datetime objects and returns the time between d and now
    as a nicely formatted string, e.g. "10 minutes".  If d occurs after now,
    then "0 minutes" is returned.

    Units used are years, months, weeks, days, hours, and minutes.
    Seconds and microseconds are ignored.  Up to two adjacent units will be
    displayed.  For example, "2 weeks, 3 days" and "1 year, 3 months" are
    possible outputs, but "2 weeks, 3 hours" and "1 year, 5 days" are not.

    Adapted from http://blog.natbat.co.uk/archive/2003/Jun/14/time_since
    ]]></doc>
<argument name="d"></argument>
<argument name="now" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.stopwords" file="/django/utils/stopwords.pyc"><doc></doc>
<attribute name="stopwords" type="list"><value><![CDATA[['i', 'a', 'an', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'how', 'in', 'is', 'it', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was', 'what', 'when', 'where']]]></value>
</attribute>
<function name="strip_stopwords"><doc><![CDATA[Removes stopwords - also normalizes whitespace]]></doc>
<argument name="sentence"></argument>
</function>
</package>
<package name="django.utils.dictconfig" file="/django/utils/dictconfig.pyc"><doc></doc>
<depends name="logging"></depends>
<depends name="sys"></depends>
<depends name="re"></depends>
<depends name="types"></depends>
<import_function name="_checkLevel" module="logging"></import_function>
<attribute name="IDENTIFIER" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb70d7e80>]]></value>
</attribute>
<function name="dictConfig"><doc><![CDATA[Configure logging using a dictionary.]]></doc>
<argument name="config"></argument>
</function>
<function name="valid_ident"><doc></doc>
<argument name="s"></argument>
</function>
<class name="BaseConfigurator"></class>
<class name="ConvertingTuple"></class>
<class name="ConvertingDict"></class>
<class name="ConvertingList"></class>
<class name="DictConfigurator"></class>
<class name="dictConfigClass"></class>
</package>
<package name="django.utils.regex_helper" file="/django/utils/regex_helper.pyc"><doc><![CDATA[
Functions for reversing a regular expression (used in reverse URL resolving).
Used internally by Django and not intended for external use.

This is not, and is not intended to be, a complete reg-exp decompiler. It
should be good enough for a large class of URLS, however.
]]></doc>
<attribute name="ESCAPE_MAPPINGS" type="dict"><value><![CDATA[{'A': None, 's': u' ', 'b': None, 'd': u'0', 'w': u'x', 'W': u'!', 'B': None, 'Z': None, 'S': u'x', 'D': u'x'}]]></value>
</attribute>
<function name="normalize"><doc><![CDATA[
    Given a reg-exp pattern, normalizes it to a list of forms that suffice for
    reverse matching. This does the following:

    (1) For any repeating sections, keeps the minimum number of occurrences
        permitted (this means zero for optional groups).
    (2) If an optional group includes parameters, include one occurrence of
        that group (along with the zero occurrence case from step (1)).
    (3) Select the first (essentially an arbitrary) element from any character
        class. Select an arbitrary character for any unordered class (e.g. '.'
        or '\w') in the pattern.
    (5) Ignore comments and any of the reg-exp flags that won't change
        what we construct ("iLmsu"). "(?x)" is an error, however.
    (6) Raise an error on all other non-capturing (?...) forms (e.g.
        look-ahead and look-behind matches) and any disjunctive ('|')
        constructs.

    Django's URLs for forward resolving are either all positional arguments or
    all keyword arguments. That is assumed here, as well. Although reverse
    resolving can be done using positional args when keyword args are
    specified, the two cannot be mixed in the same reverse() call.
    ]]></doc>
<argument name="pattern"></argument>
</function>
<function name="get_quantifier"><doc><![CDATA[
    Parse a quantifier from the input, where "ch" is the first character in the
    quantifier.

    Returns the minimum number of occurences permitted by the quantifier and
    either None or the next character from the input_iter if the next character
    is not part of the quantifier.
    ]]></doc>
<argument name="ch"></argument>
<argument name="input_iter"></argument>
</function>
<function name="contains"><doc><![CDATA[
    Returns True if the "source" contains an instance of "inst". False,
    otherwise.
    ]]></doc>
<argument name="source"></argument>
<argument name="inst"></argument>
</function>
<function name="flatten_result"><doc><![CDATA[
    Turns the given source sequence into a list of reg-exp possibilities and
    their arguments. Returns a list of strings and a list of argument lists.
    Each of the two lists will be of the same length.
    ]]></doc>
<argument name="source"></argument>
</function>
<function name="next_char"><doc><![CDATA[
    An iterator that yields the next character from "pattern_iter", respecting
    escape sequences. An escaped character is replaced by a representative of
    its class (e.g. \w -> "x"). If the escaped character is one that is
    skipped, it is not returned (the next character is returned instead).

    Yields the next character, along with a boolean indicating whether it is a
    raw (unescaped) character or not.
    ]]></doc>
<argument name="input_iter"></argument>
</function>
<function name="walk_to_end"><doc><![CDATA[
    The iterator is currently inside a capturing group. We want to walk to the
    close of this group, skipping over any nested groups and handling escaped
    parentheses correctly.
    ]]></doc>
<argument name="ch"></argument>
<argument name="input_iter"></argument>
</function>
<class name="NonCapture"></class>
<class name="Group"></class>
<class name="Choice"></class>
</package>
<package name="django.utils._threading_local" file="/django/utils/_threading_local.pyc"><doc><![CDATA[Thread-local objects

(Note that this module provides a Python version of thread
 threading.local class.  Depending on the version of Python you're
 using, there may be a faster one available.  You should always import
 the local class from threading.)

Thread-local objects support the management of thread-local data.
If you have data that you want to be local to a thread, simply create
a thread-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about thread-local objects is that their data are
local to a thread. If we access the data in a different thread:

  >>> log = []
  >>> def f():
  ...     items = mydata.__dict__.items()
  ...     items.sort()
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)

  >>> import threading
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other thread
don't affect data seen in this thread:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever thread was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across threads, as they apply only to the thread they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     initialized = False
  ...     def __init__(self, **kw):
  ...         if self.initialized:
  ...             raise SystemError('__init__ called too many times')
  ...         self.initialized = True
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate thread.  This
is necessary to initialize each thread's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate thread:

  >>> log = []
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[('color', 'red'), ('initialized', True)], 11]

without affecting this thread's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not thread
local. They are shared across threads:

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate thread:

  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
]]></doc>
<depends name="threading"></depends>
<import_function name="currentThread" module="threading"></import_function>
<import_function name="RLock" module="threading"></import_function>
<import_function name="enumerate" module="threading"></import_function>
<function name="_patch"><doc></doc>
<argument name="self"></argument>
</function>
<class name="local"></class>
<class name="_localbase"></class>
</package>
<package name="django.utils.cache" file="/django/utils/cache.pyc"><doc><![CDATA[
This module contains helper functions for controlling caching. It does so by
managing the "Vary" header of responses. It includes functions to patch the
header of response objects directly and decorators that change functions to do
that header-patching themselves.

For information on the Vary header, see:

    http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.44

Essentially, the "Vary" HTTP header defines which headers a cache should take
into account when building its cache key. Requests with the same path but
different header content for headers named in "Vary" need to get different
cache keys to prevent delivery of wrong content.

An example: i18n middleware would need to distinguish caches by the
"Accept-language" header.
]]></doc>
<depends name="_hashlib"></depends>
<depends name="re"></depends>
<depends name="time"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="get_cache" module="django.core.cache"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="HttpRequest" module="django.http"></import_class>
<attribute name="cc_delim_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9e20ac0>]]></value>
</attribute>
<function name="_i18n_cache_key_suffix"><doc><![CDATA[If enabled, returns the cache key ending with a locale.]]></doc>
<argument name="request"></argument>
<argument name="cache_key"></argument>
</function>
<function name="get_max_age"><doc><![CDATA[
    Returns the max-age from the response Cache-Control header as an integer
    (or ``None`` if it wasn't found or wasn't an integer.
    ]]></doc>
<argument name="response"></argument>
</function>
<function name="learn_cache_key"><doc><![CDATA[
    Learns what headers to take into account for some request path from the
    response object. It stores those headers in a global path registry so that
    later access to that path will know what headers to take into account
    without building the response object itself. The headers are named in the
    Vary header of the response, but we want to prevent response generation.

    The list of headers to use for cache key generation is stored in the same
    cache as the pages themselves. If the cache ages some data out of the
    cache, this just means that we have to build the response once to get at
    the Vary header and so at the list of headers to use for the cache key.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
<argument name="cache_timeout" type="NoneType"><value></value>
</argument>
<argument name="key_prefix" type="NoneType"><value></value>
</argument>
<argument name="cache" type="NoneType"><value></value>
</argument>
</function>
<function name="_generate_cache_header_key"><doc><![CDATA[Returns a cache key for the header cache.]]></doc>
<argument name="key_prefix"></argument>
<argument name="request"></argument>
</function>
<function name="_generate_cache_key"><doc><![CDATA[Returns a cache key from the headers given in the header list.]]></doc>
<argument name="request"></argument>
<argument name="method"></argument>
<argument name="headerlist"></argument>
<argument name="key_prefix"></argument>
</function>
<function name="patch_response_headers"><doc><![CDATA[
    Adds some useful headers to the given HttpResponse object:
        ETag, Last-Modified, Expires and Cache-Control

    Each header is only added if it isn't already set.

    cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used
    by default.
    ]]></doc>
<argument name="response"></argument>
<argument name="cache_timeout" type="NoneType"><value></value>
</argument>
</function>
<function name="get_cache_key"><doc><![CDATA[
    Returns a cache key based on the request path and query. It can be used
    in the request phase because it pulls the list of headers to take into
    account from the global path registry and uses those to build a cache key
    to check against.

    If there is no headerlist stored, the page needs to be rebuilt, so this
    function returns None.
    ]]></doc>
<argument name="request"></argument>
<argument name="key_prefix" type="NoneType"><value></value>
</argument>
<argument name="method" type="str"><value><![CDATA[GET]]></value>
</argument>
<argument name="cache" type="NoneType"><value></value>
</argument>
</function>
<function name="has_vary_header"><doc><![CDATA[
    Checks to see if the response has a given header name in its Vary header.
    ]]></doc>
<argument name="response"></argument>
<argument name="header_query"></argument>
</function>
<function name="patch_vary_headers"><doc><![CDATA[
    Adds (or updates) the "Vary" header in the given HttpResponse object.
    newheaders is a list of header names that should be in "Vary". Existing
    headers in "Vary" aren't removed.
    ]]></doc>
<argument name="response"></argument>
<argument name="newheaders"></argument>
</function>
<function name="add_never_cache_headers"><doc><![CDATA[
    Adds headers to a response to indicate that a page should never be cached.
    ]]></doc>
<argument name="response"></argument>
</function>
<function name="_to_tuple"><doc></doc>
<argument name="s"></argument>
</function>
<function name="patch_cache_control" kwargs="kwargs"><doc><![CDATA[
    This function patches the Cache-Control header by adding all
    keyword arguments to it. The transformation is as follows:

    * All keyword parameter names are turned to lowercase, and underscores
      are converted to hyphens.
    * If the value of a parameter is True (exactly True, not just a
      true value), only the parameter name is added to the header.
    * All other parameters are added with their value, after applying
      str() to it.
    ]]></doc>
<argument name="response"></argument>
</function>
</package>
<package name="django.core.cache" file="/django/core/cache/__init__.pyc"><doc><![CDATA[
Caching framework.

This package defines set of cache backends that all conform to a simple API.
In a nutshell, a cache is a set of values -- which can be any object that
may be pickled -- identified by string keys.  For the complete API, see
the abstract BaseCache class in django.core.cache.backends.base.

Client code should not access a cache backend directly; instead it should
either use the "cache" variable made available here, or it should use the
get_cache() function made available here. get_cache() takes a backend URI
(e.g. "memcached://127.0.0.1:11211/") and returns an instance of a backend
cache class.

See docs/topics/cache.txt for information on the public API.
]]></doc>
<depends name="urlparse"></depends>
<import_attribute name="cache" type="LocMemCache" module="django.core.cache.backends.locmem"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="parse_qsl" module="urlparse"></import_function>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<import_class name="InvalidCacheBackendError" module="django.core.cache.backends.base"></import_class>
<import_class name="CacheKeyWarning" module="django.core.cache.backends.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="DEFAULT_CACHE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['get_cache', 'cache', 'DEFAULT_CACHE_ALIAS']]]></value>
</attribute>
<attribute name="BACKENDS" type="dict"><value><![CDATA[{'db': 'db', 'dummy': 'dummy', 'memcached': 'memcached', 'file': 'filebased', 'locmem': 'locmem'}]]></value>
</attribute>
<attribute name="params" type="dict"><value></value>
</attribute>
<attribute name="legacy_backend" type="NoneType"><value></value>
</attribute>
<attribute name="engine" type="str"><value><![CDATA[django.core.cache.backends.locmem.LocMemCache]]></value>
</attribute>
<attribute name="backend_classes" type="dict"><value><![CDATA[{'db': 'db.DatabaseCache', 'dummy': 'dummy.DummyCache', 'memcached': 'memcached.CacheClass', 'file': 'filebased.FileBasedCache', 'locmem': 'locmem.LocMemCache'}]]></value>
</attribute>
<attribute name="host" type="str"><value></value>
</attribute>
<attribute name="defaults" type="dict"><value><![CDATA[{'LOCATION': '', 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}]]></value>
</attribute>
<function name="get_cache" kwargs="kwargs"><doc><![CDATA[
    Function to load a cache backend dynamically. This is flexible by design
    to allow different use cases:

    To load a backend with the old URI-based notation::

        cache = get_cache('locmem://')

    To load a backend that is pre-defined in the settings::

        cache = get_cache('default')

    To load a backend with its dotted import path,
    including arbitrary options::

        cache = get_cache('django.core.cache.backends.memcached.MemcachedCache', **{
            'LOCATION': '127.0.0.1:11211', 'TIMEOUT': 30,
        })

    ]]></doc>
<argument name="backend"></argument>
</function>
<function name="parse_backend_uri"><doc><![CDATA[
    Converts the "backend_uri" into a cache scheme ('db', 'memcached', etc), a
    host and any extra params that are required for the backend. Returns a
    (scheme, host, params) tuple.
    ]]></doc>
<argument name="backend_uri"></argument>
</function>
<function name="parse_backend_conf" kwargs="kwargs"><doc><![CDATA[
    Helper function to parse the backend configuration
    that doesn't use the URI notation.
    ]]></doc>
<argument name="backend"></argument>
</function>
</package>
<package name="django.core.exceptions" file="/django/core/exceptions.pyc"><doc><![CDATA[
Global Django exception and warning classes.
]]></doc>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<class name="MultipleObjectsReturned"></class>
<class name="ViewDoesNotExist"></class>
<class name="ValidationError"></class>
<class name="DjangoRuntimeWarning"></class>
<class name="FieldError"></class>
<class name="ObjectDoesNotExist"></class>
<class name="ImproperlyConfigured"></class>
<class name="MiddlewareNotUsed"></class>
<class name="SuspiciousOperation"></class>
<class name="PermissionDenied"></class>
</package>
<package name="django.core.signals" file="/django/core/signals.pyc"><doc></doc>
<import_attribute name="got_request_exception" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="request_finished" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="request_started" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.dispatch.dispatcher" file="/django/dispatch/dispatcher.pyc"><doc></doc>
<depends name="weakref"></depends>
<depends name="threading"></depends>
<attribute name="WEAKREF_TYPES" type="tuple"><value><![CDATA[(<type 'weakref'>, <class 'django.dispatch.saferef.BoundMethodWeakref'>)]]></value>
</attribute>
<function name="receiver" kwargs="kwargs"><doc><![CDATA[
    A decorator for connecting receivers to signals. Used by passing in the
    signal and keyword arguments to connect::

        @receiver(post_save, sender=MyModel)
        def signal_receiver(sender, **kwargs):
            ...

    ]]></doc>
<argument name="signal"></argument>
</function>
<function name="_make_id"><doc></doc>
<argument name="target"></argument>
</function>
<class name="Signal"></class>
</package>
<package name="django.dispatch.saferef" file="/django/dispatch/saferef.pyc"><doc><![CDATA[
"Safe weakrefs", originally from pyDispatcher.

Provides a way to safely weakref any function, including bound methods (which
aren't handled by the core weakref module).
]]></doc>
<depends name="traceback"></depends>
<depends name="weakref"></depends>
<function name="safeRef"><doc><![CDATA[Return a *safe* weak reference to a callable target

    target -- the object to be weakly referenced, if it's a
        bound method reference, will create a BoundMethodWeakref,
        otherwise creates a simple weakref.
    onDelete -- if provided, will have a hard reference stored
        to the callable to be called after the safe reference
        goes out of scope with the reference object, (either a
        weakref or a BoundMethodWeakref) as argument.
    ]]></doc>
<argument name="target"></argument>
<argument name="onDelete" type="NoneType"><value></value>
</argument>
</function>
<function name="get_bound_method_weakref"><doc><![CDATA[Instantiates the appropiate BoundMethodWeakRef, depending on the details of
    the underlying class method implementation]]></doc>
<argument name="target"></argument>
<argument name="onDelete"></argument>
</function>
<class name="BoundNonDescriptorMethodWeakref"></class>
<class name="BoundMethodWeakref"></class>
</package>
<package name="django.core.cache.backends.locmem" file="/django/core/cache/backends/locmem.pyc"><doc><![CDATA[Thread-safe in-memory cache backend.]]></doc>
<depends name="time"></depends>
<depends name="cPickle"></depends>
<import_class name="RWLock" module="django.utils.synch"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<attribute name="_caches" type="dict"><value><![CDATA[{'': {}}]]></value>
</attribute>
<attribute name="_expire_info" type="dict"><value><![CDATA[{'': {}}]]></value>
</attribute>
<attribute name="_locks" type="dict"><value><![CDATA[{'': <django.utils.synch.RWLock instance at 0x9e7cd8c>}]]></value>
</attribute>
<class name="CacheClass"></class>
<class name="LocMemCache"></class>
</package>
<package name="django.core.cache.backends" file="/django/core/cache/backends/__init__.pyc"><doc></doc>
</package>
<package name="django.core.cache.backends.db" file="/django/core/cache/backends/db.pyc"><doc><![CDATA[Database cache backend.]]></doc>
<depends name="time"></depends>
<depends name="base64"></depends>
<depends name="datetime"></depends>
<depends name="cPickle"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<import_class name="datetime" module="datetime"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<class name="Options"></class>
<class name="CacheClass"></class>
<class name="BaseDatabaseCache"></class>
<class name="DatabaseCache"></class>
</package>
<package name="django.db.utils" file="/django/db/utils.pyc"><doc></doc>
<depends name="inspect"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="load_backend"><doc></doc>
<argument name="backend_name"></argument>
</function>
<class name="IntegrityError"></class>
<class name="ConnectionDoesNotExist"></class>
<class name="ConnectionRouter"></class>
<class name="DatabaseError"></class>
<class name="ConnectionHandler"></class>
</package>
<package name="django.db.transaction" file="/django/db/transaction.pyc"><doc><![CDATA[
This module implements a transaction manager that can be used to define
transaction handling in a request or view function. It is used by transaction
control middleware and decorators.

The transaction manager can be in managed or in auto state. Auto state means the
system is using a commit-on-save strategy (actually it's more like
commit-on-change). As soon as the .save() or .delete() (or related) methods are
called, a commit is made.

Managed transactions don't do those commits, but will need some kind of manual
or implicit commits or rollbacks.
]]></doc>
<depends name="functools"></depends>
<depends name="sys"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="managed"><doc><![CDATA[
    Puts the transaction manager into a manual state: managed transactions have
    to be committed explicitly by the user. If you switch off transaction
    management and there is a pending commit/rollback, the data will be
    commited.
    ]]></doc>
<argument name="flag" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint_commit"><doc><![CDATA[
    Commits the most recent savepoint (if one exists). Does nothing if
    savepoints are not supported.
    ]]></doc>
<argument name="sid"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint"><doc><![CDATA[
    Creates a savepoint (if supported and required by the backend) inside the
    current transaction. Returns an identifier for the savepoint that will be
    used for the subsequent rollback or commit.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="set_dirty"><doc><![CDATA[
    Sets a dirty flag for the current thread and code streak. This can be used
    to decide in a managed block of code to decide whether there are open
    changes waiting for commit.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="is_dirty"><doc><![CDATA[
    Returns True if the current transaction requires a commit for changes to
    happen.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="enter_transaction_management"><doc><![CDATA[
    Enters transaction management for a running thread. It must be balanced with
    the appropriate leave_transaction_management call, since the actual state is
    managed as a stack.

    The state and dirty flag are carried over from the surrounding block or
    from the settings, if there is no surrounding block (dirty is always false
    when no current block is running).
    ]]></doc>
<argument name="managed" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="autocommit"><doc><![CDATA[
    Decorator that activates commit on save. This is Django's default behavior;
    this decorator is useful if you globally activated transaction management in
    your settings file and want the default behavior in some view functions.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_on_success"><doc><![CDATA[
    This decorator activates commit on response. This way, if the view function
    runs successfully, a commit is made; if the viewfunc produces an exception,
    a rollback is made. This is one of the most common ways to do transaction
    control in Web apps.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="leave_transaction_management"><doc><![CDATA[
    Leaves transaction management for a running thread. A dirty flag is carried
    over to the surrounding block, as a commit will commit all changes, even
    those from outside. (Commits are on connection level.)
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="_transaction_func"><doc><![CDATA[
    Takes 3 things, an entering function (what to do to start this block of
    transaction management), an exiting function (what to do to end it, on both
    success and failure, and using which can be: None, indiciating using is
    DEFAULT_DB_ALIAS, a callable, indicating that using is DEFAULT_DB_ALIAS and
    to return the function already wrapped.

    Returns either a Transaction objects, which is both a decorator and a
    context manager, or a wrapped function, if using is a callable.
    ]]></doc>
<argument name="entering"></argument>
<argument name="exiting"></argument>
<argument name="using"></argument>
</function>
<function name="rollback"><doc><![CDATA[
    This function does the rollback itself and resets the dirty flag.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="rollback_unless_managed"><doc><![CDATA[
    Rolls back changes if the system is not in managed transaction mode.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit"><doc><![CDATA[
    Does the commit itself and resets the dirty flag.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="set_clean"><doc><![CDATA[
    Resets a dirty flag for the current thread and code streak. This can be used
    to decide in a managed block of code to decide whether a commit or rollback
    should happen.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="savepoint_rollback"><doc><![CDATA[
    Rolls back the most recent savepoint (if one exists). Does nothing if
    savepoints are not supported.
    ]]></doc>
<argument name="sid"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_unless_managed"><doc><![CDATA[
    Commits changes if the system is not in managed transaction mode.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="is_managed"><doc><![CDATA[
    Checks whether the transaction manager is in manual or in auto state.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="clean_savepoints"><doc></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="commit_manually"><doc><![CDATA[
    Decorator that activates manual transaction control. It just disables
    automatic transaction control and doesn't do any commit/rollback of its
    own -- it's up to the user to call the commit and rollback functions
    themselves.
    ]]></doc>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<class name="Transaction"></class>
<class name="TransactionManagementError"></class>
</package>
<package name="django.core.cache.backends.memcached" file="/django/core/cache/backends/memcached.pyc"><doc><![CDATA[Memcached cache backend]]></doc>
<depends name="time"></depends>
<depends name="thread"></depends>
<import_class name="InvalidCacheBackendError" module="django.core.cache.backends.base"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<class name="CacheClass"></class>
<class name="PyLibMCCache"></class>
<class name="BaseMemcachedCache"></class>
<class name="MemcachedCache"></class>
</package>
<package name="django.core.cache.backends.filebased" file="/django/core/cache/backends/filebased.pyc"><doc><![CDATA[File-based cache backend]]></doc>
<depends name="cPickle"></depends>
<depends name="_hashlib"></depends>
<depends name="time"></depends>
<depends name="shutil"></depends>
<depends name="os"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<class name="CacheClass"></class>
<class name="FileBasedCache"></class>
</package>
<package name="django.core.cache.backends.dummy" file="/django/core/cache/backends/dummy.pyc"><doc><![CDATA[Dummy cache backend]]></doc>
<import_class name="BaseCache" module="django.core.cache.backends.base"></import_class>
<class name="CacheClass"></class>
<class name="DummyCache"></class>
</package>
<package name="django.core.cache.backends.base" file="/django/core/cache/backends/base.pyc"><doc><![CDATA[Base Cache class.]]></doc>
<depends name="warnings"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="DjangoRuntimeWarning" module="django.core.exceptions"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="MEMCACHE_MAX_KEY_LENGTH" type="int"><value><![CDATA[250]]></value>
</attribute>
<function name="default_key_func"><doc><![CDATA[
    Default function to generate keys.

    Constructs the key used by all other methods. By default it prepends
    the `key_prefix'. KEY_FUNCTION can be used to specify an alternate
    function with custom key making behavior.
    ]]></doc>
<argument name="key"></argument>
<argument name="key_prefix"></argument>
<argument name="version"></argument>
</function>
<function name="get_key_func"><doc><![CDATA[
    Function to decide which key function to use.

    Defaults to ``default_key_func``.
    ]]></doc>
<argument name="key_func"></argument>
</function>
<class name="InvalidCacheBackendError"></class>
<class name="BaseCache"></class>
<class name="CacheKeyWarning"></class>
</package>
<package name="django.http" file="/django/http/__init__.pyc"><doc></doc>
<depends name="urllib"></depends>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="Cookie"></depends>
<depends name="urlparse"></depends>
<depends name="cStringIO"></depends>
<depends name="pprint"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<import_attribute name="_tc" type="SimpleCookie" module="Cookie"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="urlencode" module="urllib"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="fix_IE_for_vary" module="django.http.utils"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="cookie_date" module="django.utils.http"></import_function>
<import_function name="urljoin" module="urlparse"></import_function>
<import_function name="quote" module="urllib"></import_function>
<import_function name="fix_location_header" module="django.http.utils"></import_function>
<import_function name="parse_qsl" module="urlparse"></import_function>
<import_function name="conditional_content_removal" module="django.http.utils"></import_function>
<import_function name="fix_IE_for_attach" module="django.http.utils"></import_function>
<import_function name="pformat" module="pprint"></import_function>
<import_class name="MultiPartParser" module="django.http.multipartparser"></import_class>
<import_class name="ImmutableList" module="django.utils.datastructures"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<attribute name="_cookie_allows_colon_in_names" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="absolute_http_url_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9e20a20>]]></value>
</attribute>
<attribute name="_cookie_encodes_correctly" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="_morsel_supports_httponly" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="RESERVED_CHARS" type="str"><value><![CDATA[!*'();:@&=+$,/?%#[]]]></value>
</attribute>
<function name="get_host"><doc></doc>
<argument name="request"></argument>
</function>
<function name="str_to_unicode"><doc><![CDATA[
    Converts basestring objects to unicode, using the given encoding. Illegally
    encoded input characters are replaced with Unicode "unknown" codepoint
    (\ufffd).

    Returns any non-basestring objects without change.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding"></argument>
</function>
<function name="parse_cookie"><doc></doc>
<argument name="cookie"></argument>
</function>
<class name="HttpResponseNotFound"></class>
<class name="HttpResponseNotModified"></class>
<class name="SimpleCookie"></class>
<class name="HttpResponseNotAllowed"></class>
<class name="HttpResponseForbidden"></class>
<class name="HttpResponse"></class>
<class name="CompatCookie"></class>
<class name="HttpRequest"></class>
<class name="QueryDict"></class>
<class name="BadHeaderError"></class>
<class name="HttpResponseGone"></class>
<class name="HttpResponseServerError"></class>
<class name="HttpResponseBadRequest"></class>
<class name="Http404"></class>
<class name="HttpResponseRedirect"></class>
<class name="HttpResponsePermanentRedirect"></class>
</package>
<package name="django.core.files.uploadhandler" file="/django/core/files/uploadhandler.pyc"><doc><![CDATA[
Base file upload handler classes, and the built-in concrete subclasses
]]></doc>
<depends name="cStringIO"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="TemporaryUploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="InMemoryUploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler', 'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler', 'StopFutureHandlers']]]></value>
</attribute>
<function name="load_handler" args="args" kwargs="kwargs"><doc><![CDATA[
    Given a path to a handler, return an instance of that handler.

    E.g.::
        >>> load_handler('django.core.files.uploadhandler.TemporaryFileUploadHandler', request)
        <TemporaryFileUploadHandler object at 0x...>

    ]]></doc>
<argument name="path"></argument>
</function>
<class name="StopFutureHandlers"></class>
<class name="FileUploadHandler"></class>
<class name="UploadFileException"></class>
<class name="MemoryFileUploadHandler"></class>
<class name="StopUpload"></class>
<class name="SkipFile"></class>
<class name="TemporaryFileUploadHandler"></class>
</package>
<package name="django.core.files.uploadedfile" file="/django/core/files/uploadedfile.pyc"><doc><![CDATA[
Classes representing uploaded files.
]]></doc>
<depends name="cStringIO"></depends>
<depends name="os"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile', 'SimpleUploadedFile')]]></value>
</attribute>
<class name="TemporaryUploadedFile"></class>
<class name="SimpleUploadedFile"></class>
<class name="InMemoryUploadedFile"></class>
<class name="UploadedFile"></class>
</package>
<package name="django.core.files.base" file="/django/core/files/base.pyc"><doc></doc>
<depends name="cStringIO"></depends>
<depends name="os"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="FileProxyMixin" module="django.core.files.utils"></import_class>
<class name="ContentFile"></class>
<class name="File"></class>
</package>
<package name="django.core.files.utils" file="/django/core/files/utils.pyc"><doc></doc>
<class name="FileProxyMixin"></class>
</package>
<package name="django.core.files.temp" file="/django/core/files/temp.pyc"><doc><![CDATA[
The temp module provides a NamedTemporaryFile that can be re-opened on any
platform. Most platforms use the standard Python tempfile.TemporaryFile class,
but MS Windows users are given a custom class.

This is needed because in Windows NT, the default implementation of
NamedTemporaryFile uses the O_TEMPORARY flag, and thus cannot be reopened [1].

1: http://mail.python.org/pipermail/python-list/2005-December/359474.html
]]></doc>
<depends name="tempfile"></depends>
<depends name="os"></depends>
<import_function name="gettempdir" module="tempfile"></import_function>
<import_function name="NamedTemporaryFile" module="tempfile"></import_function>
<import_class name="FileProxyMixin" module="django.core.files.utils"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('NamedTemporaryFile', 'gettempdir')]]></value>
</attribute>
</package>
<package name="django.http.multipartparser" file="/django/http/multipartparser.pyc"><doc><![CDATA[
Multi-part parsing for file uploads.

Exposes one class, ``MultiPartParser``, which feeds chunks of uploaded data to
file upload handlers for processing.
]]></doc>
<depends name="cgi"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="unescape_entities" module="django.utils.text"></import_function>
<import_class name="SkipFile" module="django.core.files.uploadhandler"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="StopUpload" module="django.core.files.uploadhandler"></import_class>
<import_class name="StopFutureHandlers" module="django.core.files.uploadhandler"></import_class>
<import_class name="SuspiciousOperation" module="django.core.exceptions"></import_class>
<attribute name="FILE" type="str"><value><![CDATA[file]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('MultiPartParser', 'MultiPartParserError', 'InputStreamExhausted')]]></value>
</attribute>
<attribute name="RAW" type="str"><value><![CDATA[raw]]></value>
</attribute>
<attribute name="FIELD" type="str"><value><![CDATA[field]]></value>
</attribute>
<function name="_parse_header_params"><doc></doc>
<argument name="s"></argument>
</function>
<function name="parse_header"><doc><![CDATA[ Parse the header into a key-value. ]]></doc>
<argument name="line"></argument>
</function>
<function name="exhaust"><doc><![CDATA[
    Completely exhausts an iterator or stream.

    Raise a MultiPartParserError if the argument is not a stream or an iterable.
    ]]></doc>
<argument name="stream_or_iterable"></argument>
</function>
<function name="parse_boundary_stream"><doc><![CDATA[
    Parses one and exactly one stream that encapsulates a boundary.
    ]]></doc>
<argument name="stream"></argument>
<argument name="max_header_size"></argument>
</function>
<class name="LazyStream"></class>
<class name="LimitBytes"></class>
<class name="BoundaryIter"></class>
<class name="MultiPartParserError"></class>
<class name="MultiPartParser"></class>
<class name="InputStreamExhausted"></class>
<class name="ChunkIter"></class>
<class name="Parser"></class>
<class name="InterBoundaryIter"></class>
</package>
<package name="django.http.utils" file="/django/http/utils.pyc"><doc><![CDATA[
Functions that modify an HTTP request or response in some way.
]]></doc>
<function name="fix_location_header"><doc><![CDATA[
    Ensures that we always use an absolute URI in any location header in the
    response. This is required by RFC 2616, section 14.30.

    Code constructing response objects is free to insert relative paths, as
    this function converts them to absolute paths.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="conditional_content_removal"><doc><![CDATA[
    Removes the content of responses for HEAD requests, 1xx, 204 and 304
    responses. Ensures compliance with RFC 2616, section 4.3.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="fix_IE_for_attach"><doc><![CDATA[
    This function will prevent Django from serving a Content-Disposition header
    while expecting the browser to cache it (only when the browser is IE). This
    leads to IE not allowing the client to download.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
<function name="fix_IE_for_vary"><doc><![CDATA[
    This function will fix the bug reported at
    http://support.microsoft.com/kb/824847/en-us?spid=8722&sid=global
    by clearing the Vary header whenever the mime-type is not safe
    enough for Internet Explorer to handle.  Poor thing.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
</function>
</package>
<package name="django.utils.checksums" file="/django/utils/checksums.pyc"><doc><![CDATA[
Common checksum routines (used in multiple localflavor/ cases, for example).
]]></doc>
<attribute name="__all__" type="list"><value><![CDATA[['luhn']]]></value>
</attribute>
<attribute name="LUHN_ODD_LOOKUP" type="tuple"><value><![CDATA[(0, 2, 4, 6, 8, 1, 3, 5, 7, 9)]]></value>
</attribute>
<function name="luhn"><doc><![CDATA[
    Checks a candidate number for validity according to the Luhn
    algorithm (used in validation of, for example, credit cards).
    Both numeric and string candidates are accepted.
    ]]></doc>
<argument name="candidate"></argument>
</function>
</package>
<package name="django.utils.autoreload" file="/django/utils/autoreload.pyc"><doc></doc>
<depends name="termios"></depends>
<depends name="sys"></depends>
<depends name="thread"></depends>
<depends name="signal"></depends>
<depends name="threading"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<attribute name="RUN_RELOADER" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="_win" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="_mtimes" type="dict"><value></value>
</attribute>
<function name="reloader_thread"><doc></doc>
</function>
<function name="jython_reloader"><doc></doc>
<argument name="main_func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="restart_with_reloader"><doc></doc>
</function>
<function name="code_changed"><doc></doc>
</function>
<function name="main"><doc></doc>
<argument name="main_func"></argument>
<argument name="args" type="NoneType"><value></value>
</argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
</function>
<function name="python_reloader"><doc></doc>
<argument name="main_func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="ensure_echo_on"><doc></doc>
</function>
</package>
<package name="django.utils.xmlutils" file="/django/utils/xmlutils.pyc"><doc><![CDATA[
Utilities for XML generation/parsing.
]]></doc>
<depends name="xml.sax.saxutils"></depends>
<import_class name="XMLGenerator" module="xml.sax.saxutils"></import_class>
<class name="SimplerXMLGenerator"></class>
</package>
<package name="django.utils.daemonize" file="/django/utils/daemonize.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<function name="become_daemon"><doc><![CDATA[Robustly turn into a UNIX daemon, running in our_home_dir.]]></doc>
<argument name="our_home_dir" type="str"><value><![CDATA[.]]></value>
</argument>
<argument name="out_log" type="str"><value><![CDATA[/dev/null]]></value>
</argument>
<argument name="err_log" type="str"><value><![CDATA[/dev/null]]></value>
</argument>
<argument name="umask" type="int"><value><![CDATA[18]]></value>
</argument>
</function>
</package>
<package name="django.utils.feedgenerator" file="/django/utils/feedgenerator.pyc"><doc><![CDATA[
Syndication feed generation library -- used for generating RSS, etc.

Sample usage:

>>> from django.utils import feedgenerator
>>> feed = feedgenerator.Rss201rev2Feed(
...     title=u"Poynter E-Media Tidbits",
...     link=u"http://www.poynter.org/column.asp?id=31",
...     description=u"A group Weblog by the sharpest minds in online media/journalism/publishing.",
...     language=u"en",
... )
>>> feed.add_item(
...     title="Hello",
...     link=u"http://www.holovaty.com/test/",
...     description="Testing."
... )
>>> fp = open('test.rss', 'w')
>>> feed.write(fp, 'utf-8')
>>> fp.close()

For definitions of the different versions of RSS, see:
http://diveintomark.org/archives/2004/02/04/incompatible-rss
]]></doc>
<depends name="datetime"></depends>
<depends name="urlparse"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="SimplerXMLGenerator" module="django.utils.xmlutils"></import_class>
<function name="rfc3339_date"><doc></doc>
<argument name="date"></argument>
</function>
<function name="rfc2822_date"><doc></doc>
<argument name="date"></argument>
</function>
<function name="get_tag_uri"><doc><![CDATA[
    Creates a TagURI.

    See http://diveintomark.org/archives/2004/05/28/howto-atom-id
    ]]></doc>
<argument name="url"></argument>
<argument name="date"></argument>
</function>
<class name="Atom1Feed"></class>
<class name="DefaultFeed"></class>
<class name="SyndicationFeed"></class>
<class name="RssFeed"></class>
<class name="RssUserland091Feed"></class>
<class name="Rss201rev2Feed"></class>
<class name="Enclosure"></class>
</package>
<package name="django.utils.crypto" file="/django/utils/crypto.pyc"><doc><![CDATA[
Django's standard crypto functions and utilities.
]]></doc>
<depends name="_hashlib"></depends>
<depends name="hmac"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="sha_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<function name="salted_hmac"><doc><![CDATA[
    Returns the HMAC-SHA1 of 'value', using a key generated from key_salt and a
    secret (which defaults to settings.SECRET_KEY).

    A different key_salt should be passed in for every application of HMAC.
    ]]></doc>
<argument name="key_salt"></argument>
<argument name="value"></argument>
<argument name="secret" type="NoneType"><value></value>
</argument>
</function>
<function name="constant_time_compare"><doc><![CDATA[
    Returns True if the two strings are equal, False otherwise.

    The time taken is independent of the number of characters that match.
    ]]></doc>
<argument name="val1"></argument>
<argument name="val2"></argument>
</function>
</package>
<package name="django.utils.synch" file="/django/utils/synch.pyc"><doc><![CDATA[
Synchronization primitives:

    - reader-writer lock (preference to writers)

(Contributed to Django by eugene@lazutkin.com)
]]></doc>
<depends name="threading"></depends>
<class name="RWLock"></class>
</package>
<package name="django.utils.itercompat" file="/django/utils/itercompat.pyc"><doc><![CDATA[
Providing iterator functions that are not in all version of Python we support.
Where possible, we try to use the system-native version and only fall back to
these implementations if necessary.
]]></doc>
<depends name="itertools"></depends>
<import_class name="product" module="itertools"></import_class>
<function name="any"><doc></doc>
<argument name="iterable"></argument>
</function>
<function name="is_iterable"><doc><![CDATA[A implementation independent way of checking for iterables]]></doc>
<argument name="x"></argument>
</function>
<function name="all"><doc></doc>
<argument name="iterable"></argument>
</function>
</package>
<package name="django.utils.formats" file="/django/utils/formats.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="decimal"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="check_for_language" module="django.utils.translation"></import_function>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="to_locale" module="django.utils.translation"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<attribute name="_format_modules_cache" type="dict"><value></value>
</attribute>
<attribute name="_format_cache" type="dict"><value></value>
</attribute>
<function name="get_format_modules"><doc><![CDATA[
    Returns a list of the format modules found
    ]]></doc>
<argument name="reverse" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="reset_format_cache"><doc><![CDATA[Clear any cached formats.

    This method is provided primarily for testing purposes,
    so that the effects of cached formats can be removed.
    ]]></doc>
</function>
<function name="get_format"><doc><![CDATA[
    For a specific format type, returns the format for the current
    language (locale), defaults to the format in the settings.
    format_type is the name of the format, e.g. 'DATE_FORMAT'

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="format_type"></argument>
<argument name="lang" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="localize"><doc><![CDATA[
    Checks if value is a localizable type (date, number...) and returns it
    formatted as a string using current locale format.

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="iter_format_modules"><doc><![CDATA[
    Does the heavy lifting of finding format modules.
    ]]></doc>
<argument name="lang"></argument>
</function>
<function name="localize_input"><doc><![CDATA[
    Checks if an input value is a localizable type and returns it
    formatted with the appropriate formatting string of the current locale.
    ]]></doc>
<argument name="value"></argument>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="sanitize_separators"><doc><![CDATA[
    Sanitizes a value according to the current decimal and
    thousand separator setting. Used with form field input.
    ]]></doc>
<argument name="value"></argument>
</function>
<function name="time_format"><doc><![CDATA[
    Formats a datetime.time object using a localizable format

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="format" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="number_format"><doc><![CDATA[
    Formats a numeric value using localization settings

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="decimal_pos" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
<function name="date_format"><doc><![CDATA[
    Formats a datetime.date or datetime.datetime object using a
    localizable format

    If use_l10n is provided and is not None, that will force the value to
    be localized (or not), overriding the value of settings.USE_L10N.
    ]]></doc>
<argument name="value"></argument>
<argument name="format" type="NoneType"><value></value>
</argument>
<argument name="use_l10n" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.html" file="/django/utils/html.pyc"><doc><![CDATA[HTML utilities suitable for global use.]]></doc>
<depends name="re"></depends>
<depends name="string"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="urlquote" module="django.utils.http"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="punctuation_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bb4018>]]></value>
</attribute>
<attribute name="trailing_empty_content_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x99f5af8>]]></value>
</attribute>
<attribute name="LEADING_PUNCTUATION" type="list"><value><![CDATA[['(', '<', '&lt;']]]></value>
</attribute>
<attribute name="html_gunk_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bfc748>]]></value>
</attribute>
<attribute name="_js_escapes" type="tuple"><value><![CDATA[(('\\', '\\u005C'), ("'", '\\u0027'), ('"', '\\u0022'), ('>', '\\u003E'), ('<', '\\u003C'), ('&', '\\u0026'), ('=', '\\u003D'), ('-', '\\u002D'), (';', '\\u003B'), (u'\u2028', '\\u2028'), (u'\u2029', '\\u2029'), ('\x00', '\\u0000'), ('\x01', '\\u0001'), ('\x02', '\\u0002'), ('\x03', '\\u0003'), ('\x04', '\\u0004'), ('\x05', '\\u0005'), ('\x06', '\\u0006'), ('\x07', '\\u0007'), ('\x08', '\\u0008'), ('\t', '\\u0009'), ('\n', '\\u000A'), ('\x0b', '\\u000B'), ('\x0c', '\\u000C'), ('\r', '\\u000D'), ('\x0e', '\\u000E'), ('\x0f', '\\u000F'), ('\x10', '\\u0010'), ('\x11', '\\u0011'), ('\x12', '\\u0012'), ('\x13', '\\u0013'), ('\x14', '\\u0014'), ('\x15', '\\u0015'), ('\x16', '\\u0016'), ('\x17', '\\u0017'), ('\x18', '\\u0018'), ('\x19', '\\u0019'), ('\x1a', '\\u001A'), ('\x1b', '\\u001B'), ('\x1c', '\\u001C'), ('\x1d', '\\u001D'), ('\x1e', '\\u001E'), ('\x1f', '\\u001F'))]]></value>
</attribute>
<attribute name="link_target_attribute_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bd5320>]]></value>
</attribute>
<attribute name="DOTS" type="list"><value><![CDATA[['&middot;', '*', '\xe2\x80\xa2', '&#149;', '&bull;', '&#8226;']]]></value>
</attribute>
<attribute name="word_split_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb74d9c20>]]></value>
</attribute>
<attribute name="TRAILING_PUNCTUATION" type="list"><value><![CDATA[['.', ',', ')', '>', '\n', '&gt;']]]></value>
</attribute>
<attribute name="z" type="int"><value><![CDATA[31]]></value>
</attribute>
<attribute name="unencoded_ampersands_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bd5220>]]></value>
</attribute>
<attribute name="simple_email_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bb38d8>]]></value>
</attribute>
<attribute name="hard_coded_bullets_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bfd070>]]></value>
</attribute>
<attribute name="_base_js_escapes" type="tuple"><value><![CDATA[(('\\', '\\u005C'), ("'", '\\u0027'), ('"', '\\u0022'), ('>', '\\u003E'), ('<', '\\u003C'), ('&', '\\u0026'), ('=', '\\u003D'), ('-', '\\u002D'), (';', '\\u003B'), (u'\u2028', '\\u2028'), (u'\u2029', '\\u2029'))]]></value>
</attribute>
<function name="strip_entities" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all entities (&something;) stripped.]]></doc>
</function>
<function name="clean_html" args="args" kwargs="kwargs"><doc><![CDATA[
    Clean the given HTML.  Specifically, do the following:
        * Convert <b> and <i> to <strong> and <em>.
        * Encode all ampersands correctly.
        * Remove all "target" attributes from <a> tags.
        * Remove extraneous HTML, such as presentational tags that open and
          immediately close and <br clear="all">.
        * Convert hard-coded bullets into HTML unordered lists.
        * Remove stuff like "<p>&nbsp;&nbsp;</p>", but only if it's at the
          bottom of the text.
    ]]></doc>
</function>
<function name="escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the given HTML with ampersands, quotes and angle brackets encoded.
    ]]></doc>
</function>
<function name="linebreaks" args="args" kwargs="kwargs"><doc><![CDATA[Converts newlines into <p> and <br />s.]]></doc>
</function>
<function name="strip_tags" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all tags stripped.]]></doc>
</function>
<function name="urlize" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts any URLs in text into clickable links.

    Works on http://, https://, www. links and links ending in .org, .net or
    .com. Links can have trailing punctuation (periods, commas, close-parens)
    and leading punctuation (opening parens) and it'll still do the right
    thing.

    If trim_url_limit is not None, the URLs in link text longer than this limit
    will truncated to trim_url_limit-3 characters and appended with an elipsis.

    If nofollow is True, the URLs in link text will get a rel="nofollow"
    attribute.

    If autoescape is True, the link text and URLs will get autoescaped.
    ]]></doc>
</function>
<function name="fix_ampersands" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with all unencoded ampersands encoded correctly.]]></doc>
</function>
<function name="conditional_escape"><doc><![CDATA[
    Similar to escape(), except that it doesn't operate on pre-escaped strings.
    ]]></doc>
<argument name="html"></argument>
</function>
<function name="strip_spaces_between_tags" args="args" kwargs="kwargs"><doc><![CDATA[Returns the given HTML with spaces between tags removed.]]></doc>
</function>
<function name="escapejs" args="args" kwargs="kwargs"><doc><![CDATA[Hex encodes characters for use in JavaScript strings.]]></doc>
</function>
</package>
<package name="django.utils.hashcompat" file="/django/utils/hashcompat.pyc"><doc><![CDATA[
The md5 and sha modules are deprecated since Python 2.5, replaced by the
hashlib module containing both hash algorithms. Here, we provide a common
interface to the md5 and sha constructors, depending on system version.
]]></doc>
<depends name="hashlib"></depends>
<depends name="_hashlib"></depends>
<depends name="sys"></depends>
<import_attribute name="sha_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="md5_hmac" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
</package>
<package name="django.utils.safestring" file="/django/utils/safestring.pyc"><doc><![CDATA[
Functions for working with "safe strings": strings that can be displayed safely
without further escaping in HTML. Marking something as a "safe string" means
that the producer of the string has already turned characters that should not
be interpreted by the HTML engine (e.g. '<') into the appropriate entities.
]]></doc>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="Promise" module="django.utils.functional"></import_class>
<function name="mark_safe"><doc><![CDATA[
    Explicitly mark a string as safe for (HTML) output purposes. The returned
    object can be used everywhere a string or unicode object is appropriate.

    Can be called multiple times on a single string.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="mark_for_escaping"><doc><![CDATA[
    Explicitly mark a string as requiring HTML escaping upon output. Has no
    effect on SafeData subclasses.

    Can be called multiple times on a single string (the resulting escaping is
    only applied once).
    ]]></doc>
<argument name="s"></argument>
</function>
<class name="EscapeData"></class>
<class name="SafeData"></class>
<class name="SafeString"></class>
<class name="SafeUnicode"></class>
<class name="EscapeString"></class>
<class name="EscapeUnicode"></class>
</package>
<package name="django.utils.copycompat" file="/django/utils/copycompat.pyc"><doc><![CDATA[
Fixes Python 2.4's failure to deepcopy unbound functions.
]]></doc>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="Error" module="copy"></import_class>
</package>
<package name="django.utils._os" file="/django/utils/_os.pyc"><doc></doc>
<depends name="stat"></depends>
<depends name="posixpath"></depends>
<depends name="os"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="join" module="posixpath"></import_function>
<import_function name="abspath" module="posixpath"></import_function>
<import_function name="isabs" module="posixpath"></import_function>
<import_function name="normcase" module="posixpath"></import_function>
<import_function name="normpath" module="posixpath"></import_function>
<attribute name="sep" type="str"><value><![CDATA[/]]></value>
</attribute>
<function name="safe_join" args="paths"><doc><![CDATA[
    Joins one or more path components to the base path component intelligently.
    Returns a normalized, absolute version of the final path.

    The final path must be located inside of the base path component (otherwise
    a ValueError is raised).
    ]]></doc>
<argument name="base"></argument>
</function>
<function name="rmtree_errorhandler"><doc><![CDATA[
    On Windows, some files are read-only (e.g. in in .svn dirs), so when
    rmtree() tries to remove them, an exception is thrown.
    We catch that here, remove the read-only attribute, and hopefully
    continue without problems.
    ]]></doc>
<argument name="func"></argument>
<argument name="path"></argument>
<argument name="exc_info"></argument>
</function>
<function name="abspathu"><doc><![CDATA[
        Version of os.path.abspath that uses the unicode representation
        of the current working directory, thus avoiding a UnicodeDecodeError
        in join when the cwd has non-ASCII characters.
        ]]></doc>
<argument name="path"></argument>
</function>
</package>
<package name="django.utils.module_loading" file="/django/utils/module_loading.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="imp"></depends>
<depends name="os"></depends>
<function name="module_has_submodule"><doc><![CDATA[See if 'module' is in 'package'.]]></doc>
<argument name="package"></argument>
<argument name="module_name"></argument>
</function>
</package>
<package name="django.utils.dates" file="/django/utils/dates.pyc"><doc><![CDATA[Commonly-used date structures]]></doc>
<import_function name="pgettext_lazy" module="django.utils.translation"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="MONTHS_3" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c002ec>, 2: <django.utils.functional.__proxy__ object at 0x9c0032c>, 3: <django.utils.functional.__proxy__ object at 0x9c0036c>, 4: <django.utils.functional.__proxy__ object at 0x9c003ac>, 5: <django.utils.functional.__proxy__ object at 0x9c003ec>, 6: <django.utils.functional.__proxy__ object at 0x9c0042c>, 7: <django.utils.functional.__proxy__ object at 0x9c0046c>, 8: <django.utils.functional.__proxy__ object at 0x9c004ac>, 9: <django.utils.functional.__proxy__ object at 0x9c004ec>, 10: <django.utils.functional.__proxy__ object at 0x9c0052c>, 11: <django.utils.functional.__proxy__ object at 0x9c0056c>, 12: <django.utils.functional.__proxy__ object at 0x9c005ac>}]]></value>
</attribute>
<attribute name="MONTHS_AP" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c005cc>, 2: <django.utils.functional.__proxy__ object at 0x9c005ec>, 3: <django.utils.functional.__proxy__ object at 0x9c0060c>, 4: <django.utils.functional.__proxy__ object at 0x9c00ccc>, 5: <django.utils.functional.__proxy__ object at 0x9c00cec>, 6: <django.utils.functional.__proxy__ object at 0x9c00d0c>, 7: <django.utils.functional.__proxy__ object at 0x9c00d2c>, 8: <django.utils.functional.__proxy__ object at 0x9c00d4c>, 9: <django.utils.functional.__proxy__ object at 0x9c00d6c>, 10: <django.utils.functional.__proxy__ object at 0x9c00d8c>, 11: <django.utils.functional.__proxy__ object at 0x9c00dac>, 12: <django.utils.functional.__proxy__ object at 0x9c00dcc>}]]></value>
</attribute>
<attribute name="MONTHS_ALT" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c00dec>, 2: <django.utils.functional.__proxy__ object at 0x9c00e0c>, 3: <django.utils.functional.__proxy__ object at 0x9c00e2c>, 4: <django.utils.functional.__proxy__ object at 0x9c00e4c>, 5: <django.utils.functional.__proxy__ object at 0x9c00e6c>, 6: <django.utils.functional.__proxy__ object at 0x9c00e8c>, 7: <django.utils.functional.__proxy__ object at 0x9c00eac>, 8: <django.utils.functional.__proxy__ object at 0x9c00ecc>, 9: <django.utils.functional.__proxy__ object at 0x9c00eec>, 10: <django.utils.functional.__proxy__ object at 0x9c00f0c>, 11: <django.utils.functional.__proxy__ object at 0x9c00f2c>, 12: <django.utils.functional.__proxy__ object at 0x9c00f4c>}]]></value>
</attribute>
<attribute name="MONTHS" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9bf8fcc>, 2: <django.utils.functional.__proxy__ object at 0x9c0002c>, 3: <django.utils.functional.__proxy__ object at 0x9c0006c>, 4: <django.utils.functional.__proxy__ object at 0x9c000ac>, 5: <django.utils.functional.__proxy__ object at 0x9c000ec>, 6: <django.utils.functional.__proxy__ object at 0x9c0012c>, 7: <django.utils.functional.__proxy__ object at 0x9c0016c>, 8: <django.utils.functional.__proxy__ object at 0x9c001ac>, 9: <django.utils.functional.__proxy__ object at 0x9c001ec>, 10: <django.utils.functional.__proxy__ object at 0x9c0022c>, 11: <django.utils.functional.__proxy__ object at 0x9c0026c>, 12: <django.utils.functional.__proxy__ object at 0x9c002ac>}]]></value>
</attribute>
<attribute name="WEEKDAYS_ABBR" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9bf8e0c>, 1: <django.utils.functional.__proxy__ object at 0x9bf8e4c>, 2: <django.utils.functional.__proxy__ object at 0x9bf8e8c>, 3: <django.utils.functional.__proxy__ object at 0x9bf8ecc>, 4: <django.utils.functional.__proxy__ object at 0x9bf8f0c>, 5: <django.utils.functional.__proxy__ object at 0x9bf8f4c>, 6: <django.utils.functional.__proxy__ object at 0x9bf8f8c>}]]></value>
</attribute>
<attribute name="WEEKDAYS" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9bf0f6c>, 1: <django.utils.functional.__proxy__ object at 0x9bf0f8c>, 2: <django.utils.functional.__proxy__ object at 0x9bf8ccc>, 3: <django.utils.functional.__proxy__ object at 0x9bf8d0c>, 4: <django.utils.functional.__proxy__ object at 0x9bf8d4c>, 5: <django.utils.functional.__proxy__ object at 0x9bf8d8c>, 6: <django.utils.functional.__proxy__ object at 0x9bf8dcc>}]]></value>
</attribute>
<attribute name="WEEKDAYS_REV" type="dict"><value><![CDATA[{'monday': 0, 'tuesday': 1, 'friday': 4, 'wednesday': 2, 'thursday': 3, 'sunday': 6, 'saturday': 5}]]></value>
</attribute>
<attribute name="MONTHS_3_REV" type="dict"><value><![CDATA[{'mar': 3, 'sep': 9, 'may': 5, 'jun': 6, 'jul': 7, 'nov': 11, 'feb': 2, 'aug': 8, 'jan': 1, 'apr': 4, 'dec': 12, 'oct': 10}]]></value>
</attribute>
</package>
<package name="django.utils.log" file="/django/utils/log.pyc"><doc></doc>
<depends name="logging.config"></depends>
<depends name="logging"></depends>
<depends name="sys"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_function name="dictConfig" module="logging.config"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_class name="NullHandler" module="logging"></import_class>
<class name="AdminEmailHandler"></class>
</package>
<package name="django.core.mail" file="/django/core/mail/__init__.pyc"><doc><![CDATA[
Tools for sending email.
]]></doc>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="forbid_multi_line_headers" module="django.core.mail.message"></import_function>
<import_function name="make_msgid" module="django.core.mail.message"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="SafeMIMEText" module="django.core.mail.message"></import_class>
<import_class name="BadHeaderError" module="django.core.mail.message"></import_class>
<import_class name="CachedDnsName" module="django.core.mail.utils"></import_class>
<import_class name="SafeMIMEMultipart" module="django.core.mail.message"></import_class>
<import_class name="_SMTPConnection" module="django.core.mail.backends.smtp"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="EmailMultiAlternatives" module="django.core.mail.message"></import_class>
<import_class name="EmailMessage" module="django.core.mail.message"></import_class>
<attribute name="DEFAULT_ATTACHMENT_MIME_TYPE" type="str"><value><![CDATA[application/octet-stream]]></value>
</attribute>
<function name="send_mass_mail"><doc><![CDATA[
    Given a datatuple of (subject, message, from_email, recipient_list), sends
    each message to each recipient list. Returns the number of e-mails sent.

    If from_email is None, the DEFAULT_FROM_EMAIL setting is used.
    If auth_user and auth_password are set, they're used to log in.
    If auth_user is None, the EMAIL_HOST_USER setting is used.
    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.

    Note: The API for this method is frozen. New code wanting to extend the
    functionality should use the EmailMessage class directly.
    ]]></doc>
<argument name="datatuple"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auth_user" type="NoneType"><value></value>
</argument>
<argument name="auth_password" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<function name="get_connection" kwargs="kwds"><doc><![CDATA[Load an e-mail backend and return an instance of it.

    If backend is None (default) settings.EMAIL_BACKEND is used.

    Both fail_silently and other keyword arguments are used in the
    constructor of the backend.
    ]]></doc>
<argument name="backend" type="NoneType"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="mail_managers"><doc><![CDATA[Sends a message to the managers, as defined by the MANAGERS setting.]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="html_message" type="NoneType"><value></value>
</argument>
</function>
<function name="mail_admins"><doc><![CDATA[Sends a message to the admins, as defined by the ADMINS setting.]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
<argument name="html_message" type="NoneType"><value></value>
</argument>
</function>
<function name="send_mail"><doc><![CDATA[
    Easy wrapper for sending a single message to a recipient list. All members
    of the recipient list will see the other recipients in the 'To' field.

    If auth_user is None, the EMAIL_HOST_USER setting is used.
    If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.

    Note: The API for this method is frozen. New code wanting to extend the
    functionality should use the EmailMessage class directly.
    ]]></doc>
<argument name="subject"></argument>
<argument name="message"></argument>
<argument name="from_email"></argument>
<argument name="recipient_list"></argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="auth_user" type="NoneType"><value></value>
</argument>
<argument name="auth_password" type="NoneType"><value></value>
</argument>
<argument name="connection" type="NoneType"><value></value>
</argument>
</function>
<class name="SMTPConnection"></class>
</package>
<package name="django.core.mail.backends.smtp" file="/django/core/mail/backends/smtp.pyc"><doc><![CDATA[SMTP email backend class.]]></doc>
<depends name="socket"></depends>
<depends name="threading"></depends>
<depends name="smtplib"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_function name="sanitize_address" module="django.core.mail.message"></import_function>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<class name="EmailBackend"></class>
</package>
<package name="django.core.mail.backends.base" file="/django/core/mail/backends/base.pyc"><doc><![CDATA[Base email backend class.]]></doc>
<class name="BaseEmailBackend"></class>
</package>
<package name="django.core.mail.backends" file="/django/core/mail/backends/__init__.pyc"><doc></doc>
</package>
<package name="django.core.mail.backends.console" file="/django/core/mail/backends/console.pyc"><doc><![CDATA[
Email backend that writes messages to console instead of sending them.
]]></doc>
<depends name="sys"></depends>
<depends name="threading"></depends>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<class name="EmailBackend"></class>
</package>
<package name="django.core.mail.backends.filebased" file="/django/core/mail/backends/filebased.pyc"><doc><![CDATA[Email backend that writes messages to a file.]]></doc>
<depends name="datetime"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ConsoleEmailBackend" module="django.core.mail.backends.console"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<class name="EmailBackend"></class>
</package>
<package name="django.core.mail.backends.dummy" file="/django/core/mail/backends/dummy.pyc"><doc><![CDATA[
Dummy email backend that does nothing.
]]></doc>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<class name="EmailBackend"></class>
</package>
<package name="django.core.mail.backends.locmem" file="/django/core/mail/backends/locmem.pyc"><doc><![CDATA[
Backend for test environment.
]]></doc>
<import_class name="BaseEmailBackend" module="django.core.mail.backends.base"></import_class>
<class name="EmailBackend"></class>
</package>
<package name="django.core.mail.message" file="/django/core/mail/message.pyc"><doc></doc>
<depends name="email"></depends>
<depends name="email.generator"></depends>
<depends name="email.mime.text"></depends>
<depends name="email.mime.base"></depends>
<depends name="email.utils"></depends>
<depends name="email.mime.multipart"></depends>
<depends name="mimetypes"></depends>
<depends name="random"></depends>
<depends name="cStringIO"></depends>
<depends name="email.header"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<import_attribute name="Encoders" type="LazyImporter" module="email"></import_attribute>
<import_attribute name="Charset" type="LazyImporter" module="email"></import_attribute>
<import_attribute name="DNS_NAME" type="CachedDnsName" module="django.core.mail.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="formataddr" module="email.utils"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="formatdate" module="email.utils"></import_function>
<import_function name="getaddresses" module="email.utils"></import_function>
<import_function name="parseaddr" module="email.utils"></import_function>
<import_class name="Generator" module="email.generator"></import_class>
<import_class name="MIMEText" module="email.mime.text"></import_class>
<import_class name="MIMEBase" module="email.mime.base"></import_class>
<import_class name="MIMEMultipart" module="email.mime.multipart"></import_class>
<import_class name="Header" module="email.header"></import_class>
<attribute name="ADDRESS_HEADERS" type="set"><value><![CDATA[set(['resent-bcc', 'from', 'sender', 'cc', 'resent-cc', 'resent-to', 'bcc', 'resent-sender', 'to', 'resent-from', 'reply-to'])]]></value>
</attribute>
<attribute name="DEFAULT_ATTACHMENT_MIME_TYPE" type="str"><value><![CDATA[application/octet-stream]]></value>
</attribute>
<function name="forbid_multi_line_headers"><doc><![CDATA[Forbids multi-line headers, to prevent header injection.]]></doc>
<argument name="name"></argument>
<argument name="val"></argument>
<argument name="encoding"></argument>
</function>
<function name="make_msgid"><doc><![CDATA[Returns a string suitable for RFC 2822 compliant Message-ID, e.g:

    <20020201195627.33539.96671@nightshade.la.mastaler.com>

    Optional idstring if given is a string used to strengthen the
    uniqueness of the message id.
    ]]></doc>
<argument name="idstring" type="NoneType"><value></value>
</argument>
</function>
<function name="sanitize_address"><doc></doc>
<argument name="addr"></argument>
<argument name="encoding"></argument>
</function>
<class name="BadHeaderError"></class>
<class name="SafeMIMEMultipart"></class>
<class name="SafeMIMEText"></class>
<class name="EmailMultiAlternatives"></class>
<class name="EmailMessage"></class>
</package>
<package name="django.core.mail.utils" file="/django/core/mail/utils.pyc"><doc><![CDATA[
Email message and email sending related helper functions.
]]></doc>
<depends name="socket"></depends>
<attribute name="DNS_NAME" type="CachedDnsName"><value><![CDATA[phenom]]></value>
</attribute>
<class name="CachedDnsName"></class>
</package>
<package name="django.utils.translation" file="/django/utils/translation/__init__.pyc"><doc><![CDATA[
Internationalization support.
]]></doc>
<depends name="warnings"></depends>
<depends name="posixpath"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<attribute name="__all__" type="list"><value><![CDATA[['gettext', 'gettext_noop', 'gettext_lazy', 'ngettext', 'ngettext_lazy', 'string_concat', 'activate', 'deactivate', 'get_language', 'get_language_bidi', 'get_date_formats', 'get_partial_date_formats', 'check_for_language', 'to_locale', 'get_language_from_request', 'templatize', 'ugettext', 'ugettext_lazy', 'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy', 'deactivate_all', 'get_language_info']]]></value>
</attribute>
<attribute name="_trans" type="Trans"><value><![CDATA[<django.utils.translation.Trans object at 0x9af6b8c>]]></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="activate"><doc></doc>
<argument name="language"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc></doc>
</function>
<function name="ugettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="pgettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="check_for_language"><doc></doc>
<argument name="lang_code"></argument>
</function>
<function name="ungettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="deactivate"><doc></doc>
</function>
<function name="ngettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="templatize"><doc></doc>
<argument name="src"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="deactivate_all"><doc></doc>
</function>
<function name="to_locale"><doc></doc>
<argument name="language"></argument>
</function>
<function name="_string_concat" args="strings"><doc><![CDATA[
    Lazy variant of string concatenation, needed for translations that are
    constructed from multiple parts.
    ]]></doc>
</function>
<function name="string_concat" args="args" kwargs="kw"><doc><![CDATA[
    Lazy variant of string concatenation, needed for translations that are
    constructed from multiple parts.
    ]]></doc>
</function>
<function name="gettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="ungettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="ngettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="get_language_bidi"><doc></doc>
</function>
<function name="npgettext_lazy" args="args" kwargs="kw"><doc></doc>
</function>
<function name="get_language_info"><doc></doc>
<argument name="lang_code"></argument>
</function>
<function name="get_partial_date_formats"><doc></doc>
</function>
<function name="ugettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_date_formats"><doc></doc>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
</package>
<package name="django.utils.translation.trans_null" file="/django/utils/translation/trans_null.pyc"><doc></doc>
<depends name="warnings"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="TECHNICAL_ID_MAP" type="dict"><value><![CDATA[{'DATETIME_FORMAT': 'N j, Y, P', 'DATE_FORMAT': 'N j, Y', 'MONTH_DAY_FORMAT': 'F j', 'DATE_WITH_TIME_FULL': 'N j, Y, P', 'TIME_FORMAT': 'P', 'YEAR_MONTH_FORMAT': 'F Y'}]]></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="message"></argument>
</function>
<function name="check_for_language"><doc></doc>
<argument name="x"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc></doc>
</function>
<function name="activate"><doc></doc>
<argument name="x"></argument>
</function>
<function name="ungettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="deactivate"><doc></doc>
</function>
<function name="ngettext_lazy"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="deactivate_all"><doc></doc>
</function>
<function name="to_locale"><doc></doc>
<argument name="language"></argument>
</function>
<function name="gettext_lazy"><doc></doc>
<argument name="message"></argument>
</function>
<function name="ngettext"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="get_language_bidi"><doc></doc>
</function>
<function name="_"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_partial_date_formats"><doc></doc>
</function>
<function name="get_date_formats"><doc></doc>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
</package>
<package name="django.utils.translation.trans_real" file="/django/utils/translation/trans_real.pyc"><doc><![CDATA[Translation helper functions.]]></doc>
<depends name="locale"></depends>
<depends name="gettext"></depends>
<depends name="re"></depends>
<depends name="thread"></depends>
<depends name="warnings"></depends>
<depends name="sys"></depends>
<depends name="cStringIO"></depends>
<depends name="os"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="local" module="thread"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<attribute name="plural_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6fc09c0>]]></value>
</attribute>
<attribute name="inline_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b3bf28>]]></value>
</attribute>
<attribute name="accept_language_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b3cc20>]]></value>
</attribute>
<attribute name="endblock_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ab8590>]]></value>
</attribute>
<attribute name="CONTEXT_SEPARATOR" type="unicode"><value><![CDATA[\x04]]></value>
</attribute>
<attribute name="_default" type="NoneType"><value></value>
</attribute>
<attribute name="_accepted" type="dict"><value></value>
</attribute>
<attribute name="block_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b3fea0>]]></value>
</attribute>
<attribute name="constant_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6faa9d0>]]></value>
</attribute>
<attribute name="_active" type="_local"><value><![CDATA[<thread._local object at 0x9b08d7c>]]></value>
</attribute>
<attribute name="dot_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b01d20>]]></value>
</attribute>
<attribute name="_translations" type="dict"><value><![CDATA[{'ru-ru': <DjangoTranslation lang:ru-ru>, 'en-us': <DjangoTranslation lang:en-us>}]]></value>
</attribute>
<function name="gettext_noop"><doc><![CDATA[
    Marks strings for translation but doesn't translate them now. This can be
    used to store strings in global variables that should stay in the base
    language (because they might be used externally) and will be translated
    later.
    ]]></doc>
<argument name="message"></argument>
</function>
<function name="to_language"><doc><![CDATA[Turns a locale name (en_US) into a language name (en-us).]]></doc>
<argument name="locale"></argument>
</function>
<function name="ugettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="get_language_from_request"><doc><![CDATA[
    Analyzes the request to find what language the user wants the system to
    show. Only languages listed in settings.LANGUAGES are taken into account.
    If the user requests a sublanguage where we have a main language, we send
    out the main language.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="get_language"><doc><![CDATA[Returns the currently selected language.]]></doc>
</function>
<function name="activate"><doc><![CDATA[
    Fetches the translation object for a given tuple of application name and
    language and installs it as the current translation object for the current
    thread.
    ]]></doc>
<argument name="language"></argument>
</function>
<function name="all_locale_paths"><doc><![CDATA[
    Returns a list of paths to user-provides languages files.
    ]]></doc>
</function>
<function name="ungettext"><doc><![CDATA[
    Returns a unicode strings of the translation of either the singular or
    plural, based on the number.
    ]]></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="pgettext"><doc></doc>
<argument name="context"></argument>
<argument name="message"></argument>
</function>
<function name="templatize"><doc><![CDATA[
    Turns a Django template into something that is understood by xgettext. It
    does so by translating the Django translation tags into standard gettext
    function invocations.
    ]]></doc>
<argument name="src"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
</function>
<function name="gettext"><doc></doc>
<argument name="message"></argument>
</function>
<function name="check_for_language"><doc><![CDATA[
    Checks whether there is a global language file for the given language
    code. This is used to decide whether a user-provided language is
    available. This is only used for language codes from either the cookies or
    session and during format localization.
    ]]></doc>
<argument name="lang_code"></argument>
</function>
<function name="deactivate_all"><doc><![CDATA[
    Makes the active translation object a NullTranslations() instance. This is
    useful when we want delayed translations to appear as the original string
    for some reason.
    ]]></doc>
</function>
<function name="to_locale"><doc><![CDATA[
    Turns a language name (en-us) into a locale name (en_US). If 'to_lower' is
    True, the last component is lower-cased (en_us).
    ]]></doc>
<argument name="language"></argument>
<argument name="to_lower" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="blankout"><doc><![CDATA[
    Changes every non-whitespace character to the given char.
    Used in the templatize function.
    ]]></doc>
<argument name="src"></argument>
<argument name="char"></argument>
</function>
<function name="ngettext"><doc><![CDATA[
    Returns a UTF-8 bytestring of the translation of either the singular or
    plural, based on the number.
    ]]></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="catalog"><doc><![CDATA[
    Returns the current active catalog for further processing.
    This can be used if you need to modify the catalog or want to access the
    whole message catalog instead of just translating one string.
    ]]></doc>
</function>
<function name="get_language_bidi"><doc><![CDATA[
    Returns selected language's BiDi layout.

    * False = left-to-right layout
    * True = right-to-left layout
    ]]></doc>
</function>
<function name="translation"><doc><![CDATA[
    Returns a translation object.

    This translation object will be constructed out of multiple GNUTranslations
    objects by merging their catalogs. It will construct a object for the
    requested language and add a fallback to the default language, if it's
    different from the requested language.
    ]]></doc>
<argument name="language"></argument>
</function>
<function name="get_partial_date_formats"><doc><![CDATA[
    Checks whether translation files provide a translation for some technical
    message ID to store partial date formats. If it doesn't contain one, the
    formats provided in the settings will be used.
    ]]></doc>
</function>
<function name="do_translate"><doc><![CDATA[
    Translates 'message' using the given 'translation_function' name -- which
    will be either gettext or ugettext. It uses the current thread to find the
    translation object to use. If no current translation is activated, the
    message will be run through the default translation object.
    ]]></doc>
<argument name="message"></argument>
<argument name="translation_function"></argument>
</function>
<function name="get_date_formats"><doc><![CDATA[
    Checks whether translation files provide a translation for some technical
    message ID to store date and time formats. If it doesn't contain one, the
    formats provided in the settings will be used.
    ]]></doc>
</function>
<function name="parse_accept_lang_header"><doc><![CDATA[
    Parses the lang_string, which is the body of an HTTP Accept-Language
    header, and returns a list of (lang, q-value), ordered by 'q' values.

    Any format errors in lang_string results in an empty list being returned.
    ]]></doc>
<argument name="lang_string"></argument>
</function>
<function name="deactivate"><doc><![CDATA[
    Deinstalls the currently active translation object so that further _ calls
    will resolve against the default translation object, again.
    ]]></doc>
</function>
<function name="npgettext"><doc></doc>
<argument name="context"></argument>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
</function>
<function name="do_ntranslate"><doc></doc>
<argument name="singular"></argument>
<argument name="plural"></argument>
<argument name="number"></argument>
<argument name="translation_function"></argument>
</function>
<class name="DjangoTranslation"></class>
</package>
<package name="django.utils.termcolors" file="/django/utils/termcolors.pyc"><doc><![CDATA[
termcolors.py
]]></doc>
<attribute name="RESET" type="str"><value><![CDATA[0]]></value>
</attribute>
<attribute name="foreground" type="dict"><value><![CDATA[{'blue': '34', 'yellow': '33', 'green': '32', 'cyan': '36', 'black': '30', 'magenta': '35', 'white': '37', 'red': '31'}]]></value>
</attribute>
<attribute name="DEFAULT_PALETTE" type="str"><value><![CDATA[dark]]></value>
</attribute>
<attribute name="NOCOLOR_PALETTE" type="str"><value><![CDATA[nocolor]]></value>
</attribute>
<attribute name="DARK_PALETTE" type="str"><value><![CDATA[dark]]></value>
</attribute>
<attribute name="color_names" type="tuple"><value><![CDATA[('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')]]></value>
</attribute>
<attribute name="background" type="dict"><value><![CDATA[{'blue': '44', 'yellow': '43', 'green': '42', 'cyan': '46', 'black': '40', 'magenta': '45', 'white': '47', 'red': '41'}]]></value>
</attribute>
<attribute name="x" type="int"><value><![CDATA[7]]></value>
</attribute>
<attribute name="PALETTES" type="dict"><value><![CDATA[{'dark': {'NOTICE': {'fg': 'red'}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {'fg': 'green'}, 'ERROR': {'opts': ('bold',), 'fg': 'red'}, 'HTTP_NOT_MODIFIED': {'fg': 'cyan'}, 'HTTP_SERVER_ERROR': {'opts': ('bold',), 'fg': 'magenta'}, 'SQL_TABLE': {'opts': ('bold',)}, 'SQL_COLTYPE': {'fg': 'green'}, 'HTTP_NOT_FOUND': {'fg': 'yellow'}, 'HTTP_BAD_REQUEST': {'opts': ('bold',), 'fg': 'red'}, 'SQL_FIELD': {'opts': ('bold',), 'fg': 'green'}, 'HTTP_INFO': {'opts': ('bold',)}, 'SQL_KEYWORD': {'fg': 'yellow'}}, 'light': {'NOTICE': {'fg': 'red'}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {'opts': ('bold',), 'fg': 'green'}, 'ERROR': {'opts': ('bold',), 'fg': 'red'}, 'HTTP_NOT_MODIFIED': {'fg': 'green'}, 'HTTP_SERVER_ERROR': {'opts': ('bold',), 'fg': 'magenta'}, 'SQL_TABLE': {'opts': ('bold',)}, 'SQL_COLTYPE': {'fg': 'green'}, 'HTTP_NOT_FOUND': {'fg': 'red'}, 'HTTP_BAD_REQUEST': {'opts': ('bold',), 'fg': 'red'}, 'SQL_FIELD': {'opts': ('bold',), 'fg': 'green'}, 'HTTP_INFO': {'opts': ('bold',)}, 'SQL_KEYWORD': {'fg': 'blue'}}, 'nocolor': {'NOTICE': {}, 'HTTP_SUCCESS': {}, 'HTTP_REDIRECT': {}, 'ERROR': {}, 'HTTP_NOT_MODIFIED': {}, 'HTTP_SERVER_ERROR': {}, 'SQL_TABLE': {}, 'SQL_COLTYPE': {}, 'HTTP_NOT_FOUND': {}, 'HTTP_BAD_REQUEST': {}, 'SQL_FIELD': {}, 'HTTP_INFO': {}, 'SQL_KEYWORD': {}}}]]></value>
</attribute>
<attribute name="LIGHT_PALETTE" type="str"><value><![CDATA[light]]></value>
</attribute>
<attribute name="opt_dict" type="dict"><value><![CDATA[{'conceal': '8', 'reverse': '7', 'bold': '1', 'underscore': '4', 'blink': '5'}]]></value>
</attribute>
<function name="colorize" kwargs="kwargs"><doc><![CDATA[
    Returns your text, enclosed in ANSI graphics codes.

    Depends on the keyword arguments 'fg' and 'bg', and the contents of
    the opts tuple/list.

    Returns the RESET code if no parameters are given.

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold'
        'underscore'
        'blink'
        'reverse'
        'conceal'
        'noreset' - string will not be auto-terminated with the RESET code

    Examples:
        colorize('hello', fg='red', bg='blue', opts=('blink',))
        colorize()
        colorize('goodbye', opts=('underscore',))
        print colorize('first line', fg='red', opts=('noreset',))
        print 'this should be red too'
        print colorize('and so should this')
        print 'this should not be red'
    ]]></doc>
<argument name="text" type="str"><value></value>
</argument>
<argument name="opts" type="tuple"><value></value>
</argument>
</function>
<function name="parse_color_setting"><doc><![CDATA[Parse a DJANGO_COLORS environment variable to produce the system palette

    The general form of a pallete definition is:

        "palette;role=fg;role=fg/bg;role=fg,option,option;role=fg/bg,option,option"

    where:
        palette is a named palette; one of 'light', 'dark', or 'nocolor'.
        role is a named style used by Django
        fg is a background color.
        bg is a background color.
        option is a display options.

    Specifying a named palette is the same as manually specifying the individual
    definitions for each role. Any individual definitions following the pallete
    definition will augment the base palette definition.

    Valid roles:
        'error', 'notice', 'sql_field', 'sql_coltype', 'sql_keyword', 'sql_table',
        'http_info', 'http_success', 'http_redirect', 'http_bad_request',
        'http_not_found', 'http_server_error'

    Valid colors:
        'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'

    Valid options:
        'bold', 'underscore', 'blink', 'reverse', 'conceal'

    ]]></doc>
<argument name="config_string"></argument>
</function>
<function name="make_style" kwargs="kwargs"><doc><![CDATA[
    Returns a function with default parameters for colorize()

    Example:
        bold_red = make_style(opts=('bold',), fg='red')
        print bold_red('hello')
        KEYWORD = make_style(fg='yellow')
        COMMENT = make_style(fg='blue', opts=('bold',))
    ]]></doc>
<argument name="opts" type="tuple"><value></value>
</argument>
</function>
</package>
<package name="django.utils.dateformat" file="/django/utils/dateformat.pyc"><doc><![CDATA[
PHP date() style date formatting
See http://www.php.net/date for format strings

Usage:
>>> import datetime
>>> d = datetime.datetime.now()
>>> df = DateFormat(d)
>>> print df.format('jS F Y H:i')
7th October 2003 11:39
>>>
]]></doc>
<depends name="calendar"></depends>
<depends name="re"></depends>
<depends name="time"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="LocalTimezone" module="django.utils.tzinfo"></import_class>
<attribute name="MONTHS_ALT" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c00dec>, 2: <django.utils.functional.__proxy__ object at 0x9c00e0c>, 3: <django.utils.functional.__proxy__ object at 0x9c00e2c>, 4: <django.utils.functional.__proxy__ object at 0x9c00e4c>, 5: <django.utils.functional.__proxy__ object at 0x9c00e6c>, 6: <django.utils.functional.__proxy__ object at 0x9c00e8c>, 7: <django.utils.functional.__proxy__ object at 0x9c00eac>, 8: <django.utils.functional.__proxy__ object at 0x9c00ecc>, 9: <django.utils.functional.__proxy__ object at 0x9c00eec>, 10: <django.utils.functional.__proxy__ object at 0x9c00f0c>, 11: <django.utils.functional.__proxy__ object at 0x9c00f2c>, 12: <django.utils.functional.__proxy__ object at 0x9c00f4c>}]]></value>
</attribute>
<attribute name="MONTHS_3" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c002ec>, 2: <django.utils.functional.__proxy__ object at 0x9c0032c>, 3: <django.utils.functional.__proxy__ object at 0x9c0036c>, 4: <django.utils.functional.__proxy__ object at 0x9c003ac>, 5: <django.utils.functional.__proxy__ object at 0x9c003ec>, 6: <django.utils.functional.__proxy__ object at 0x9c0042c>, 7: <django.utils.functional.__proxy__ object at 0x9c0046c>, 8: <django.utils.functional.__proxy__ object at 0x9c004ac>, 9: <django.utils.functional.__proxy__ object at 0x9c004ec>, 10: <django.utils.functional.__proxy__ object at 0x9c0052c>, 11: <django.utils.functional.__proxy__ object at 0x9c0056c>, 12: <django.utils.functional.__proxy__ object at 0x9c005ac>}]]></value>
</attribute>
<attribute name="re_escaped" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bf5090>]]></value>
</attribute>
<attribute name="MONTHS_AP" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9c005cc>, 2: <django.utils.functional.__proxy__ object at 0x9c005ec>, 3: <django.utils.functional.__proxy__ object at 0x9c0060c>, 4: <django.utils.functional.__proxy__ object at 0x9c00ccc>, 5: <django.utils.functional.__proxy__ object at 0x9c00cec>, 6: <django.utils.functional.__proxy__ object at 0x9c00d0c>, 7: <django.utils.functional.__proxy__ object at 0x9c00d2c>, 8: <django.utils.functional.__proxy__ object at 0x9c00d4c>, 9: <django.utils.functional.__proxy__ object at 0x9c00d6c>, 10: <django.utils.functional.__proxy__ object at 0x9c00d8c>, 11: <django.utils.functional.__proxy__ object at 0x9c00dac>, 12: <django.utils.functional.__proxy__ object at 0x9c00dcc>}]]></value>
</attribute>
<attribute name="re_formatchars" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b20f20>]]></value>
</attribute>
<attribute name="MONTHS" type="dict"><value><![CDATA[{1: <django.utils.functional.__proxy__ object at 0x9bf8fcc>, 2: <django.utils.functional.__proxy__ object at 0x9c0002c>, 3: <django.utils.functional.__proxy__ object at 0x9c0006c>, 4: <django.utils.functional.__proxy__ object at 0x9c000ac>, 5: <django.utils.functional.__proxy__ object at 0x9c000ec>, 6: <django.utils.functional.__proxy__ object at 0x9c0012c>, 7: <django.utils.functional.__proxy__ object at 0x9c0016c>, 8: <django.utils.functional.__proxy__ object at 0x9c001ac>, 9: <django.utils.functional.__proxy__ object at 0x9c001ec>, 10: <django.utils.functional.__proxy__ object at 0x9c0022c>, 11: <django.utils.functional.__proxy__ object at 0x9c0026c>, 12: <django.utils.functional.__proxy__ object at 0x9c002ac>}]]></value>
</attribute>
<attribute name="WEEKDAYS_ABBR" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9bf8e0c>, 1: <django.utils.functional.__proxy__ object at 0x9bf8e4c>, 2: <django.utils.functional.__proxy__ object at 0x9bf8e8c>, 3: <django.utils.functional.__proxy__ object at 0x9bf8ecc>, 4: <django.utils.functional.__proxy__ object at 0x9bf8f0c>, 5: <django.utils.functional.__proxy__ object at 0x9bf8f4c>, 6: <django.utils.functional.__proxy__ object at 0x9bf8f8c>}]]></value>
</attribute>
<attribute name="WEEKDAYS" type="dict"><value><![CDATA[{0: <django.utils.functional.__proxy__ object at 0x9bf0f6c>, 1: <django.utils.functional.__proxy__ object at 0x9bf0f8c>, 2: <django.utils.functional.__proxy__ object at 0x9bf8ccc>, 3: <django.utils.functional.__proxy__ object at 0x9bf8d0c>, 4: <django.utils.functional.__proxy__ object at 0x9bf8d4c>, 5: <django.utils.functional.__proxy__ object at 0x9bf8d8c>, 6: <django.utils.functional.__proxy__ object at 0x9bf8dcc>}]]></value>
</attribute>
<function name="format"><doc><![CDATA[Convenience function]]></doc>
<argument name="value"></argument>
<argument name="format_string"></argument>
</function>
<function name="time_format"><doc><![CDATA[Convenience function]]></doc>
<argument name="value"></argument>
<argument name="format_string"></argument>
</function>
<class name="Formatter"></class>
<class name="DateFormat"></class>
<class name="TimeFormat"></class>
</package>
<package name="django.utils.http" file="/django/utils/http.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="calendar"></depends>
<depends name="re"></depends>
<depends name="urllib"></depends>
<depends name="email.utils"></depends>
<depends name="sys"></depends>
<depends name="urlparse"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="formatdate" module="email.utils"></import_function>
<attribute name="__Y2" type="str"><value><![CDATA[(?P<year>\d{2})]]></value>
</attribute>
<attribute name="ASCTIME_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bba688>]]></value>
</attribute>
<attribute name="RFC850_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9bba460>]]></value>
</attribute>
<attribute name="ETAG_MATCH" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b79430>]]></value>
</attribute>
<attribute name="__D2" type="str"><value><![CDATA[(?P<day>[ \d]\d)]]></value>
</attribute>
<attribute name="__M" type="str"><value><![CDATA[(?P<mon>\w{3})]]></value>
</attribute>
<attribute name="__D" type="str"><value><![CDATA[(?P<day>\d{2})]]></value>
</attribute>
<attribute name="__T" type="str"><value><![CDATA[(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})]]></value>
</attribute>
<attribute name="__Y" type="str"><value><![CDATA[(?P<year>\d{4})]]></value>
</attribute>
<attribute name="MONTHS" type="list"><value><![CDATA[['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']]]></value>
</attribute>
<attribute name="RFC1123_DATE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9a81140>]]></value>
</attribute>
<function name="urlencode"><doc><![CDATA[
    A version of Python's urllib.urlencode() function that can operate on
    unicode strings. The parameters are first case to UTF-8 encoded strings and
    then encoded as per normal.
    ]]></doc>
<argument name="query"></argument>
<argument name="doseq" type="int"><value></value>
</argument>
</function>
<function name="quote_etag"><doc><![CDATA[
    Wraps a string in double quotes escaping contents as necesary.
    ]]></doc>
<argument name="etag"></argument>
</function>
<function name="int_to_base36"><doc><![CDATA[
    Converts an integer to a base36 string
    ]]></doc>
<argument name="i"></argument>
</function>
<function name="http_date"><doc><![CDATA[
    Formats the time to match the RFC1123 date format as specified by HTTP
    RFC2616 section 3.3.1.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD Mon YYYY HH:MM:SS GMT'.
    ]]></doc>
<argument name="epoch_seconds" type="NoneType"><value></value>
</argument>
</function>
<function name="parse_http_date_safe"><doc><![CDATA[
    Same as parse_http_date, but returns None if the input is invalid.
    ]]></doc>
<argument name="date"></argument>
</function>
<function name="same_origin"><doc><![CDATA[
        Checks if two URLs are 'same-origin'
        ]]></doc>
<argument name="url1"></argument>
<argument name="url2"></argument>
</function>
<function name="cookie_date"><doc><![CDATA[
    Formats the time to ensure compatibility with Netscape's cookie standard.

    Accepts a floating point number expressed in seconds since the epoch, in
    UTC - such as that outputted by time.time(). If set to None, defaults to
    the current time.

    Outputs a string in the format 'Wdy, DD-Mon-YYYY HH:MM:SS GMT'.
    ]]></doc>
<argument name="epoch_seconds" type="NoneType"><value></value>
</argument>
</function>
<function name="parse_etags"><doc><![CDATA[
    Parses a string with one or several etags passed in If-None-Match and
    If-Match headers by the rules in RFC 2616. Returns a list of etags
    without surrounding double quotes (") and unescaped from \<CHAR>.
    ]]></doc>
<argument name="etag_str"></argument>
</function>
<function name="base36_to_int"><doc><![CDATA[
    Converts a base 36 string to an ``int``. Raises ``ValueError` if the
    input won't fit into an int.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="urlquote" args="args" kwargs="kwargs"><doc><![CDATA[
    A version of Python's urllib.quote() function that can operate on unicode
    strings. The url is first UTF-8 encoded before quoting. The returned string
    can safely be used as part of an argument to a subsequent iri_to_uri() call
    without double-quoting occurring.
    ]]></doc>
</function>
<function name="parse_http_date"><doc><![CDATA[
    Parses a date format as specified by HTTP RFC2616 section 3.3.1.

    The three formats allowed by the RFC are accepted, even if only the first
    one is still in widespread use.

    Returns an floating point number expressed in seconds since the epoch, in
    UTC.
    ]]></doc>
<argument name="date"></argument>
</function>
<function name="urlquote_plus" args="args" kwargs="kwargs"><doc><![CDATA[
    A version of Python's urllib.quote_plus() function that can operate on
    unicode strings. The url is first UTF-8 encoded before quoting. The
    returned string can safely be used as part of an argument to a subsequent
    iri_to_uri() call without double-quoting occurring.
    ]]></doc>
</function>
</package>
<package name="django.utils.decorators" file="/django/utils/decorators.pyc"><doc><![CDATA[Functions that help with dynamically creating decorators for views.]]></doc>
<depends name="functools"></depends>
<import_function name="wraps" module="functools"></import_function>
<import_function name="update_wrapper" module="functools"></import_function>
<attribute name="WRAPPER_ASSIGNMENTS" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</attribute>
<function name="available_attrs"><doc><![CDATA[
    Return the list of functools-wrappable attributes on a callable.
    This is required as a workaround for http://bugs.python.org/issue3445.
    ]]></doc>
<argument name="fn"></argument>
</function>
<function name="decorator_from_middleware"><doc><![CDATA[
    Given a middleware class (not an instance), returns a view decorator. This
    lets you use middleware functionality on a per-view basis. The middleware
    is created with no params passed.
    ]]></doc>
<argument name="middleware_class"></argument>
</function>
<function name="make_middleware_decorator"><doc></doc>
<argument name="middleware_class"></argument>
</function>
<function name="decorator_from_middleware_with_args"><doc><![CDATA[
    Like decorator_from_middleware, but returns a function
    that accepts the arguments to be passed to the middleware_class.
    Use like::

         cache_page = decorator_from_middleware_with_args(CacheMiddleware)
         # ...

         @cache_page(3600)
         def my_view(request):
             # ...
    ]]></doc>
<argument name="middleware_class"></argument>
</function>
<function name="method_decorator"><doc><![CDATA[
    Converts a function decorator into a method decorator
    ]]></doc>
<argument name="decorator"></argument>
</function>
<class name="classonlymethod"></class>
</package>
<package name="django.utils.tzinfo" file="/django/utils/tzinfo.pyc"><doc><![CDATA[Implementation of tzinfo classes for use with datetime.datetime.]]></doc>
<depends name="datetime"></depends>
<depends name="time"></depends>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="timedelta" module="datetime"></import_class>
<import_class name="tzinfo" module="datetime"></import_class>
<attribute name="DEFAULT_LOCALE_ENCODING" type="str"><value><![CDATA[UTF8]]></value>
</attribute>
<class name="FixedOffset"></class>
<class name="LocalTimezone"></class>
</package>
<package name="django.utils.text" file="/django/utils/text.pyc"><doc></doc>
<depends name="re"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="allow_lazy" module="django.utils.functional"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="_entity_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ca20d8>]]></value>
</attribute>
<attribute name="ustring_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9cb0f88>]]></value>
</attribute>
<attribute name="smart_split_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9cbc4b8>]]></value>
</attribute>
<attribute name="name2codepoint" type="dict"><value><![CDATA[{'aring': 229, 'gt': 62, 'sup': 8835, 'Ntilde': 209, 'upsih': 978, 'Yacute': 221, 'Atilde': 195, 'radic': 8730, 'otimes': 8855, 'aelig': 230, 'Psi': 936, 'Uuml': 220, 'Epsilon': 917, 'Icirc': 206, 'Eacute': 201, 'Lambda': 923, 'Prime': 8243, 'Kappa': 922, 'sigmaf': 962, 'lrm': 8206, 'cedil': 184, 'ensp': 8194, 'AElig': 198, 'prime': 8242, 'Tau': 932, 'lceil': 8968, 'dArr': 8659, 'ge': 8805, 'sdot': 8901, 'lfloor': 8970, 'lArr': 8656, 'Auml': 196, 'brvbar': 166, 'Otilde': 213, 'Theta': 920, 'Pi': 928, 'OElig': 338, 'Scaron': 352, 'egrave': 232, 'sub': 8834, 'iexcl': 161, 'ordf': 170, 'sum': 8721, 'ntilde': 241, 'atilde': 227, 'theta': 952, 'nsub': 8836, 'hArr': 8660, 'Oslash': 216, 'THORN': 222, 'yuml': 255, 'Mu': 924, 'thinsp': 8201, 'ecirc': 234, 'bdquo': 8222, 'Aring': 197, 'nabla': 8711, 'permil': 8240, 'Ugrave': 217, 'eta': 951, 'Agrave': 192, 'forall': 8704, 'eth': 240, 'rceil': 8969, 'iuml': 239, 'Egrave': 200, 'divide': 247, 'igrave': 236, 'otilde': 245, 'pound': 163, 'frasl': 8260, 'ETH': 208, 'lowast': 8727, 'chi': 967, 'Aacute': 193, 'cent': 162, 'Beta': 914, 'perp': 8869, 'there4': 8756, 'pi': 960, 'empty': 8709, 'euml': 235, 'notin': 8713, 'uuml': 252, 'icirc': 238, 'bull': 8226, 'upsilon': 965, 'Oacute': 211, 'kappa': 954, 'ccedil': 231, 'cap': 8745, 'mu': 956, 'deg': 176, 'tau': 964, 'emsp': 8195, 'hellip': 8230, 'ucirc': 251, 'ugrave': 249, 'cong': 8773, 'Iota': 921, 'quot': 34, 'rarr': 8594, 'Rho': 929, 'uacute': 250, 'acirc': 226, 'sim': 8764, 'phi': 966, 'diams': 9830, 'Euml': 203, 'Ccedil': 199, 'Eta': 919, 'Gamma': 915, 'euro': 8364, 'thetasym': 977, 'sect': 167, 'ldquo': 8220, 'hearts': 9829, 'oacute': 243, 'zwnj': 8204, 'yen': 165, 'ograve': 242, 'Chi': 935, 'trade': 8482, 'xi': 958, 'nbsp': 160, 'tilde': 732, 'lsaquo': 8249, 'oelig': 339, 'equiv': 8801, 'le': 8804, 'auml': 228, 'cup': 8746, 'Yuml': 376, 'lt': 60, 'Upsilon': 933, 'ndash': 8211, 'yacute': 253, 'real': 8476, 'psi': 968, 'rsaquo': 8250, 'darr': 8595, 'Alpha': 913, 'not': 172, 'amp': 38, 'oslash': 248, 'acute': 180, 'zwj': 8205, 'laquo': 171, 'rdquo': 8221, 'Igrave': 204, 'micro': 181, 'shy': 173, 'supe': 8839, 'szlig': 223, 'clubs': 9827, 'agrave': 224, 'Ocirc': 212, 'harr': 8596, 'larr': 8592, 'frac12': 189, 'prop': 8733, 'circ': 710, 'ocirc': 244, 'asymp': 8776, 'uml': 168, 'prod': 8719, 'reg': 174, 'rlm': 8207, 'infin': 8734, 'Sigma': 931, 'mdash': 8212, 'uarr': 8593, 'times': 215, 'rArr': 8658, 'or': 8744, 'gamma': 947, 'lambda': 955, 'rang': 9002, 'sup3': 179, 'dagger': 8224, 'Ouml': 214, 'image': 8465, 'alefsym': 8501, 'sube': 8838, 'alpha': 945, 'Nu': 925, 'plusmn': 177, 'sup1': 185, 'sup2': 178, 'frac34': 190, 'oline': 8254, 'Delta': 916, 'loz': 9674, 'iota': 953, 'iacute': 237, 'para': 182, 'ordm': 186, 'epsilon': 949, 'weierp': 8472, 'part': 8706, 'delta': 948, 'omicron': 959, 'copy': 169, 'Iuml': 207, 'Xi': 926, 'Dagger': 8225, 'Ograve': 210, 'Ucirc': 219, 'scaron': 353, 'lsquo': 8216, 'isin': 8712, 'Zeta': 918, 'minus': 8722, 'and': 8743, 'ang': 8736, 'curren': 164, 'int': 8747, 'rfloor': 8971, 'crarr': 8629, 'exist': 8707, 'oplus': 8853, 'Acirc': 194, 'piv': 982, 'ni': 8715, 'Phi': 934, 'Iacute': 205, 'Uacute': 218, 'Omicron': 927, 'ne': 8800, 'iquest': 191, 'sbquo': 8218, 'Ecirc': 202, 'zeta': 950, 'Omega': 937, 'nu': 957, 'macr': 175, 'frac14': 188, 'aacute': 225, 'uArr': 8657, 'beta': 946, 'fnof': 402, 'rho': 961, 'eacute': 233, 'omega': 969, 'middot': 183, 'lang': 9001, 'spades': 9824, 'rsquo': 8217, 'thorn': 254, 'ouml': 246, 'raquo': 187, 'sigma': 963}]]></value>
</attribute>
<function name="wrap" args="args" kwargs="kwargs"><doc><![CDATA[
    A word-wrap function that preserves existing line breaks and most spaces in
    the text. Expects that existing line breaks are posix newlines.
    ]]></doc>
</function>
<function name="recapitalize" args="args" kwargs="kwargs"><doc><![CDATA[Recapitalizes text, placing caps after end-of-sentence punctuation.]]></doc>
</function>
<function name="smart_split" args="args" kwargs="kwargs"><doc><![CDATA[
    Generator that splits a string by spaces, leaving quoted phrases together.
    Supports both single and double quotes, and supports escaping quotes with
    backslashes. In the output, strings will keep their initial and trailing
    quote marks and escaped quotes will remain escaped (the results can then
    be further processed with unescape_string_literal()).

    >>> list(smart_split(r'This is "a person\'s" test.'))
    [u'This', u'is', u'"a person\\\'s"', u'test.']
    >>> list(smart_split(r"Another 'person\'s' test."))
    [u'Another', u"'person\\'s'", u'test.']
    >>> list(smart_split(r'A "\"funky\" style" test.'))
    [u'A', u'"\\"funky\\" style"', u'test.']
    ]]></doc>
</function>
<function name="capfirst" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="unescape_entities" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="javascript_quote" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="compress_string"><doc></doc>
<argument name="s"></argument>
</function>
<function name="get_valid_filename" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the given string converted to a string that can be used for a clean
    filename. Specifically, leading and trailing spaces are removed; other
    spaces are converted to underscores; and anything that is not a unicode
    alphanumeric, dash, underscore, or dot, is removed.
    >>> get_valid_filename("john's portrait in 2004.jpg")
    u'johns_portrait_in_2004.jpg'
    ]]></doc>
</function>
<function name="get_text_list" args="args" kwargs="kwargs"><doc><![CDATA[
    >>> get_text_list(['a', 'b', 'c', 'd'])
    u'a, b, c or d'
    >>> get_text_list(['a', 'b', 'c'], 'and')
    u'a, b and c'
    >>> get_text_list(['a', 'b'], 'and')
    u'a and b'
    >>> get_text_list(['a'])
    u'a'
    >>> get_text_list([])
    u''
    ]]></doc>
</function>
<function name="_replace_entity"><doc></doc>
<argument name="match"></argument>
</function>
<function name="unescape_string_literal" args="args" kwargs="kwargs"><doc><![CDATA[
    Convert quoted string literals to unquoted strings with escaped quotes and
    backslashes unquoted::

        >>> unescape_string_literal('"abc"')
        'abc'
        >>> unescape_string_literal("'abc'")
        'abc'
        >>> unescape_string_literal('"a \"bc\""')
        'a "bc"'
        >>> unescape_string_literal("'\'ab\' c'")
        "'ab' c"
    ]]></doc>
</function>
<function name="truncate_html_words" args="args" kwargs="kwargs"><doc><![CDATA[Truncates HTML to a certain number of words (not counting tags and
    comments). Closes opened tags if they were correctly closed in the given
    html. Takes an optional argument of what should be used to notify that the
    string has been truncated, defaulting to ellipsis (...).

    Newlines in the HTML are preserved.
    ]]></doc>
</function>
<function name="normalize_newlines" args="args" kwargs="kwargs"><doc></doc>
</function>
<function name="phone2numeric" args="args" kwargs="kwargs"><doc><![CDATA[Converts a phone number with letters into its numeric equivalent.]]></doc>
</function>
<function name="truncate_words" args="args" kwargs="kwargs"><doc><![CDATA[Truncates a string after a certain number of words. Takes an optional
    argument of what should be used to notify that the string has been
    truncated, defaulting to ellipsis (...)

    Newlines in the string will be stripped.
    ]]></doc>
</function>
</package>
<package name="django.utils.version" file="/django/utils/version.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="os"></depends>
<function name="get_svn_revision"><doc><![CDATA[
    Returns the SVN revision in the form SVN-XXXX,
    where XXXX is the revision number.

    Returns SVN-unknown if anything goes wrong, such as an unexpected
    format of internal SVN files.

    If path is provided, it should be a directory whose SVN info you want to
    inspect. If it's not provided, this will use the root django/ package
    directory.
    ]]></doc>
<argument name="path" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.numberformat" file="/django/utils/numberformat.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<function name="format"><doc><![CDATA[
    Gets a number (as a number or string), and returns it as a string,
    using formats definied as arguments:

    * decimal_sep: Decimal separator symbol (for example ".")
    * decimal_pos: Number of decimal positions
    * grouping: Number of digits in every group limited by thousand separator
    * thousand_sep: Thousand separator symbol (for example ",")

    ]]></doc>
<argument name="number"></argument>
<argument name="decimal_sep"></argument>
<argument name="decimal_pos"></argument>
<argument name="grouping" type="int"><value></value>
</argument>
<argument name="thousand_sep" type="str"><value></value>
</argument>
</function>
</package>
<package name="django.utils.importlib" file="/django/utils/importlib.pyc"><doc></doc>
<depends name="sys"></depends>
<function name="_resolve_name"><doc><![CDATA[Return the absolute name of the module to be imported.]]></doc>
<argument name="name"></argument>
<argument name="package"></argument>
<argument name="level"></argument>
</function>
<function name="import_module"><doc><![CDATA[Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.

    ]]></doc>
<argument name="name"></argument>
<argument name="package" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.utils.datetime_safe" file="/django/utils/datetime_safe.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="datetime"></depends>
<depends name="time"></depends>
<import_class name="real_date" module="datetime"></import_class>
<import_class name="real_datetime" module="datetime"></import_class>
<attribute name="_illegal_formatting" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xb6f9ca70>]]></value>
</attribute>
<function name="new_date"><doc><![CDATA[Generate a safe date from a datetime.date object.]]></doc>
<argument name="d"></argument>
</function>
<function name="_findall"><doc></doc>
<argument name="text"></argument>
<argument name="substr"></argument>
</function>
<function name="strftime"><doc></doc>
<argument name="dt"></argument>
<argument name="fmt"></argument>
</function>
<function name="new_datetime"><doc><![CDATA[
    Generate a safe datetime from a datetime.date or datetime.datetime object.
    ]]></doc>
<argument name="d"></argument>
</function>
<class name="date"></class>
<class name="datetime"></class>
</package>
<package name="django.utils.functional" file="/django/utils/functional.pyc"><doc></doc>
<attribute name="WRAPPER_ASSIGNMENTS" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</attribute>
<attribute name="WRAPPER_UPDATES" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</attribute>
<function name="wraps"><doc><![CDATA[Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying curry() to
       update_wrapper().
    ]]></doc>
<argument name="wrapped"></argument>
<argument name="assigned" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</argument>
<argument name="updated" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</argument>
</function>
<function name="_lazy_proxy_unpickle" args="resultclasses"><doc></doc>
<argument name="func"></argument>
<argument name="args"></argument>
<argument name="kwargs"></argument>
</function>
<function name="update_wrapper"><doc><![CDATA[Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes off the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    ]]></doc>
<argument name="wrapper"></argument>
<argument name="wrapped"></argument>
<argument name="assigned" type="tuple"><value><![CDATA[('__module__', '__name__', '__doc__')]]></value>
</argument>
<argument name="updated" type="tuple"><value><![CDATA[('__dict__',)]]></value>
</argument>
</function>
<function name="lazy" args="resultclasses"><doc><![CDATA[
    Turns any callable into a lazy evaluated callable. You need to give result
    classes or types -- at least one is needed so that the automatic forcing of
    the lazy evaluation code is triggered. Results are not memoized; the
    function is evaluated on every access.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="allow_lazy" args="resultclasses"><doc><![CDATA[
    A decorator that allows a function to be called with one or more lazy
    arguments. If none of the args are lazy, the function is evaluated
    immediately, otherwise a __proxy__ is returned that will evaluate the
    function when needed.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="memoize"><doc><![CDATA[
    Wrap a function so that results for any argument tuple are stored in
    'cache'. Note that the args to the function must be usable as dictionary
    keys.

    Only the first num_args are considered when creating the key.
    ]]></doc>
<argument name="func"></argument>
<argument name="cache"></argument>
<argument name="num_args"></argument>
</function>
<function name="curry" args="args" kwargs="kwargs"><doc></doc>
<argument name="_curried_func"></argument>
</function>
<class name="SimpleLazyObject"></class>
<class name="Promise"></class>
<class name="LazyObject"></class>
</package>
<package name="django.utils.tree" file="/django/utils/tree.pyc"><doc><![CDATA[
A class for storing a tree graph. Primarily used for filter constructs in the
ORM.
]]></doc>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<class name="Node"></class>
</package>
<package name="django.utils.encoding" file="/django/utils/encoding.pyc"><doc></doc>
<depends name="decimal"></depends>
<depends name="urllib"></depends>
<depends name="locale"></depends>
<depends name="codecs"></depends>
<depends name="datetime"></depends>
<depends name="types"></depends>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="Promise" module="django.utils.functional"></import_class>
<attribute name="DEFAULT_LOCALE_ENCODING" type="str"><value><![CDATA[UTF8]]></value>
</attribute>
<function name="force_unicode"><doc><![CDATA[
    Similar to smart_unicode, except that lazy instances are resolved to
    strings, rather than kept as lazy objects.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<function name="is_protected_type"><doc><![CDATA[Determine if the object instance is of a protected type.

    Objects of protected types are preserved as-is when passed to
    force_unicode(strings_only=True).
    ]]></doc>
<argument name="obj"></argument>
</function>
<function name="smart_str"><doc><![CDATA[
    Returns a bytestring version of 's', encoded as specified in 'encoding'.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<function name="iri_to_uri"><doc><![CDATA[
    Convert an Internationalized Resource Identifier (IRI) portion to a URI
    portion that is suitable for inclusion in a URL.

    This is the algorithm from section 3.1 of RFC 3987.  However, since we are
    assuming input is either UTF-8 or unicode already, we can simplify things a
    little from the full method.

    Returns an ASCII string containing the encoded result.
    ]]></doc>
<argument name="iri"></argument>
</function>
<function name="filepath_to_uri"><doc><![CDATA[Convert an file system path to a URI portion that is suitable for
    inclusion in a URL.

    We are assuming input is either UTF-8 or unicode already.

    This method will encode certain chars that would normally be recognized as
    special chars for URIs.  Note that this method does not encode the '
    character, as it is a valid character within URIs.  See
    encodeURIComponent() JavaScript function for more details.

    Returns an ASCII string containing the encoded result.
    ]]></doc>
<argument name="path"></argument>
</function>
<function name="smart_unicode"><doc><![CDATA[
    Returns a unicode object representing 's'. Treats bytestrings using the
    'encoding' codec.

    If strings_only is True, don't convert (some) non-string-like objects.
    ]]></doc>
<argument name="s"></argument>
<argument name="encoding" type="str"><value><![CDATA[utf-8]]></value>
</argument>
<argument name="strings_only" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="errors" type="str"><value><![CDATA[strict]]></value>
</argument>
</function>
<class name="StrAndUnicode"></class>
<class name="DjangoUnicodeDecodeError"></class>
</package>
<package name="django.utils.datastructures" file="/django/utils/datastructures.pyc"><doc></doc>
<depends name="copy"></depends>
<depends name="__builtin__"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="GeneratorType" module="__builtin__"></import_class>
<class name="ImmutableList"></class>
<class name="MultiValueDictKeyError"></class>
<class name="DotExpandedDict"></class>
<class name="SortedDict"></class>
<class name="DictWrapper"></class>
<class name="MultiValueDict"></class>
<class name="MergeDict"></class>
</package>
<package name="django.conf" file="/django/conf/__init__.pyc"><doc><![CDATA[
Settings and configuration for Django.

Values will be read from the module specified by the DJANGO_SETTINGS_MODULE environment
variable, and then from django.conf.global_settings; see the global settings file for
a list of all possible variables.
]]></doc>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="time"></depends>
<depends name="os"></depends>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<attribute name="settings" type="LazySettings"><value><![CDATA[<django.conf.LazySettings object at 0xb6ff582c>]]></value>
</attribute>
<attribute name="ENVIRONMENT_VARIABLE" type="str"><value><![CDATA[DJANGO_SETTINGS_MODULE]]></value>
</attribute>
<class name="LazySettings"></class>
<class name="BaseSettings"></class>
<class name="UserSettingsHolder"></class>
<class name="Settings"></class>
</package>
<package name="django.conf.global_settings" file="/django/conf/global_settings.pyc"><doc></doc>
<import_function name="get_version" module="django"></import_function>
<attribute name="EMAIL_USE_TLS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LANGUAGE_CODE" type="str"><value><![CDATA[en-us]]></value>
</attribute>
<attribute name="LOGIN_URL" type="str"><value><![CDATA[/accounts/login/]]></value>
</attribute>
<attribute name="DEFAULT_CHARSET" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<attribute name="STATIC_ROOT" type="str"><value></value>
</attribute>
<attribute name="TEST_DATABASE_CHARSET" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST" type="str"><value><![CDATA[localhost]]></value>
</attribute>
<attribute name="MESSAGE_STORAGE" type="str"><value><![CDATA[django.contrib.messages.storage.user_messages.LegacyFallbackStorage]]></value>
</attribute>
<attribute name="DATABASE_HOST" type="str"><value></value>
</attribute>
<attribute name="EMAIL_SUBJECT_PREFIX" type="str"><value><![CDATA[[Django] ]]></value>
</attribute>
<attribute name="SEND_BROKEN_LINK_EMAILS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="URL_VALIDATOR_USER_AGENT" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</attribute>
<attribute name="TEST_RUNNER" type="str"><value><![CDATA[django.test.simple.DjangoTestSuiteRunner]]></value>
</attribute>
<attribute name="SESSION_COOKIE_DOMAIN" type="NoneType"><value></value>
</attribute>
<attribute name="STATIC_URL" type="NoneType"><value></value>
</attribute>
<attribute name="ADMIN_FOR" type="tuple"><value></value>
</attribute>
<attribute name="TIME_INPUT_FORMATS" type="tuple"><value><![CDATA[('%H:%M:%S', '%H:%M')]]></value>
</attribute>
<attribute name="DATABASES" type="dict"><value></value>
</attribute>
<attribute name="TEST_DATABASE_NAME" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_UPLOAD_PERMISSIONS" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_UPLOAD_HANDLERS" type="tuple"><value><![CDATA[('django.core.files.uploadhandler.MemoryFileUploadHandler', 'django.core.files.uploadhandler.TemporaryFileUploadHandler')]]></value>
</attribute>
<attribute name="DEFAULT_CONTENT_TYPE" type="str"><value><![CDATA[text/html]]></value>
</attribute>
<attribute name="APPEND_SLASH" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="FIRST_DAY_OF_WEEK" type="int"><value></value>
</attribute>
<attribute name="DATABASE_ROUTERS" type="list"><value></value>
</attribute>
<attribute name="YEAR_MONTH_FORMAT" type="str"><value><![CDATA[F Y]]></value>
</attribute>
<attribute name="STATICFILES_STORAGE" type="str"><value><![CDATA[django.contrib.staticfiles.storage.StaticFilesStorage]]></value>
</attribute>
<attribute name="CACHES" type="dict"><value><![CDATA[{'default': {'LOCATION': '', 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'}}]]></value>
</attribute>
<attribute name="SERVER_EMAIL" type="str"><value><![CDATA[root@localhost]]></value>
</attribute>
<attribute name="SESSION_COOKIE_PATH" type="str"><value><![CDATA[/]]></value>
</attribute>
<attribute name="IGNORABLE_404_ENDS" type="tuple"><value><![CDATA[('mail.pl', 'mailform.pl', 'mail.cgi', 'mailform.cgi', 'favicon.ico', '.php')]]></value>
</attribute>
<attribute name="MIDDLEWARE_CLASSES" type="tuple"><value><![CDATA[('django.middleware.common.CommonMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware')]]></value>
</attribute>
<attribute name="USE_I18N" type="bool"><value><![CDATA[True]]></value>
</attribute>
<attribute name="THOUSAND_SEPARATOR" type="str"><value><![CDATA[,]]></value>
</attribute>
<attribute name="SECRET_KEY" type="str"><value></value>
</attribute>
<attribute name="LANGUAGE_COOKIE_NAME" type="str"><value><![CDATA[django_language]]></value>
</attribute>
<attribute name="FILE_UPLOAD_TEMP_DIR" type="NoneType"><value></value>
</attribute>
<attribute name="TRANSACTIONS_MANAGED" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LOGGING_CONFIG" type="str"><value><![CDATA[django.utils.log.dictConfig]]></value>
</attribute>
<attribute name="TEMPLATE_LOADERS" type="tuple"><value><![CDATA[('django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader')]]></value>
</attribute>
<attribute name="TEMPLATE_DEBUG" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CSRF_COOKIE_NAME" type="str"><value><![CDATA[csrftoken]]></value>
</attribute>
<attribute name="TEST_DATABASE_COLLATION" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST_PASSWORD" type="str"><value></value>
</attribute>
<attribute name="USE_X_FORWARDED_HOST" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_COOKIE_SECURE" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CSRF_COOKIE_DOMAIN" type="NoneType"><value></value>
</attribute>
<attribute name="FILE_CHARSET" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<attribute name="DEBUG" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_FILE_PATH" type="NoneType"><value></value>
</attribute>
<attribute name="DEFAULT_FILE_STORAGE" type="str"><value><![CDATA[django.core.files.storage.FileSystemStorage]]></value>
</attribute>
<attribute name="INSTALLED_APPS" type="tuple"><value></value>
</attribute>
<attribute name="LANGUAGES" type="tuple"><value><![CDATA[(('ar', 'Arabic'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('bn', 'Bengali'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-gb', 'British English'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy-nl', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('id', 'Indonesian'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('nl', 'Dutch'), ('no', 'Norwegian'), ('nb', 'Norwegian Bokmal'), ('nn', 'Norwegian Nynorsk'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-tw', 'Traditional Chinese'))]]></value>
</attribute>
<attribute name="DATABASE_ENGINE" type="str"><value></value>
</attribute>
<attribute name="DATABASE_NAME" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_FIRST_FEW" type="int"><value></value>
</attribute>
<attribute name="PREPEND_WWW" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TEMPLATE_CONTEXT_PROCESSORS" type="tuple"><value><![CDATA[('django.contrib.auth.context_processors.auth', 'django.core.context_processors.debug', 'django.core.context_processors.i18n', 'django.core.context_processors.media', 'django.core.context_processors.static', 'django.contrib.messages.context_processors.messages')]]></value>
</attribute>
<attribute name="DATABASE_PORT" type="str"><value></value>
</attribute>
<attribute name="DEBUG_PROPAGATE_EXCEPTIONS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="MONTH_DAY_FORMAT" type="str"><value><![CDATA[F j]]></value>
</attribute>
<attribute name="MANAGERS" type="tuple"><value></value>
</attribute>
<attribute name="SESSION_EXPIRE_AT_BROWSER_CLOSE" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TIME_FORMAT" type="str"><value><![CDATA[P]]></value>
</attribute>
<attribute name="DATE_INPUT_FORMATS" type="tuple"><value><![CDATA[('%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y', '%b %d %Y', '%b %d, %Y', '%d %b %Y', '%d %b, %Y', '%B %d %Y', '%B %d, %Y', '%d %B %Y', '%d %B, %Y')]]></value>
</attribute>
<attribute name="AUTHENTICATION_BACKENDS" type="tuple"><value><![CDATA[('django.contrib.auth.backends.ModelBackend',)]]></value>
</attribute>
<attribute name="USE_THOUSAND_SEPARATOR" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="PASSWORD_RESET_TIMEOUT_DAYS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="SESSION_SAVE_EVERY_REQUEST" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="ADMIN_MEDIA_PREFIX" type="str"><value><![CDATA[/static/admin/]]></value>
</attribute>
<attribute name="NUMBER_GROUPING" type="int"><value></value>
</attribute>
<attribute name="SESSION_ENGINE" type="str"><value><![CDATA[django.contrib.sessions.backends.db]]></value>
</attribute>
<attribute name="CSRF_FAILURE_VIEW" type="str"><value><![CDATA[django.views.csrf.csrf_failure]]></value>
</attribute>
<attribute name="LOCALE_PATHS" type="tuple"><value></value>
</attribute>
<attribute name="LOGIN_REDIRECT_URL" type="str"><value><![CDATA[/accounts/profile/]]></value>
</attribute>
<attribute name="DECIMAL_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_KEY_PREFIX" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_SKETCHY_USERS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="TEMPLATE_STRING_IF_INVALID" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_ALLOW_PROFANITIES" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LOGOUT_URL" type="str"><value><![CDATA[/accounts/logout/]]></value>
</attribute>
<attribute name="USE_L10N" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="TEMPLATE_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="FIXTURE_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="FORCE_SCRIPT_NAME" type="NoneType"><value></value>
</attribute>
<attribute name="DATE_FORMAT" type="str"><value><![CDATA[N j, Y]]></value>
</attribute>
<attribute name="MEDIA_ROOT" type="str"><value></value>
</attribute>
<attribute name="ADMINS" type="tuple"><value></value>
</attribute>
<attribute name="FORMAT_MODULE_PATH" type="NoneType"><value></value>
</attribute>
<attribute name="DEFAULT_FROM_EMAIL" type="str"><value><![CDATA[webmaster@localhost]]></value>
</attribute>
<attribute name="STATICFILES_DIRS" type="tuple"><value></value>
</attribute>
<attribute name="MEDIA_URL" type="str"><value></value>
</attribute>
<attribute name="DATETIME_FORMAT" type="str"><value><![CDATA[N j, Y, P]]></value>
</attribute>
<attribute name="IGNORABLE_404_STARTS" type="tuple"><value><![CDATA[('/cgi-bin/', '/_vti_bin', '/_vti_inf')]]></value>
</attribute>
<attribute name="DISALLOWED_USER_AGENTS" type="tuple"><value></value>
</attribute>
<attribute name="ALLOWED_INCLUDE_ROOTS" type="tuple"><value></value>
</attribute>
<attribute name="LOGGING" type="dict"><value><![CDATA[{'loggers': {'django.request': {'level': 'ERROR', 'propagate': True, 'handlers': ['mail_admins']}}, 'version': 1, 'disable_existing_loggers': False, 'handlers': {'mail_admins': {'class': 'django.utils.log.AdminEmailHandler', 'level': 'ERROR'}}}]]></value>
</attribute>
<attribute name="SHORT_DATE_FORMAT" type="str"><value><![CDATA[m/d/Y]]></value>
</attribute>
<attribute name="DATABASE_USER" type="str"><value></value>
</attribute>
<attribute name="STATICFILES_FINDERS" type="tuple"><value><![CDATA[('django.contrib.staticfiles.finders.FileSystemFinder', 'django.contrib.staticfiles.finders.AppDirectoriesFinder')]]></value>
</attribute>
<attribute name="TIME_ZONE" type="str"><value><![CDATA[America/Chicago]]></value>
</attribute>
<attribute name="FILE_UPLOAD_MAX_MEMORY_SIZE" type="int"><value><![CDATA[2621440]]></value>
</attribute>
<attribute name="EMAIL_BACKEND" type="str"><value><![CDATA[django.core.mail.backends.smtp.EmailBackend]]></value>
</attribute>
<attribute name="DEFAULT_TABLESPACE" type="str"><value></value>
</attribute>
<attribute name="SESSION_COOKIE_HTTPONLY" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="SESSION_COOKIE_AGE" type="int"><value><![CDATA[1209600]]></value>
</attribute>
<attribute name="USE_ETAGS" type="bool"><value><![CDATA[False]]></value>
</attribute>
<attribute name="LANGUAGES_BIDI" type="tuple"><value><![CDATA[('he', 'ar', 'fa')]]></value>
</attribute>
<attribute name="DEFAULT_INDEX_TABLESPACE" type="str"><value></value>
</attribute>
<attribute name="INTERNAL_IPS" type="tuple"><value></value>
</attribute>
<attribute name="SESSION_COOKIE_NAME" type="str"><value><![CDATA[sessionid]]></value>
</attribute>
<attribute name="EMAIL_PORT" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="SHORT_DATETIME_FORMAT" type="str"><value><![CDATA[m/d/Y P]]></value>
</attribute>
<attribute name="ABSOLUTE_URL_OVERRIDES" type="dict"><value></value>
</attribute>
<attribute name="DATABASE_OPTIONS" type="dict"><value></value>
</attribute>
<attribute name="CACHE_MIDDLEWARE_SECONDS" type="int"><value><![CDATA[600]]></value>
</attribute>
<attribute name="BANNED_IPS" type="tuple"><value></value>
</attribute>
<attribute name="DATETIME_INPUT_FORMATS" type="tuple"><value><![CDATA[('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d', '%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M', '%m/%d/%Y', '%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M', '%m/%d/%y')]]></value>
</attribute>
<attribute name="DATABASE_PASSWORD" type="str"><value></value>
</attribute>
<attribute name="COMMENTS_MODERATORS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="COMMENTS_BANNED_USERS_GROUP" type="NoneType"><value></value>
</attribute>
<attribute name="EMAIL_HOST_USER" type="str"><value></value>
</attribute>
<attribute name="PROFANITIES_LIST" type="tuple"><value></value>
</attribute>
<function name="gettext_noop"><doc></doc>
<argument name="s"></argument>
</function>
</package>
<package name="django.forms" file="/django/forms/__init__.pyc"><doc><![CDATA[
Django validation and HTML form handling.

TODO:
    Default value for field
    Field labels
    Nestable Forms
    FatalValidationError -- short-circuits all other validators on a form
    ValidationWarning
    "This form field requires foo.js" and form.js_includes()
]]></doc>
<import_function name="save_instance" module="django.forms.models"></import_function>
<import_function name="fields_for_model" module="django.forms.models"></import_function>
<import_function name="model_to_dict" module="django.forms.models"></import_function>
<import_class name="DateField" module="django.forms.fields"></import_class>
<import_class name="ModelMultipleChoiceField" module="django.forms.models"></import_class>
<import_class name="IPAddressField" module="django.forms.fields"></import_class>
<import_class name="MultipleChoiceField" module="django.forms.fields"></import_class>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="TypedChoiceField" module="django.forms.fields"></import_class>
<import_class name="SlugField" module="django.forms.fields"></import_class>
<import_class name="FloatField" module="django.forms.fields"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="EmailField" module="django.forms.fields"></import_class>
<import_class name="TimeField" module="django.forms.fields"></import_class>
<import_class name="MultiWidget" module="django.forms.widgets"></import_class>
<import_class name="BaseForm" module="django.forms.forms"></import_class>
<import_class name="Widget" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="Form" module="django.forms.forms"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="MediaDefiningClass" module="django.forms.widgets"></import_class>
<import_class name="CheckboxInput" module="django.forms.widgets"></import_class>
<import_class name="CheckboxSelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="NullBooleanField" module="django.forms.fields"></import_class>
<import_class name="RadioSelect" module="django.forms.widgets"></import_class>
<import_class name="SplitDateTimeField" module="django.forms.fields"></import_class>
<import_class name="TimeInput" module="django.forms.widgets"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="DecimalField" module="django.forms.fields"></import_class>
<import_class name="MultiValueField" module="django.forms.fields"></import_class>
<import_class name="Textarea" module="django.forms.widgets"></import_class>
<import_class name="BaseModelForm" module="django.forms.models"></import_class>
<import_class name="ModelChoiceField" module="django.forms.models"></import_class>
<import_class name="ClearableFileInput" module="django.forms.widgets"></import_class>
<import_class name="BooleanField" module="django.forms.fields"></import_class>
<import_class name="FileInput" module="django.forms.widgets"></import_class>
<import_class name="PasswordInput" module="django.forms.widgets"></import_class>
<import_class name="ComboField" module="django.forms.fields"></import_class>
<import_class name="ChoiceField" module="django.forms.fields"></import_class>
<import_class name="FileField" module="django.forms.fields"></import_class>
<import_class name="CharField" module="django.forms.fields"></import_class>
<import_class name="RegexField" module="django.forms.fields"></import_class>
<import_class name="SplitDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="TypedMultipleChoiceField" module="django.forms.fields"></import_class>
<import_class name="NullBooleanSelect" module="django.forms.widgets"></import_class>
<import_class name="URLField" module="django.forms.fields"></import_class>
<import_class name="DateInput" module="django.forms.widgets"></import_class>
<import_class name="DateTimeInput" module="django.forms.widgets"></import_class>
<import_class name="IntegerField" module="django.forms.fields"></import_class>
<import_class name="FilePathField" module="django.forms.fields"></import_class>
<import_class name="DateTimeField" module="django.forms.fields"></import_class>
<import_class name="ModelForm" module="django.forms.models"></import_class>
<import_class name="Select" module="django.forms.widgets"></import_class>
<import_class name="ImageField" module="django.forms.fields"></import_class>
</package>
<package name="django.forms.formsets" file="/django/forms/formsets.pyc"><doc></doc>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="IntegerField" module="django.forms.fields"></import_class>
<import_class name="Form" module="django.forms.forms"></import_class>
<import_class name="BooleanField" module="django.forms.fields"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<attribute name="ORDERING_FIELD_NAME" type="str"><value><![CDATA[ORDER]]></value>
</attribute>
<attribute name="INITIAL_FORM_COUNT" type="str"><value><![CDATA[INITIAL_FORMS]]></value>
</attribute>
<attribute name="DELETION_FIELD_NAME" type="str"><value><![CDATA[DELETE]]></value>
</attribute>
<attribute name="MAX_NUM_FORM_COUNT" type="str"><value><![CDATA[MAX_NUM_FORMS]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('BaseFormSet', 'all_valid')]]></value>
</attribute>
<attribute name="TOTAL_FORM_COUNT" type="str"><value><![CDATA[TOTAL_FORMS]]></value>
</attribute>
<function name="formset_factory"><doc><![CDATA[Return a FormSet for the given form class.]]></doc>
<argument name="form"></argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.formsets.BaseFormSet'>]]></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
</function>
<function name="all_valid"><doc><![CDATA[Returns true if every formset in formsets is valid.]]></doc>
<argument name="formsets"></argument>
</function>
<class name="ManagementForm"></class>
<class name="BaseFormSet"></class>
</package>
<package name="django.forms.util" file="/django/forms/util.pyc"><doc></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<function name="flatatt"><doc><![CDATA[
    Convert a dictionary of attributes to a single string.
    The returned string will contain a leading space followed by key="value",
    XML-style pairs.  It is assumed that the keys do not need to be XML-escaped.
    If the passed dictionary is empty, then return an empty string.
    ]]></doc>
<argument name="attrs"></argument>
</function>
<class name="ErrorDict"></class>
<class name="ErrorList"></class>
</package>
<package name="django.forms.forms" file="/django/forms/forms.pyc"><doc><![CDATA[
Form classes
]]></doc>
<depends name="copy"></depends>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="media_property" module="django.forms.widgets"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="Media" module="django.forms.widgets"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="Textarea" module="django.forms.widgets"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="FileField" module="django.forms.fields"></import_class>
<import_class name="ErrorDict" module="django.forms.util"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('BaseForm', 'Form')]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<function name="get_declared_fields"><doc><![CDATA[
    Create a list of form field instances from the passed in 'attrs', plus any
    similar fields on the base classes (in 'bases'). This is used by both the
    Form and ModelForm metclasses.

    If 'with_base_fields' is True, all fields from the bases are used.
    Otherwise, only fields in the 'declared_fields' attribute on the bases are
    used. The distinction is useful in ModelForm subclassing.
    Also integrates any additional media definitions
    ]]></doc>
<argument name="bases"></argument>
<argument name="attrs"></argument>
<argument name="with_base_fields" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="pretty_name"><doc><![CDATA[Converts 'first_name' to 'First name']]></doc>
<argument name="name"></argument>
</function>
<class name="BoundField"></class>
<class name="BaseForm"></class>
<class name="DeclarativeFieldsMetaclass"></class>
<class name="Form"></class>
</package>
<package name="django.forms.widgets" file="/django/forms/widgets.pyc"><doc><![CDATA[
HTML Widget classes
]]></doc>
<depends name="datetime"></depends>
<depends name="itertools"></depends>
<depends name="urlparse"></depends>
<depends name="time"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="urljoin" module="urlparse"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="chain" module="itertools"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<import_class name="MergeDict" module="django.utils.datastructures"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput', 'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect', 'CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget')]]></value>
</attribute>
<attribute name="FILE_INPUT_CONTRADICTION" type="object"><value><![CDATA[<object object at 0xb74e9590>]]></value>
</attribute>
<attribute name="MEDIA_TYPES" type="tuple"><value><![CDATA[('css', 'js')]]></value>
</attribute>
<function name="media_property"><doc></doc>
<argument name="cls"></argument>
</function>
<class name="Media"></class>
<class name="HiddenInput"></class>
<class name="Input"></class>
<class name="MultiWidget"></class>
<class name="Widget"></class>
<class name="MultipleHiddenInput"></class>
<class name="MediaDefiningClass"></class>
<class name="CheckboxInput"></class>
<class name="RadioSelect"></class>
<class name="TimeInput"></class>
<class name="TextInput"></class>
<class name="RadioInput"></class>
<class name="Textarea"></class>
<class name="SplitHiddenDateTimeWidget"></class>
<class name="RadioFieldRenderer"></class>
<class name="ClearableFileInput"></class>
<class name="FileInput"></class>
<class name="PasswordInput"></class>
<class name="SplitDateTimeWidget"></class>
<class name="CheckboxSelectMultiple"></class>
<class name="SelectMultiple"></class>
<class name="NullBooleanSelect"></class>
<class name="DateInput"></class>
<class name="DateTimeInput"></class>
<class name="Select"></class>
</package>
<package name="django.forms.models" file="/django/forms/models.pyc"><doc><![CDATA[
Helper functions for creating Form classes from Django models
and database field objects.
]]></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="media_property" module="django.forms.widgets"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="get_declared_fields" module="django.forms.forms"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="formset_factory" module="django.forms.formsets"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="BaseForm" module="django.forms.forms"></import_class>
<import_class name="Field" module="django.forms.fields"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="BaseFormSet" module="django.forms.formsets"></import_class>
<import_class name="ChoiceField" module="django.forms.fields"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance', 'ModelChoiceField', 'ModelMultipleChoiceField')]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<function name="construct_instance"><doc><![CDATA[
    Constructs and returns a model instance from the bound ``form``'s
    ``cleaned_data``, but does not save the returned instance to the
    database.
    ]]></doc>
<argument name="form"></argument>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="_get_foreign_key"><doc><![CDATA[
    Finds and returns the ForeignKey from model to parent if there is one
    (returns None if can_fail is True and no such field exists). If fk_name is
    provided, assume it is the name of the ForeignKey field. Unles can_fail is
    True, an exception is raised if there is no ForeignKey from model to
    parent_model.
    ]]></doc>
<argument name="parent_model"></argument>
<argument name="model"></argument>
<argument name="fk_name" type="NoneType"><value></value>
</argument>
<argument name="can_fail" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="model_to_dict"><doc><![CDATA[
    Returns a dict containing the data in ``instance`` suitable for passing as
    a Form's ``initial`` keyword argument.

    ``fields`` is an optional list of field names. If provided, only the named
    fields will be included in the returned dict.

    ``exclude`` is an optional list of field names. If provided, the named
    fields will be excluded from the returned dict, even if they are listed in
    the ``fields`` argument.
    ]]></doc>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<function name="modelform_factory"><doc></doc>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="fields_for_model"><doc><![CDATA[
    Returns a ``SortedDict`` containing form fields for the given model.

    ``fields`` is an optional list of field names. If provided, only the named
    fields will be included in the returned fields.

    ``exclude`` is an optional list of field names. If provided, the named
    fields will be excluded from the returned fields, even if they are listed
    in the ``fields`` argument.
    ]]></doc>
<argument name="model"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="widgets" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="inlineformset_factory"><doc><![CDATA[
    Returns an ``InlineFormSet`` for the given kwargs.

    You must provide ``fk_name`` if ``model`` has more than one ``ForeignKey``
    to ``parent_model``.
    ]]></doc>
<argument name="parent_model"></argument>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.models.BaseInlineFormSet'>]]></value>
</argument>
<argument name="fk_name" type="NoneType"><value></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[3]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
</function>
<function name="save_instance"><doc><![CDATA[
    Saves bound Form ``form``'s cleaned_data into model instance ``instance``.

    If commit=True, then the changes to ``instance`` will be saved to the
    database. Returns ``instance``.

    If construct=False, assume ``instance`` has already been constructed and
    just needs to be saved.
    ]]></doc>
<argument name="form"></argument>
<argument name="instance"></argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="fail_message" type="str"><value><![CDATA[saved]]></value>
</argument>
<argument name="commit" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
<argument name="construct" type="bool"><value><![CDATA[True]]></value>
</argument>
</function>
<function name="modelformset_factory"><doc><![CDATA[
    Returns a FormSet class for the given Django model class.
    ]]></doc>
<argument name="model"></argument>
<argument name="form" type="ModelFormMetaclass"><value><![CDATA[<class 'django.forms.models.ModelForm'>]]></value>
</argument>
<argument name="formfield_callback" type="NoneType"><value></value>
</argument>
<argument name="formset" type="type"><value><![CDATA[<class 'django.forms.models.BaseModelFormSet'>]]></value>
</argument>
<argument name="extra" type="int"><value><![CDATA[1]]></value>
</argument>
<argument name="can_delete" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="can_order" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="max_num" type="NoneType"><value></value>
</argument>
<argument name="fields" type="NoneType"><value></value>
</argument>
<argument name="exclude" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelMultipleChoiceField"></class>
<class name="BaseModelFormSet"></class>
<class name="ModelChoiceIterator"></class>
<class name="ModelFormMetaclass"></class>
<class name="ModelFormOptions"></class>
<class name="InlineForeignKeyHiddenInput"></class>
<class name="BaseInlineFormSet"></class>
<class name="BaseModelForm"></class>
<class name="ModelChoiceField"></class>
<class name="InlineForeignKeyField"></class>
<class name="ModelForm"></class>
</package>
<package name="django.forms.fields" file="/django/forms/fields.pyc"><doc><![CDATA[
Field classes.
]]></doc>
<depends name="datetime"></depends>
<depends name="decimal"></depends>
<depends name="re"></depends>
<depends name="warnings"></depends>
<depends name="time"></depends>
<depends name="cStringIO"></depends>
<depends name="urlparse"></depends>
<depends name="os"></depends>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="DecimalException" module="decimal"></import_class>
<import_class name="HiddenInput" module="django.forms.widgets"></import_class>
<import_class name="SplitHiddenDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="MultipleHiddenInput" module="django.forms.widgets"></import_class>
<import_class name="CheckboxInput" module="django.forms.widgets"></import_class>
<import_class name="TimeInput" module="django.forms.widgets"></import_class>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="TextInput" module="django.forms.widgets"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ErrorList" module="django.forms.util"></import_class>
<import_class name="ClearableFileInput" module="django.forms.widgets"></import_class>
<import_class name="PasswordInput" module="django.forms.widgets"></import_class>
<import_class name="SplitDateTimeWidget" module="django.forms.widgets"></import_class>
<import_class name="SelectMultiple" module="django.forms.widgets"></import_class>
<import_class name="NullBooleanSelect" module="django.forms.widgets"></import_class>
<import_class name="DateInput" module="django.forms.widgets"></import_class>
<import_class name="DateTimeInput" module="django.forms.widgets"></import_class>
<import_class name="Select" module="django.forms.widgets"></import_class>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="FILE_INPUT_CONTRADICTION" type="object"><value><![CDATA[<object object at 0xb74e9590>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'TimeField', 'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField', 'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField')]]></value>
</attribute>
<function name="en_format"><doc><![CDATA[
    Helper function to stay backward compatible.
    ]]></doc>
<argument name="name"></argument>
</function>
<class name="DateField"></class>
<class name="FloatField"></class>
<class name="MultipleChoiceField"></class>
<class name="TypedChoiceField"></class>
<class name="SlugField"></class>
<class name="Field"></class>
<class name="EmailField"></class>
<class name="TimeField"></class>
<class name="IPAddressField"></class>
<class name="IntegerField"></class>
<class name="NullBooleanField"></class>
<class name="CharField"></class>
<class name="URLField"></class>
<class name="SplitDateTimeField"></class>
<class name="DecimalField"></class>
<class name="MultiValueField"></class>
<class name="DateTimeField"></class>
<class name="ChoiceField"></class>
<class name="FileField"></class>
<class name="RegexField"></class>
<class name="BooleanField"></class>
<class name="TypedMultipleChoiceField"></class>
<class name="ComboField"></class>
<class name="FilePathField"></class>
<class name="ImageField"></class>
</package>
<package name="django.core.validators" file="/django/core/validators.pyc"><doc></doc>
<depends name="platform"></depends>
<depends name="re"></depends>
<depends name="urllib2"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<attribute name="slug_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9c6cf00>]]></value>
</attribute>
<attribute name="validate_slug" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x9c2746c>]]></value>
</attribute>
<attribute name="validate_ipv4_address" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x9c65b2c>]]></value>
</attribute>
<attribute name="email_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ca76c8>]]></value>
</attribute>
<attribute name="EMPTY_VALUES" type="tuple"><value><![CDATA[(None, '', [], (), {})]]></value>
</attribute>
<attribute name="URL_VALIDATOR_USER_AGENT" type="str"><value><![CDATA[Django/1.3.1 (http://www.djangoproject.com)]]></value>
</attribute>
<attribute name="validate_email" type="EmailValidator"><value><![CDATA[<django.core.validators.EmailValidator object at 0x9c2742c>]]></value>
</attribute>
<attribute name="ipv4_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ca7fc0>]]></value>
</attribute>
<attribute name="validate_comma_separated_integer_list" type="RegexValidator"><value><![CDATA[<django.core.validators.RegexValidator object at 0x9c65f8c>]]></value>
</attribute>
<attribute name="comma_separated_int_list_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9c6f020>]]></value>
</attribute>
<function name="validate_integer"><doc></doc>
<argument name="value"></argument>
</function>
<class name="MaxLengthValidator"></class>
<class name="RegexValidator"></class>
<class name="URLValidator"></class>
<class name="EmailValidator"></class>
<class name="MaxValueValidator"></class>
<class name="BaseValidator"></class>
<class name="MinLengthValidator"></class>
<class name="MinValueValidator"></class>
</package>
<package name="django.dispatch" file="/django/dispatch/__init__.pyc"><doc><![CDATA[Multi-consumer multi-producer dispatching mechanism

Originally based on pydispatch (BSD) http://pypi.python.org/pypi/PyDispatcher/2.0.1
See license.txt for original license.

Heavily modified for Django's purposes.
]]></doc>
<import_function name="receiver" module="django.dispatch.dispatcher"></import_function>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.db" file="/django/db/__init__.pyc"><doc></doc>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="load_backend" module="django.db.utils"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<import_class name="ConnectionRouter" module="django.db.utils"></import_class>
<import_class name="ConnectionHandler" module="django.db.utils"></import_class>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('backend', 'connection', 'connections', 'router', 'DatabaseError', 'IntegrityError', 'DEFAULT_DB_ALIAS')]]></value>
</attribute>
<attribute name="database" type="dict"><value><![CDATA[{'ENGINE': 'django.db.backends.sqlite3', 'TEST_MIRROR': None, 'NAME': '/tmp/local2.db', 'TEST_CHARSET': None, 'TIME_ZONE': 'Europe/Moscow', 'TEST_COLLATION': None, 'PORT': '', 'HOST': '', 'USER': '', 'TEST_NAME': None, 'PASSWORD': '', 'OPTIONS': {}}]]></value>
</attribute>
<attribute name="alias" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="_rollback_on_exception" kwargs="kwargs"><doc></doc>
</function>
<function name="reset_queries" kwargs="kwargs"><doc></doc>
</function>
<function name="close_connection" kwargs="kwargs"><doc></doc>
</function>
</package>
<package name="django.db.backends" file="/django/db/backends/__init__.pyc"><doc></doc>
<depends name="thread"></depends>
<depends name="decimal"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="local" module="thread"></import_class>
<import_class name="TransactionManagementError" module="django.db.transaction"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="BaseDatabaseFeatures"></class>
<class name="BaseDatabaseOperations"></class>
<class name="BaseDatabaseIntrospection"></class>
<class name="BaseDatabaseValidation"></class>
<class name="BaseDatabaseWrapper"></class>
<class name="BaseDatabaseClient"></class>
</package>
<package name="django.db.backends.util" file="/django/db/backends/util.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_hashlib"></depends>
<depends name="logging"></depends>
<depends name="decimal"></depends>
<depends name="time"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="time" type="builtin_function_or_method" module="time"></import_attribute>
<import_function name="getLogger" module="logging"></import_function>
<function name="rev_typecast_boolean"><doc></doc>
<argument name="obj"></argument>
<argument name="d"></argument>
</function>
<function name="rev_typecast_decimal"><doc></doc>
<argument name="d"></argument>
</function>
<function name="format_number"><doc><![CDATA[
    Formats a number into a string with the requisite number of digits and
    decimal places.
    ]]></doc>
<argument name="value"></argument>
<argument name="max_digits"></argument>
<argument name="decimal_places"></argument>
</function>
<function name="typecast_timestamp"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_boolean"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_time"><doc></doc>
<argument name="s"></argument>
</function>
<function name="typecast_decimal"><doc></doc>
<argument name="s"></argument>
</function>
<function name="truncate_name"><doc><![CDATA[Shortens a string to a repeatable mangled version with the given length.
    ]]></doc>
<argument name="name"></argument>
<argument name="length" type="NoneType"><value></value>
</argument>
<argument name="hash_len" type="int"><value><![CDATA[4]]></value>
</argument>
</function>
<function name="typecast_date"><doc></doc>
<argument name="s"></argument>
</function>
<class name="CursorWrapper"></class>
<class name="CursorDebugWrapper"></class>
</package>
<package name="django.db.backends.sqlite3" file="/django/db/backends/sqlite3/__init__.pyc"><doc></doc>
</package>
<package name="django.db.backends.sqlite3.client" file="/django/db/backends/sqlite3/client.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_class name="BaseDatabaseClient" module="django.db.backends"></import_class>
<class name="DatabaseClient"></class>
</package>
<package name="django.db.backends.sqlite3.introspection" file="/django/db/backends/sqlite3/introspection.pyc"><doc></doc>
<depends name="re"></depends>
<import_class name="BaseDatabaseIntrospection" module="django.db.backends"></import_class>
<class name="DatabaseIntrospection"></class>
<class name="FlexibleFieldLookupDict"></class>
</package>
<package name="django.db.backends.sqlite3.creation" file="/django/db/backends/sqlite3/creation.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_class name="BaseDatabaseCreation" module="django.db.backends.creation"></import_class>
<class name="DatabaseCreation"></class>
</package>
<package name="django.db.backends.signals" file="/django/db/backends/signals.pyc"><doc></doc>
<import_attribute name="connection_created" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.db.backends.creation" file="/django/db/backends/creation.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="time"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<attribute name="TEST_DATABASE_PREFIX" type="str"><value><![CDATA[test_]]></value>
</attribute>
<class name="BaseDatabaseCreation"></class>
</package>
<package name="django.db.models" file="/django/db/models/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="functools"></depends>
<depends name="decimal"></depends>
<depends name="itertools"></depends>
<depends name="re"></depends>
<depends name="math"></depends>
<depends name="time"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="tee" type="builtin_function_or_method" module="itertools"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="register_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_app" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_apps" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="SET_DEFAULT" module="django.db.models.deletion"></import_function>
<import_function name="SET_NULL" module="django.db.models.deletion"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_function name="SET" module="django.db.models.deletion"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="PROTECT" module="django.db.models.deletion"></import_function>
<import_function name="DO_NOTHING" module="django.db.models.deletion"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="CASCADE" module="django.db.models.deletion"></import_function>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="ProtectedError" module="django.db.models.deletion"></import_class>
<import_class name="ManyToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="BigIntegerField" module="django.db.models.fields"></import_class>
<import_class name="StdDev" module="django.db.models.aggregates"></import_class>
<import_class name="IntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveIntegerField" module="django.db.models.fields"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="DictWrapper" module="django.utils.datastructures"></import_class>
<import_class name="Variance" module="django.db.models.aggregates"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="Sum" module="django.db.models.aggregates"></import_class>
<import_class name="NOT_PROVIDED" module="django.db.models.fields"></import_class>
<import_class name="TextField" module="django.db.models.fields"></import_class>
<import_class name="Aggregate" module="django.db.models.aggregates"></import_class>
<import_class name="BooleanField" module="django.db.models.fields"></import_class>
<import_class name="DecimalField" module="django.db.models.fields"></import_class>
<import_class name="DateTimeField" module="django.db.models.fields"></import_class>
<import_class name="OneToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="SmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="IPAddressField" module="django.db.models.fields"></import_class>
<import_class name="SlugField" module="django.db.models.fields"></import_class>
<import_class name="TimeField" module="django.db.models.fields"></import_class>
<import_class name="FileField" module="django.db.models.fields.files"></import_class>
<import_class name="CommaSeparatedIntegerField" module="django.db.models.fields"></import_class>
<import_class name="Count" module="django.db.models.aggregates"></import_class>
<import_class name="F" module="django.db.models.expressions"></import_class>
<import_class name="SubfieldBase" module="django.db.models.fields.subclassing"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="XMLField" module="django.db.models.fields"></import_class>
<import_class name="URLField" module="django.db.models.fields"></import_class>
<import_class name="Avg" module="django.db.models.aggregates"></import_class>
<import_class name="LegacyConnection" module="django.db.models.fields.subclassing"></import_class>
<import_class name="ImageField" module="django.db.models.fields.files"></import_class>
<import_class name="Min" module="django.db.models.aggregates"></import_class>
<import_class name="FloatField" module="django.db.models.fields"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="ManyToManyField" module="django.db.models.fields.related"></import_class>
<import_class name="EmailField" module="django.db.models.fields"></import_class>
<import_class name="OneToOneField" module="django.db.models.fields.related"></import_class>
<import_class name="ForeignKey" module="django.db.models.fields.related"></import_class>
<import_class name="Max" module="django.db.models.aggregates"></import_class>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="NullBooleanField" module="django.db.models.fields"></import_class>
<import_class name="CharField" module="django.db.models.fields"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="PositiveSmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="Model" module="django.db.models.base"></import_class>
<import_class name="Manager" module="django.db.models.manager"></import_class>
<import_class name="FilePathField" module="django.db.models.fields"></import_class>
<attribute name="BLANK_CHOICE_NONE" type="list"><value><![CDATA[[('', 'None')]]]></value>
</attribute>
<attribute name="ADD" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="ansi_date_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9c0daa0>]]></value>
</attribute>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="BOTH" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="CHANGE" type="int"><value><![CDATA[2]]></value>
</attribute>
<function name="permalink"><doc><![CDATA[
    Decorator that calls urlresolvers.reverse() to return a URL using
    parameters returned by the decorated function "func".

    "func" should be a function that returns a tuple in one of the
    following formats:
        (viewname, viewargs)
        (viewname, viewargs, viewkwargs)
    ]]></doc>
<argument name="func"></argument>
</function>
</package>
<package name="django.db.models.related" file="/django/db/models/related.pyc"><doc></doc>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<class name="RelatedObject"></class>
<class name="BoundRelatedObject"></class>
</package>
<package name="django.db.models.sql" file="/django/db/models/sql/__init__.pyc"><doc></doc>
<import_class name="RawQuery" module="django.db.models.sql.query"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="UpdateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="DeleteQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="DateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="AggregateQuery" module="django.db.models.sql.subqueries"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="InsertQuery" module="django.db.models.sql.subqueries"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['Query', 'AND', 'OR', 'EmptyResultSet']]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
</package>
<package name="django.db.models.sql.compiler" file="/django/db/models/sql/compiler.pyc"><doc></doc>
<depends name="re"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_function name="truncate_name" module="django.db.backends.util"></import_function>
<import_function name="get_order_dir" module="django.db.models.sql.query"></import_function>
<import_function name="get_proxied_model" module="django.db.models.sql.query"></import_function>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b91bf0>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<function name="empty_iter"><doc><![CDATA[
    Returns an iterator containing no results.
    ]]></doc>
</function>
<function name="order_modified_iter"><doc><![CDATA[
    Yields blocks of rows from a cursor. We use this iterator in the special
    case when extra output columns have been added to support ordering
    requirements. We must trim those extra columns before anything else can use
    the results, since they're only needed to make the SQL valid.
    ]]></doc>
<argument name="cursor"></argument>
<argument name="trim"></argument>
<argument name="sentinel"></argument>
</function>
<class name="SQLDeleteCompiler"></class>
<class name="SQLInsertCompiler"></class>
<class name="SQLCompiler"></class>
<class name="SQLDateCompiler"></class>
<class name="SQLAggregateCompiler"></class>
<class name="SQLUpdateCompiler"></class>
</package>
<package name="django.db.models.sql.where" file="/django/db/models/sql/where.pyc"><doc><![CDATA[
Code to manage the creation and SQL rendering of 'where' constraints.
]]></doc>
<depends name="itertools"></depends>
<depends name="datetime"></depends>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="repeat" module="itertools"></import_class>
<import_class name="FullResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
<class name="WhereNode"></class>
<class name="EmptyShortCircuit"></class>
<class name="Constraint"></class>
<class name="EverythingNode"></class>
<class name="ExtraWhere"></class>
<class name="NothingNode"></class>
</package>
<package name="django.db.models.sql.constants" file="/django/db/models/sql/constants.pyc"><doc></doc>
<depends name="re"></depends>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b91bf0>]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
</package>
<package name="django.db.models.sql.aggregates" file="/django/db/models/sql/aggregates.pyc"><doc><![CDATA[
Classes to represent the default SQL aggregate functions
]]></doc>
<attribute name="ordinal_aggregate_field" type="AggregateField"><value><![CDATA[<django.db.models.sql.aggregates.AggregateField object at 0x9dc0aac>]]></value>
</attribute>
<attribute name="computed_aggregate_field" type="AggregateField"><value><![CDATA[<django.db.models.sql.aggregates.AggregateField object at 0x9dc0aec>]]></value>
</attribute>
<class name="Count"></class>
<class name="AggregateField"></class>
<class name="Variance"></class>
<class name="Sum"></class>
<class name="Min"></class>
<class name="StdDev"></class>
<class name="Max"></class>
<class name="Aggregate"></class>
<class name="Avg"></class>
</package>
<package name="django.db.models.sql.expressions" file="/django/db/models/sql/expressions.pyc"><doc></doc>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<class name="SQLEvaluator"></class>
</package>
<package name="django.db.models.sql.subqueries" file="/django/db/models/sql/subqueries.pyc"><doc><![CDATA[
Query subclasses which provide extra functionality beyond simple data retrieval.
]]></doc>
<depends name="re"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Date" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Constraint" module="django.db.models.sql.where"></import_class>
<import_class name="Query" module="django.db.models.sql.query"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['DeleteQuery', 'UpdateQuery', 'InsertQuery', 'DateQuery', 'AggregateQuery']]]></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b91bf0>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<class name="UpdateQuery"></class>
<class name="DeleteQuery"></class>
<class name="DateQuery"></class>
<class name="InsertQuery"></class>
<class name="AggregateQuery"></class>
</package>
<package name="django.db.models.sql.query" file="/django/db/models/sql/query.pyc"><doc><![CDATA[
Create SQL statements for QuerySets.

The code in here encapsulates all of the SQL construction so that QuerySets
themselves do not have to (and could be backed by things other than SQL
databases). The abstraction barrier only works one way: this module has to know
all about the internals of models in order to get the information it needs.
]]></doc>
<depends name="copy"></depends>
<depends name="re"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="SQLEvaluator" module="django.db.models.sql.expressions"></import_class>
<import_class name="Empty" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Node" module="django.utils.tree"></import_class>
<import_class name="ExtraWhere" module="django.db.models.sql.where"></import_class>
<import_class name="Constraint" module="django.db.models.sql.where"></import_class>
<import_class name="EverythingNode" module="django.db.models.sql.where"></import_class>
<import_class name="MultiJoin" module="django.db.models.sql.datastructures"></import_class>
<import_class name="WhereNode" module="django.db.models.sql.where"></import_class>
<import_class name="InvalidQuery" module="django.db.models.query_utils"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="MULTI" type="str"><value><![CDATA[multi]]></value>
</attribute>
<attribute name="ORDER_DIR" type="dict"><value><![CDATA[{'ASC': ('ASC', 'DESC'), 'DESC': ('DESC', 'ASC')}]]></value>
</attribute>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="SINGLE" type="str"><value><![CDATA[single]]></value>
</attribute>
<attribute name="TABLE_NAME" type="int"><value></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['Query', 'RawQuery']]]></value>
</attribute>
<attribute name="NULLABLE" type="int"><value><![CDATA[6]]></value>
</attribute>
<attribute name="LHS_JOIN_COL" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="ORDER_PATTERN" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b91bf0>]]></value>
</attribute>
<attribute name="RHS_ALIAS" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="AND" type="str"><value><![CDATA[AND]]></value>
</attribute>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="LHS_ALIAS" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="JOIN_TYPE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="RHS_JOIN_COL" type="int"><value><![CDATA[5]]></value>
</attribute>
<attribute name="x" type="str"><value><![CDATA[iregex]]></value>
</attribute>
<attribute name="OR" type="str"><value><![CDATA[OR]]></value>
</attribute>
<function name="setup_join_cache" kwargs="kwargs"><doc><![CDATA[
    The information needed to join between model fields is something that is
    invariant over the life of the model, so we cache it in the model's Options
    class, rather than recomputing it all the time.

    This method initialises the (empty) cache when the model is created.
    ]]></doc>
<argument name="sender"></argument>
</function>
<function name="get_order_dir"><doc><![CDATA[
    Returns the field name and direction for an order specification. For
    example, '-foo' is returned as ('foo', 'DESC').

    The 'default' param is used to indicate which way no prefix (or a '+'
    prefix) should sort. The '-' prefix always sorts the opposite way.
    ]]></doc>
<argument name="field"></argument>
<argument name="default" type="str"><value><![CDATA[ASC]]></value>
</argument>
</function>
<function name="get_proxied_model"><doc></doc>
<argument name="opts"></argument>
</function>
<function name="add_to_dict"><doc><![CDATA[
    A helper function to add "value" to the set of values for "key", whether or
    not "key" already exists.
    ]]></doc>
<argument name="data"></argument>
<argument name="key"></argument>
<argument name="value"></argument>
</function>
<class name="RawQuery"></class>
<class name="Query"></class>
</package>
<package name="django.db.models.sql.datastructures" file="/django/db/models/sql/datastructures.pyc"><doc><![CDATA[
Useful auxilliary data structures for query construction. Not useful outside
the SQL domain.
]]></doc>
<class name="RawValue"></class>
<class name="FullResultSet"></class>
<class name="EmptyResultSet"></class>
<class name="Date"></class>
<class name="MultiJoin"></class>
<class name="Empty"></class>
</package>
<package name="django.db.models.fields.subclassing" file="/django/db/models/fields/subclassing.pyc"><doc><![CDATA[
Convenience routines for creating non-trivial Field subclasses, as well as
backwards compatibility utilities.

Add SubfieldBase as the __metaclass__ for your Field subclass, implement
to_python() and the other necessary methods and everything will work seamlessly.
]]></doc>
<depends name="_warnings"></depends>
<depends name="inspect"></depends>
<import_attribute name="warn" type="builtin_function_or_method" module="_warnings"></import_attribute>
<import_function name="getargspec" module="inspect"></import_function>
<function name="call_with_connection_and_prepared"><doc></doc>
<argument name="func"></argument>
</function>
<function name="call_with_connection"><doc></doc>
<argument name="func"></argument>
</function>
<function name="make_contrib"><doc><![CDATA[
    Returns a suitable contribute_to_class() method for the Field subclass.

    If 'func' is passed in, it is the existing contribute_to_class() method on
    the subclass and it is called before anything else. It is assumed in this
    case that the existing contribute_to_class() calls all the necessary
    superclass methods.
    ]]></doc>
<argument name="superclass"></argument>
<argument name="func" type="NoneType"><value></value>
</argument>
</function>
<class name="LegacyConnection"></class>
<class name="Creator"></class>
<class name="SubfieldBase"></class>
</package>
<package name="django.db.models.fields.files" file="/django/db/models/fields/files.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="os"></depends>
<import_attribute name="cache" type="AppCache" module="django.db.models.loading"></import_attribute>
<import_attribute name="default_storage" type="DefaultStorage" module="django.core.files.storage"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="get_image_dimensions" module="django.core.files.images"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="ContentFile" module="django.core.files.base"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="UploadedFile" module="django.core.files.uploadedfile"></import_class>
<import_class name="ImageFile" module="django.core.files.images"></import_class>
<import_class name="File" module="django.core.files.base"></import_class>
<class name="FieldFile"></class>
<class name="FileDescriptor"></class>
<class name="ImageFileDescriptor"></class>
<class name="FileField"></class>
<class name="ImageFieldFile"></class>
<class name="ImageField"></class>
</package>
<package name="django.core.files.images" file="/django/core/files/images.pyc"><doc><![CDATA[
Utility functions for handling images.

Requires PIL, as you might imagine.
]]></doc>
<import_class name="File" module="django.core.files.base"></import_class>
<function name="get_image_dimensions"><doc><![CDATA[
    Returns the (width, height) of an image, given an open file or a path.  Set
    'close' to True to close the file at the end if it is initially in an open
    state.
    ]]></doc>
<argument name="file_or_path"></argument>
<argument name="close" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="ImageFile"></class>
</package>
<package name="django.core.files.storage" file="/django/core/files/storage.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="errno"></depends>
<depends name="urlparse"></depends>
<depends name="itertools"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="filepath_to_uri" module="django.utils.encoding"></import_function>
<import_function name="file_move_safe" module="django.core.files.move"></import_function>
<import_function name="get_valid_filename" module="django.utils.text"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="datetime" module="datetime"></import_class>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<import_class name="SuspiciousOperation" module="django.core.exceptions"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="File" module="django.core.files.base"></import_class>
<attribute name="__all__" type="tuple"><value><![CDATA[('Storage', 'FileSystemStorage', 'DefaultStorage', 'default_storage')]]></value>
</attribute>
<attribute name="default_storage" type="DefaultStorage"><value><![CDATA[<django.core.files.storage.DefaultStorage object at 0x9e0c1cc>]]></value>
</attribute>
<function name="get_storage_class"><doc></doc>
<argument name="import_path" type="NoneType"><value></value>
</argument>
</function>
<class name="DefaultStorage"></class>
<class name="FileSystemStorage"></class>
<class name="Storage"></class>
</package>
<package name="django.core.files.move" file="/django/core/files/move.pyc"><doc><![CDATA[
Move a file in the safest way possible::

    >>> from django.core.files.move import file_move_safe
    >>> file_move_safe("/tmp/old_file", "/tmp/new_file")
]]></doc>
<depends name="shutil"></depends>
<depends name="os"></depends>
<import_function name="copystat" module="shutil"></import_function>
<attribute name="__all__" type="list"><value><![CDATA[['file_move_safe']]]></value>
</attribute>
<function name="file_move_safe"><doc><![CDATA[
    Moves a file from one location to another in the safest way possible.

    First, tries ``os.rename``, which is simple but will break across filesystems.
    If that fails, streams manually from one file to another in pure Python.

    If the destination file exists and ``allow_overwrite`` is ``False``, this
    function will throw an ``IOError``.
    ]]></doc>
<argument name="old_file_name"></argument>
<argument name="new_file_name"></argument>
<argument name="chunk_size" type="int"><value><![CDATA[65536]]></value>
</argument>
<argument name="allow_overwrite" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="_samefile"><doc></doc>
<argument name="src"></argument>
<argument name="dst"></argument>
</function>
</package>
<package name="django.core.files.locks" file="/django/core/files/locks.pyc"><doc><![CDATA[
Portable file locking utilities.

Based partially on example by Jonathan Feignberg <jdf@pobox.com> in the Python
Cookbook, licensed under the Python Software License.

    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203

Example Usage::

    >>> from django.core.files import locks
    >>> f = open('./file', 'wb')
    >>> locks.lock(f, locks.LOCK_EX)
    >>> f.write('Django')
    >>> f.close()
]]></doc>
<depends name="fcntl"></depends>
<attribute name="__all__" type="tuple"><value><![CDATA[('LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock', 'unlock')]]></value>
</attribute>
<attribute name="system_type" type="str"><value><![CDATA[posix]]></value>
</attribute>
<attribute name="LOCK_NB" type="int"><value><![CDATA[4]]></value>
</attribute>
<attribute name="LOCK_EX" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="LOCK_SH" type="int"><value><![CDATA[1]]></value>
</attribute>
<function name="lock"><doc></doc>
<argument name="file"></argument>
<argument name="flags"></argument>
</function>
<function name="unlock"><doc></doc>
<argument name="file"></argument>
</function>
<function name="fd"><doc><![CDATA[Get a filedescriptor from something which could be a file or an fd.]]></doc>
<argument name="f"></argument>
</function>
</package>
<package name="django.db.models.signals" file="/django/db/models/signals.pyc"><doc></doc>
<import_attribute name="m2m_changed" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_syncdb" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_delete" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_save" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="pre_init" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="class_prepared" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_save" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_init" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="post_delete" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.db.models.options" file="/django/db/models/options.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="_bisect"></depends>
<import_attribute name="app_cache_ready" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="bisect" type="builtin_function_or_method" module="_bisect"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="activate" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="deactivate_all" module="django.utils.translation"></import_function>
<import_function name="get_language" module="django.utils.translation"></import_function>
<import_function name="string_concat" module="django.utils.translation"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="OrderWrt" module="django.db.models.fields.proxy"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="DEFAULT_NAMES" type="tuple"><value><![CDATA[('verbose_name', 'verbose_name_plural', 'db_table', 'ordering', 'unique_together', 'permissions', 'get_latest_by', 'order_with_respect_to', 'app_label', 'db_tablespace', 'abstract', 'managed', 'proxy', 'auto_created')]]></value>
</attribute>
<function name="get_verbose_name"><doc></doc>
<argument name="class_name"></argument>
</function>
<class name="Options"></class>
</package>
<package name="django.db.models.fields.proxy" file="/django/db/models/fields/proxy.pyc"><doc><![CDATA[
Field-like classes that aren't really fields. It's easier to use objects that
have the same attributes as fields sometimes (avoids a lot of special casing).
]]></doc>
<class name="OrderWrt"></class>
</package>
<package name="django.db.models.base" file="/django/db/models/base.pyc"><doc></doc>
<depends name="itertools"></depends>
<depends name="sys"></depends>
<depends name="types"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="register_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="add_lazy_relation" module="django.db.models.fields.related"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_class name="izip" module="itertools"></import_class>
<import_class name="ManyToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="DeferredAttribute" module="django.db.models.query_utils"></import_class>
<import_class name="OneToOneField" module="django.db.models.fields.related"></import_class>
<import_class name="MultipleObjectsReturned" module="django.core.exceptions"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="Options" module="django.db.models.options"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="OneToOneRel" module="django.db.models.fields.related"></import_class>
<import_class name="FieldError" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<import_class name="DatabaseError" module="django.db.utils"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="NON_FIELD_ERRORS" type="str"><value><![CDATA[__all__]]></value>
</attribute>
<function name="method_get_order"><doc></doc>
<argument name="ordered_obj"></argument>
<argument name="self"></argument>
</function>
<function name="method_set_order"><doc></doc>
<argument name="ordered_obj"></argument>
<argument name="self"></argument>
<argument name="id_list"></argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="simple_class_factory"><doc><![CDATA[Used to unpickle Models without deferred fields.

    We need to do this the hard way, rather than just using
    the default __reduce__ implementation, because of a
    __deepcopy__ problem in Python 2.4
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
</function>
<function name="get_absolute_url" args="args" kwargs="kwargs"><doc></doc>
<argument name="opts"></argument>
<argument name="func"></argument>
<argument name="self"></argument>
</function>
<function name="model_unpickle"><doc><![CDATA[
    Used to unpickle Model subclasses with deferred fields.
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
<argument name="factory"></argument>
</function>
<function name="subclass_exception"><doc></doc>
<argument name="name"></argument>
<argument name="parents"></argument>
<argument name="module"></argument>
</function>
<class name="Empty"></class>
<class name="ModelBase"></class>
<class name="ModelState"></class>
<class name="Model"></class>
</package>
<package name="django.db.models.query_utils" file="/django/db/models/query_utils.pyc"><doc><![CDATA[
Various data structures used in query construction.

Factored out from django.db.models.query to avoid making the main module very
large and/or so that they can be used by other modules without getting into
circular import difficulties.
]]></doc>
<depends name="weakref"></depends>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<function name="deferred_class_factory"><doc><![CDATA[
    Returns a class object that is a copy of "model" with the specified "attrs"
    being replaced with DeferredAttribute objects. The "pk_value" ties the
    deferred attributes to a particular instance of the model.
    ]]></doc>
<argument name="model"></argument>
<argument name="attrs"></argument>
</function>
<function name="select_related_descend"><doc><![CDATA[
    Returns True if this field should be used to descend deeper for
    select_related() purposes. Used by both the query construction code
    (sql.query.fill_related_selections()) and the model instance creation code
    (query.get_cached_row()).

    Arguments:
     * field - the field to be checked
     * restricted - a boolean field, indicating if the field list has been
       manually restricted using a requested clause)
     * requested - The select_related() dictionary.
     * reverse - boolean, True if we are checking a reverse select related
    ]]></doc>
<argument name="field"></argument>
<argument name="restricted"></argument>
<argument name="requested"></argument>
<argument name="reverse" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="QueryWrapper"></class>
<class name="Q"></class>
<class name="DeferredAttribute"></class>
<class name="InvalidQuery"></class>
</package>
<package name="django.db.models.aggregates" file="/django/db/models/aggregates.pyc"><doc><![CDATA[
Classes to represent the definitions of aggregate functions.
]]></doc>
<class name="Count"></class>
<class name="Sum"></class>
<class name="Min"></class>
<class name="Max"></class>
<class name="StdDev"></class>
<class name="Variance"></class>
<class name="Aggregate"></class>
<class name="Avg"></class>
</package>
<package name="django.db.models.loading" file="/django/db/models/loading.pyc"><doc><![CDATA[Utilities for loading models and the modules that contain them.]]></doc>
<depends name="threading"></depends>
<depends name="imp"></depends>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="module_has_submodule" module="django.utils.module_loading"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="app_cache_ready" type="instancemethod"><value><![CDATA[<bound method AppCache.app_cache_ready of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="load_app" type="instancemethod"><value><![CDATA[<bound method AppCache.load_app of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="get_models" type="instancemethod"><value><![CDATA[<bound method AppCache.get_models of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('get_apps', 'get_app', 'get_models', 'get_model', 'register_models', 'load_app', 'app_cache_ready')]]></value>
</attribute>
<attribute name="cache" type="AppCache"><value><![CDATA[<django.db.models.loading.AppCache object at 0x9b7bc8c>]]></value>
</attribute>
<attribute name="get_app_errors" type="instancemethod"><value><![CDATA[<bound method AppCache.get_app_errors of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="get_apps" type="instancemethod"><value><![CDATA[<bound method AppCache.get_apps of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="register_models" type="instancemethod"><value><![CDATA[<bound method AppCache.register_models of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="get_app" type="instancemethod"><value><![CDATA[<bound method AppCache.get_app of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<attribute name="get_model" type="instancemethod"><value><![CDATA[<bound method AppCache.get_model of <django.db.models.loading.AppCache object at 0x9b7bc8c>>]]></value>
</attribute>
<class name="AppCache"></class>
</package>
<package name="django.db.models.expressions" file="/django/db/models/expressions.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="copy"></depends>
<import_function name="deepcopy" module="copy"></import_function>
<class name="ExpressionNode"></class>
<class name="F"></class>
<class name="DateModifierNode"></class>
</package>
<package name="django.db.models.query" file="/django/db/models/query.pyc"><doc><![CDATA[
The main QuerySet implementation. This provides the public API for the ORM.
]]></doc>
<depends name="itertools"></depends>
<depends name="copy"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="deferred_class_factory" module="django.db.models.query_utils"></import_function>
<import_function name="select_related_descend" module="django.db.models.query_utils"></import_function>
<import_function name="deepcopy" module="copy"></import_function>
<import_class name="DateField" module="django.db.models.fields"></import_class>
<import_class name="izip" module="itertools"></import_class>
<import_class name="EmptyResultSet" module="django.db.models.sql.datastructures"></import_class>
<import_class name="Aggregate" module="django.db.models.aggregates"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<import_class name="Q" module="django.db.models.query_utils"></import_class>
<import_class name="InvalidQuery" module="django.db.models.query_utils"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<attribute name="ITER_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<attribute name="REPR_OUTPUT_SIZE" type="int"><value><![CDATA[20]]></value>
</attribute>
<function name="insert_query"><doc><![CDATA[
    Inserts a new record for the given model. This provides an interface to
    the InsertQuery class and is how Model.save() is implemented. It is not
    part of the public API.
    ]]></doc>
<argument name="model"></argument>
<argument name="values"></argument>
<argument name="return_id" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="raw_values" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="using" type="NoneType"><value></value>
</argument>
</function>
<function name="get_cached_row"><doc><![CDATA[
    Helper function that recursively returns an object with the specified
    related attributes already populated.

    This method may be called recursively to populate deep select_related()
    clauses.

    Arguments:
     * klass - the class to retrieve (and instantiate)
     * row - the row of data returned by the database cursor
     * index_start - the index of the row at which data for this
       object is known to start
     * using - the database alias on which the query is being executed.
     * max_depth - the maximum depth to which a select_related()
       relationship should be explored.
     * cur_depth - the current depth in the select_related() tree.
       Used in recursive calls to determin if we should dig deeper.
     * requested - A dictionary describing the select_related() tree
       that is to be retrieved. keys are field names; values are
       dictionaries describing the keys on that related object that
       are themselves to be select_related().
     * offset - the number of additional fields that are known to
       exist in `row` for `klass`. This usually means the number of
       annotated results on `klass`.
     * only_load - if the query has had only() or defer() applied,
       this is the list of field names that will be returned. If None,
       the full field list for `klass` can be assumed.
     * local_only - Only populate local fields. This is used when building
       following reverse select-related relations
    ]]></doc>
<argument name="klass"></argument>
<argument name="row"></argument>
<argument name="index_start"></argument>
<argument name="using"></argument>
<argument name="max_depth" type="int"><value></value>
</argument>
<argument name="cur_depth" type="int"><value></value>
</argument>
<argument name="requested" type="NoneType"><value></value>
</argument>
<argument name="offset" type="int"><value></value>
</argument>
<argument name="only_load" type="NoneType"><value></value>
</argument>
<argument name="local_only" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="QuerySet"></class>
<class name="RawQuerySet"></class>
<class name="DateQuerySet"></class>
<class name="ValuesListQuerySet"></class>
<class name="ValuesQuerySet"></class>
<class name="EmptyQuerySet"></class>
</package>
<package name="django.db.models.fields.related" file="/django/db/models/fields/related.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_attribute name="get_model" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="string_concat" module="django.utils.translation"></import_function>
<import_function name="CASCADE" module="django.db.models.deletion"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="Field" module="django.db.models.fields"></import_class>
<import_class name="IntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveIntegerField" module="django.db.models.fields"></import_class>
<import_class name="PositiveSmallIntegerField" module="django.db.models.fields"></import_class>
<import_class name="AutoField" module="django.db.models.fields"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="RECURSIVE_RELATIONSHIP_CONSTANT" type="str"><value><![CDATA[self]]></value>
</attribute>
<attribute name="pending_lookups" type="dict"><value></value>
</attribute>
<function name="add_lazy_relation"><doc><![CDATA[
    Adds a lookup on ``cls`` when a related field is defined using a string,
    i.e.::

        class MyModel(Model):
            fk = ForeignKey("AnotherModel")

    This string can be:

        * RECURSIVE_RELATIONSHIP_CONSTANT (i.e. "self") to indicate a recursive
          relation.

        * The name of a model (i.e "AnotherModel") to indicate another model in
          the same app.

        * An app-label and model name (i.e. "someapp.AnotherModel") to indicate
          another model in a different app.

    If the other model hasn't yet been loaded -- almost a given if you're using
    lazy relationships -- then the relation won't be set up until the
    class_prepared signal fires at the end of model initialization.

    operation is the work that must be performed once the relation can be resolved.
    ]]></doc>
<argument name="cls"></argument>
<argument name="field"></argument>
<argument name="relation"></argument>
<argument name="operation"></argument>
</function>
<function name="create_many_related_manager"><doc><![CDATA[Creates a manager that subclasses 'superclass' (which is a Manager)
    and adds behavior for many-to-many related objects.]]></doc>
<argument name="superclass"></argument>
<argument name="rel" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="create_many_to_many_intermediary_model"><doc></doc>
<argument name="field"></argument>
<argument name="klass"></argument>
</function>
<function name="do_pending_lookups" kwargs="kwargs"><doc><![CDATA[
    Handle any pending relations to the sending model. Sent from class_prepared.
    ]]></doc>
<argument name="sender"></argument>
</function>
<class name="ManyToOneRel"></class>
<class name="ReverseManyRelatedObjectsDescriptor"></class>
<class name="ManyToManyField"></class>
<class name="OneToOneField"></class>
<class name="RelatedField"></class>
<class name="ForeignKey"></class>
<class name="ManyToManyRel"></class>
<class name="ReverseSingleRelatedObjectDescriptor"></class>
<class name="OneToOneRel"></class>
<class name="ForeignRelatedObjectsDescriptor"></class>
<class name="SingleRelatedObjectDescriptor"></class>
<class name="ManyRelatedObjectsDescriptor"></class>
</package>
<package name="django.db.models.deletion" file="/django/db/models/deletion.pyc"><doc></doc>
<depends name="operator"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="wraps" module="django.utils.functional"></import_function>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="attrgetter" module="operator"></import_class>
<import_class name="IntegrityError" module="django.db.utils"></import_class>
<attribute name="GET_ITERATOR_CHUNK_SIZE" type="int"><value><![CDATA[100]]></value>
</attribute>
<function name="PROTECT"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="SET"><doc></doc>
<argument name="value"></argument>
</function>
<function name="SET_DEFAULT"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="force_managed"><doc></doc>
<argument name="func"></argument>
</function>
<function name="CASCADE"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="DO_NOTHING"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<function name="SET_NULL"><doc></doc>
<argument name="collector"></argument>
<argument name="field"></argument>
<argument name="sub_objs"></argument>
<argument name="using"></argument>
</function>
<class name="ProtectedError"></class>
<class name="Collector"></class>
</package>
<package name="django.db.models.manager" file="/django/db/models/manager.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="insert_query" module="django.db.models.query"></import_function>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="EmptyQuerySet" module="django.db.models.query"></import_class>
<import_class name="RawQuerySet" module="django.db.models.query"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<function name="ensure_default_manager" kwargs="kwargs"><doc><![CDATA[
    Ensures that a Model subclass contains a default manager  and sets the
    _default_manager attribute on the class. Also sets up the _base_manager
    points to a plain Manager instance (which could be the same as
    _default_manager if it's not a subclass of Manager).
    ]]></doc>
<argument name="sender"></argument>
</function>
<class name="ManagerDescriptor"></class>
<class name="Manager"></class>
<class name="EmptyManager"></class>
</package>
<package name="django.db.models.fields" file="/django/db/models/fields/__init__.pyc"><doc></doc>
<depends name="itertools"></depends>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="math"></depends>
<depends name="decimal"></depends>
<depends name="time"></depends>
<import_attribute name="tee" type="builtin_function_or_method" module="itertools"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="QueryWrapper" module="django.db.models.query_utils"></import_class>
<import_class name="DictWrapper" module="django.utils.datastructures"></import_class>
<import_class name="LegacyConnection" module="django.db.models.fields.subclassing"></import_class>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="BLANK_CHOICE_NONE" type="list"><value><![CDATA[[('', 'None')]]]></value>
</attribute>
<attribute name="ansi_date_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9c0daa0>]]></value>
</attribute>
<class name="SmallIntegerField"></class>
<class name="EmailField"></class>
<class name="DateField"></class>
<class name="NOT_PROVIDED"></class>
<class name="SlugField"></class>
<class name="FloatField"></class>
<class name="TimeField"></class>
<class name="TextField"></class>
<class name="IPAddressField"></class>
<class name="XMLField"></class>
<class name="NullBooleanField"></class>
<class name="CharField"></class>
<class name="BooleanField"></class>
<class name="DecimalField"></class>
<class name="PositiveSmallIntegerField"></class>
<class name="BigIntegerField"></class>
<class name="FilePathField"></class>
<class name="IntegerField"></class>
<class name="PositiveIntegerField"></class>
<class name="DateTimeField"></class>
<class name="AutoField"></class>
<class name="Field"></class>
<class name="URLField"></class>
<class name="CommaSeparatedIntegerField"></class>
<class name="FieldDoesNotExist"></class>
</package>
<package name="django.db.backends.sqlite3.base" file="/django/db/backends/sqlite3/base.pyc"><doc><![CDATA[
SQLite3 backend for django.

Python 2.4 requires pysqlite2 (http://pysqlite.org/).

Python 2.5 and later can use a pysqlite2 module or the sqlite3 module in the
standard library.
]]></doc>
<depends name="datetime"></depends>
<depends name="re"></depends>
<depends name="thread"></depends>
<depends name="pysqlite2.dbapi2"></depends>
<depends name="sys"></depends>
<depends name="decimal"></depends>
<import_attribute name="connection_created" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="BaseDatabaseFeatures" module="django.db.backends"></import_class>
<import_class name="BaseDatabaseOperations" module="django.db.backends"></import_class>
<import_class name="BaseDatabaseIntrospection" module="django.db.backends"></import_class>
<import_class name="DatabaseCreation" module="django.db.backends.sqlite3.creation"></import_class>
<import_class name="BaseDatabaseValidation" module="django.db.backends"></import_class>
<import_class name="SafeString" module="django.utils.safestring"></import_class>
<import_class name="BaseDatabaseWrapper" module="django.db.backends"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="IntegrityError" module="pysqlite2.dbapi2"></import_class>
<import_class name="DatabaseIntrospection" module="django.db.backends.sqlite3.introspection"></import_class>
<import_class name="DatabaseClient" module="django.db.backends.sqlite3.client"></import_class>
<import_class name="TransactionManagementError" module="django.db.transaction"></import_class>
<import_class name="DatabaseError" module="pysqlite2.dbapi2"></import_class>
<import_class name="BaseDatabaseClient" module="django.db.backends"></import_class>
<attribute name="FORMAT_QMARK_REGEX" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9b04f00>]]></value>
</attribute>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="_sqlite_extract"><doc></doc>
<argument name="lookup_type"></argument>
<argument name="dt"></argument>
</function>
<function name="_sqlite_date_trunc"><doc></doc>
<argument name="lookup_type"></argument>
<argument name="dt"></argument>
</function>
<function name="_sqlite_regexp"><doc></doc>
<argument name="re_pattern"></argument>
<argument name="re_string"></argument>
</function>
<function name="_sqlite_format_dtdelta"><doc></doc>
<argument name="dt"></argument>
<argument name="conn"></argument>
<argument name="days"></argument>
<argument name="secs"></argument>
<argument name="usecs"></argument>
</function>
<class name="SQLiteCursorWrapper"></class>
<class name="DatabaseWrapper"></class>
<class name="DatabaseFeatures"></class>
<class name="DatabaseOperations"></class>
</package>
<package name="django.core" file="/django/core/__init__.pyc"><doc></doc>
</package>
<package name="django.core.urlresolvers" file="/django/core/urlresolvers.pyc"><doc><![CDATA[
This module converts requested URLs to callback view functions.

RegexURLResolver is the main class here. Its resolve() method takes a URL (as
a string) and returns a tuple in this format:

    (view_function, function_args, function_kwargs)
]]></doc>
<depends name="re"></depends>
<depends name="thread"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="normalize" module="django.utils.regex_helper"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ViewDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="MultiValueDict" module="django.utils.datastructures"></import_class>
<import_class name="local" module="thread"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="_prefixes" type="_local"><value><![CDATA[<thread._local object at 0x9f3cddc>]]></value>
</attribute>
<attribute name="_resolver_cache" type="dict"><value></value>
</attribute>
<attribute name="_urlconfs" type="_local"><value><![CDATA[<thread._local object at 0x9f3ce0c>]]></value>
</attribute>
<attribute name="_callable_cache" type="dict"><value></value>
</attribute>
<function name="get_callable" args="args"><doc><![CDATA[
    Convert a string version of a function name to the callable object.

    If the lookup_view is not an import path, it is assumed to be a URL pattern
    label and the original string is returned.

    If can_fail is True, lookup_view might be a URL pattern label, so errors
    during the import fail and the string is returned.
    ]]></doc>
</function>
<function name="get_resolver" args="args"><doc></doc>
</function>
<function name="get_urlconf"><doc><![CDATA[
    Returns the root URLconf to use for the current thread if it has been
    changed from the default one.
    ]]></doc>
<argument name="default" type="NoneType"><value></value>
</argument>
</function>
<function name="get_script_prefix"><doc><![CDATA[
    Returns the currently active script prefix. Useful for client code that
    wishes to construct their own URLs manually (although accessing the request
    instance is normally going to be a lot cleaner).
    ]]></doc>
</function>
<function name="reverse"><doc></doc>
<argument name="viewname"></argument>
<argument name="urlconf" type="NoneType"><value></value>
</argument>
<argument name="args" type="NoneType"><value></value>
</argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
<argument name="prefix" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
</function>
<function name="clear_url_caches"><doc></doc>
</function>
<function name="resolve"><doc></doc>
<argument name="path"></argument>
<argument name="urlconf" type="NoneType"><value></value>
</argument>
</function>
<function name="get_mod_func"><doc></doc>
<argument name="callback"></argument>
</function>
<function name="set_urlconf"><doc><![CDATA[
    Sets the URLconf for the current thread (overriding the default one in
    settings). Set to None to revert back to the default.
    ]]></doc>
<argument name="urlconf_name"></argument>
</function>
<function name="set_script_prefix"><doc><![CDATA[
    Sets the script prefix for the current thread.
    ]]></doc>
<argument name="prefix"></argument>
</function>
<class name="RegexURLPattern"></class>
<class name="NoReverseMatch"></class>
<class name="Resolver404"></class>
<class name="ResolverMatch"></class>
<class name="RegexURLResolver"></class>
</package>
<package name="django.core.xheaders" file="/django/core/xheaders.pyc"><doc><![CDATA[
Pages in Django can are served up with custom HTTP headers containing useful
information about those pages -- namely, the content type and object ID.

This module contains utility functions for retrieving and doing interesting
things with these special "X-Headers" (so called because the HTTP spec demands
that custom headers are prefixed with "X-").

Next time you're at slashdot.org, watch out for X-Fry and X-Bender. :)
]]></doc>
<function name="populate_xheaders"><doc><![CDATA[
    Adds the "X-Object-Type" and "X-Object-Id" headers to the given
    HttpResponse according to the given model and object_id -- but only if the
    given HttpRequest object has an IP address within the INTERNAL_IPS setting
    or if the request is from a logged in staff member.
    ]]></doc>
<argument name="request"></argument>
<argument name="response"></argument>
<argument name="model"></argument>
<argument name="object_id"></argument>
</function>
</package>
<package name="django.core.template_loader" file="/django/core/template_loader.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="make_origin" module="django.template.loader"></import_function>
<import_function name="find_template_loader" module="django.template.loader"></import_function>
<import_function name="find_template" module="django.template.loader"></import_function>
<import_function name="get_template" module="django.template.loader"></import_function>
<import_function name="get_template_from_string" module="django.template.loader"></import_function>
<import_function name="select_template" module="django.template.loader"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="render_to_string" module="django.template.loader"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_function name="find_template_source" module="django.template.loader"></import_function>
<import_class name="BaseLoader" module="django.template.loader"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="LoaderOrigin" module="django.template.loader"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="template_source_loaders" type="NoneType"><value></value>
</attribute>
</package>
<package name="django.template.context" file="/django/template/context.pyc"><doc></doc>
<depends name="copy"></depends>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="copy" module="copy"></import_function>
<import_class name="HttpRequest" module="django.http"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="_standard_context_processors" type="NoneType"><value></value>
</attribute>
<attribute name="_builtin_context_processors" type="tuple"><value><![CDATA[('django.core.context_processors.csrf',)]]></value>
</attribute>
<function name="get_standard_processors"><doc></doc>
</function>
<class name="ContextPopException"></class>
<class name="RequestContext"></class>
<class name="BaseContext"></class>
<class name="Context"></class>
<class name="RenderContext"></class>
</package>
<package name="django.template.base" file="/django/template/base.pyc"><doc></doc>
<depends name="imp"></depends>
<depends name="re"></depends>
<depends name="inspect"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="mark_for_escaping" module="django.utils.safestring"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="localize" module="django.utils.formats"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_split" module="django.utils.text"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="is_iterable" module="django.utils.itercompat"></import_function>
<import_function name="module_has_submodule" module="django.utils.module_loading"></import_function>
<import_function name="getargspec" module="inspect"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="unescape_string_literal" module="django.utils.text"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="EscapeData" module="django.utils.safestring"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="ContextPopException" module="django.template.context"></import_class>
<import_class name="Promise" module="django.utils.functional"></import_class>
<attribute name="TOKEN_VAR" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="FILTER_SEPARATOR" type="str"><value><![CDATA[|]]></value>
</attribute>
<attribute name="FILTER_ARGUMENT_SEPARATOR" type="str"><value><![CDATA[:]]></value>
</attribute>
<attribute name="TRANSLATOR_COMMENT_MARK" type="str"><value><![CDATA[Translators]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="constant_string" type="str"><value><![CDATA[(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')]]></value>
</attribute>
<attribute name="TOKEN_COMMENT" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="builtins" type="list"><value><![CDATA[[<django.template.base.Library object at 0x9fde4ac>, <django.template.base.Library object at 0x9fe372c>, <django.template.base.Library object at 0x9fec3ec>]]]></value>
</attribute>
<attribute name="VARIABLE_ATTRIBUTE_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="libraries" type="dict"><value></value>
</attribute>
<attribute name="TOKEN_TEXT" type="int"><value></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="invalid_var_format_string" type="NoneType"><value></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="ALLOWED_VARIABLE_CHARS" type="str"><value><![CDATA[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.]]></value>
</attribute>
<attribute name="filter_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fb9420>]]></value>
</attribute>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fb2eb0>]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="UNKNOWN_SOURCE" type="str"><value><![CDATA[<unknown source>]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="TOKEN_BLOCK" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="templatetags_modules" type="list"><value></value>
</attribute>
<attribute name="filter_raw_string" type="str"><value><![CDATA[
^(?P<constant>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
^(?P<var>[\w\.]+|[-+\.]?\d[\d\.e]*)|
 (?:\|
     (?P<filter_name>\w+)
         (?:\:
             (?:
              (?P<constant_arg>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
              (?P<var_arg>[\w\.]+|[-+\.]?\d[\d\.e]*)
             )
         )?
 )]]></value>
</attribute>
<function name="get_library"><doc><![CDATA[
    Load the template library module with the given name.

    If library is not already loaded loop over all templatetags modules to locate it.

    {% load somelib %} and {% load someotherlib %} loops twice.

    Subsequent loads eg. {% load somelib %} in the same process will grab the cached
    module from libraries.
    ]]></doc>
<argument name="library_name"></argument>
</function>
<function name="resolve_variable"><doc><![CDATA[
    Returns the resolved variable, which may contain attribute syntax, within
    the given context.

    Deprecated; use the Variable class instead.
    ]]></doc>
<argument name="path"></argument>
<argument name="context"></argument>
</function>
<function name="generic_tag_compiler"><doc><![CDATA[Returns a template.Node subclass.]]></doc>
<argument name="params"></argument>
<argument name="defaults"></argument>
<argument name="name"></argument>
<argument name="node_class"></argument>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="_render_value_in_context"><doc><![CDATA[
    Converts any value to a string to become part of a rendered template. This
    means escaping, if required, and conversion to a unicode object. If value
    is a string, it is expected to have already been translated.
    ]]></doc>
<argument name="value"></argument>
<argument name="context"></argument>
</function>
<function name="import_library"><doc><![CDATA[Load a template tag library module.

    Verifies that the library contains a 'register' attribute, and
    returns that attribute as the representation of the library
    ]]></doc>
<argument name="taglib_module"></argument>
</function>
<function name="compile_string"><doc><![CDATA[Compiles template_string into NodeList ready for rendering]]></doc>
<argument name="template_string"></argument>
<argument name="origin"></argument>
</function>
<function name="get_templatetags_modules"><doc><![CDATA[Return the list of all available template tag modules.

    Caches the result for faster access.
    ]]></doc>
</function>
<function name="add_to_builtins"><doc></doc>
<argument name="module"></argument>
</function>
<class name="NodeList"></class>
<class name="InvalidTemplateLibrary"></class>
<class name="Node"></class>
<class name="Template"></class>
<class name="FilterExpression"></class>
<class name="TemplateSyntaxError"></class>
<class name="VariableDoesNotExist"></class>
<class name="Variable"></class>
<class name="TemplateEncodingError"></class>
<class name="TextNode"></class>
<class name="Parser"></class>
<class name="Origin"></class>
<class name="Lexer"></class>
<class name="Token"></class>
<class name="StringOrigin"></class>
<class name="VariableNode"></class>
<class name="TemplateDoesNotExist"></class>
<class name="Library"></class>
<class name="TokenParser"></class>
</package>
<package name="django.template.loader" file="/django/template/loader.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="template_source_loaders" type="NoneType"><value></value>
</attribute>
<function name="make_origin"><doc></doc>
<argument name="display_name"></argument>
<argument name="loader"></argument>
<argument name="name"></argument>
<argument name="dirs"></argument>
</function>
<function name="find_template_loader"><doc></doc>
<argument name="loader"></argument>
</function>
<function name="find_template"><doc></doc>
<argument name="name"></argument>
<argument name="dirs" type="NoneType"><value></value>
</argument>
</function>
<function name="get_template"><doc><![CDATA[
    Returns a compiled Template object for the given template name,
    handling template inheritance recursively.
    ]]></doc>
<argument name="template_name"></argument>
</function>
<function name="get_template_from_string"><doc><![CDATA[
    Returns a compiled Template object for the given template code,
    handling template inheritance recursively.
    ]]></doc>
<argument name="source"></argument>
<argument name="origin" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
</function>
<function name="select_template"><doc><![CDATA[Given a list of template names, returns the first that can be loaded.]]></doc>
<argument name="template_name_list"></argument>
</function>
<function name="render_to_string"><doc><![CDATA[
    Loads the given template_name and renders it with the given dictionary as
    context. The template_name may be a string to load a single template using
    get_template, or it may be a tuple to use select_template to find one of
    the templates in the list. Returns a string.
    ]]></doc>
<argument name="template_name"></argument>
<argument name="dictionary" type="NoneType"><value></value>
</argument>
<argument name="context_instance" type="NoneType"><value></value>
</argument>
</function>
<function name="find_template_source"><doc></doc>
<argument name="name"></argument>
<argument name="dirs" type="NoneType"><value></value>
</argument>
</function>
<class name="BaseLoader"></class>
<class name="LoaderOrigin"></class>
</package>
<package name="django.core.context_processors" file="/django/core/context_processors.pyc"><doc><![CDATA[
A set of request processors that return dictionaries to be merged into a
template context. Each function takes the request object as its only parameter
and returns a dictionary to add to the context.

These are referenced from the setting TEMPLATE_CONTEXT_PROCESSORS and used by
RequestContext.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="get_token" module="django.middleware.csrf"></import_function>
<import_class name="RealPermWrapper" module="django.contrib.auth.context_processors"></import_class>
<import_class name="RealPermLookupDict" module="django.contrib.auth.context_processors"></import_class>
<function name="media"><doc><![CDATA[
    Adds media-related context variables to the context.

    ]]></doc>
<argument name="request"></argument>
</function>
<function name="request"><doc></doc>
<argument name="request"></argument>
</function>
<function name="auth"><doc><![CDATA[
    DEPRECATED. This context processor is the old location, and has been moved
    to `django.contrib.auth.context_processors`.

    This function still exists for backwards-compatibility; it will be removed
    in Django 1.4.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="i18n"><doc></doc>
<argument name="request"></argument>
</function>
<function name="static"><doc><![CDATA[
    Adds static-related context variables to the context.

    ]]></doc>
<argument name="request"></argument>
</function>
<function name="csrf"><doc><![CDATA[
    Context processor that provides a CSRF token, or the string 'NOTPROVIDED' if
    it has not been provided by either a view decorator or the middleware
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="debug"><doc><![CDATA[Returns context variables helpful for debugging.]]></doc>
<argument name="request"></argument>
</function>
<class name="PermWrapper"></class>
<class name="PermLookupDict"></class>
</package>
<package name="django.middleware.csrf" file="/django/middleware/csrf.pyc"><doc><![CDATA[
Cross Site Request Forgery Middleware.

This module provides a middleware that implements protection
against request forgeries from other sites.
]]></doc>
<depends name="random"></depends>
<depends name="_hashlib"></depends>
<depends name="re"></depends>
<depends name="logging"></depends>
<depends name="itertools"></depends>
<import_attribute name="randrange" type="instancemethod" module="random"></import_attribute>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_callable" module="django.core.urlresolvers"></import_function>
<import_function name="patch_vary_headers" module="django.utils.cache"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="same_origin" module="django.utils.http"></import_function>
<attribute name="REASON_NO_REFERER" type="str"><value><![CDATA[Referer checking failed - no Referer.]]></value>
</attribute>
<attribute name="REASON_NO_COOKIE" type="str"><value><![CDATA[No CSRF or session cookie.]]></value>
</attribute>
<attribute name="_MAX_CSRF_KEY" type="long"><value><![CDATA[18446744073709551616]]></value>
</attribute>
<attribute name="REASON_NO_CSRF_COOKIE" type="str"><value><![CDATA[CSRF cookie not set.]]></value>
</attribute>
<attribute name="_POST_FORM_RE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa00cdf8>]]></value>
</attribute>
<attribute name="REASON_BAD_REFERER" type="str"><value><![CDATA[Referer checking failed - %s does not match %s.]]></value>
</attribute>
<attribute name="_HTML_TYPES" type="tuple"><value><![CDATA[('text/html', 'application/xhtml+xml')]]></value>
</attribute>
<attribute name="REASON_BAD_TOKEN" type="str"><value><![CDATA[CSRF token missing or incorrect.]]></value>
</attribute>
<function name="_make_legacy_session_token"><doc></doc>
<argument name="session_id"></argument>
</function>
<function name="_get_new_csrf_key"><doc></doc>
</function>
<function name="_get_failure_view"><doc><![CDATA[
    Returns the view to be used for CSRF rejections
    ]]></doc>
</function>
<function name="_sanitize_token"><doc></doc>
<argument name="token"></argument>
</function>
<function name="get_token"><doc><![CDATA[
    Returns the the CSRF token required for a POST form. The token is an
    alphanumeric value.

    A side effect of calling this function is to make the the csrf_protect
    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
    header to the outgoing response.  For this reason, you may need to use this
    function lazily, as is done by the csrf context processor.
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="CsrfMiddleware"></class>
<class name="CsrfViewMiddleware"></class>
<class name="CsrfResponseMiddleware"></class>
</package>
<package name="django.contrib.auth.context_processors" file="/django/contrib/auth/context_processors.pyc"><doc></doc>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_class name="SimpleLazyObject" module="django.utils.functional"></import_class>
<function name="auth"><doc><![CDATA[
    Returns context variables required by apps that use Django's authentication
    system.

    If there is no 'user' attribute in the request, uses AnonymousUser (from
    django.contrib.auth).
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="PermLookupDict"></class>
<class name="PermWrapper"></class>
</package>
<package name="django.contrib.messages" file="/django/contrib/messages/__init__.pyc"><doc></doc>
<import_function name="add_message" module="django.contrib.messages.api"></import_function>
<import_function name="get_messages" module="django.contrib.messages.api"></import_function>
<import_function name="get_level" module="django.contrib.messages.api"></import_function>
<import_function name="info" module="django.contrib.messages.api"></import_function>
<import_function name="success" module="django.contrib.messages.api"></import_function>
<import_function name="set_level" module="django.contrib.messages.api"></import_function>
<import_function name="warning" module="django.contrib.messages.api"></import_function>
<import_function name="error" module="django.contrib.messages.api"></import_function>
<import_function name="debug" module="django.contrib.messages.api"></import_function>
<attribute name="WARNING" type="int"><value><![CDATA[30]]></value>
</attribute>
<attribute name="INFO" type="int"><value><![CDATA[20]]></value>
</attribute>
<attribute name="SUCCESS" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="ERROR" type="int"><value><![CDATA[40]]></value>
</attribute>
<attribute name="DEBUG" type="int"><value><![CDATA[10]]></value>
</attribute>
<attribute name="DEFAULT_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
</package>
<package name="django.contrib.messages.models" file="/django/contrib/messages/models.pyc"><doc></doc>
</package>
<package name="django.contrib.messages.middleware" file="/django/contrib/messages/middleware.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="default_storage" module="django.contrib.messages.storage"></import_function>
<class name="MessageMiddleware"></class>
</package>
<package name="django.contrib.messages.context_processors" file="/django/contrib/messages/context_processors.pyc"><doc></doc>
<import_function name="get_messages" module="django.contrib.messages.api"></import_function>
<function name="messages"><doc><![CDATA[
    Returns a lazy 'messages' context variable.
    ]]></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.utils" file="/django/contrib/messages/utils.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<function name="get_level_tags"><doc><![CDATA[
    Returns the message level tags.
    ]]></doc>
</function>
</package>
<package name="django.contrib.messages.constants" file="/django/contrib/messages/constants.pyc"><doc></doc>
<attribute name="INFO" type="int"><value><![CDATA[20]]></value>
</attribute>
<attribute name="SUCCESS" type="int"><value><![CDATA[25]]></value>
</attribute>
<attribute name="DEFAULT_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
<attribute name="WARNING" type="int"><value><![CDATA[30]]></value>
</attribute>
<attribute name="ERROR" type="int"><value><![CDATA[40]]></value>
</attribute>
<attribute name="DEBUG" type="int"><value><![CDATA[10]]></value>
</attribute>
</package>
<package name="django.contrib.messages.storage" file="/django/contrib/messages/storage/__init__.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<function name="get_storage"><doc><![CDATA[
    Imports the message storage class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
<argument name="import_path"></argument>
</function>
<function name="default_storage"><doc></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.messages.storage.cookie" file="/django/contrib/messages/storage/cookie.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="salted_hmac" module="django.utils.crypto"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_class name="SimpleCookie" module="django.http"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<import_class name="Message" module="django.contrib.messages.storage.base"></import_class>
<class name="CookieStorage"></class>
<class name="MessageEncoder"></class>
<class name="MessageDecoder"></class>
</package>
<package name="django.utils.simplejson" version="2.0.7" file="/django/utils/simplejson/__init__.pyc"><doc><![CDATA[JSON (JavaScript Object Notation) <http://json.org> is a subset of
JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data
interchange format.

:mod:`simplejson` exposes an API familiar to users of the standard library
:mod:`marshal` and :mod:`pickle` modules. It is the externally maintained
version of the :mod:`json` library contained in Python 2.6, but maintains
compatibility with Python 2.4 and Python 2.5 and (currently) has
significant performance advantages, even without using the optional C
extension for speedups.

Encoding basic Python object hierarchies::

    >>> import simplejson as json
    >>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
    '["foo", {"bar": ["baz", null, 1.0, 2]}]'
    >>> print json.dumps("\"foo\bar")
    "\"foo\bar"
    >>> print json.dumps(u'\u1234')
    "\u1234"
    >>> print json.dumps('\\')
    "\\"
    >>> print json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True)
    {"a": 0, "b": 0, "c": 0}
    >>> from StringIO import StringIO
    >>> io = StringIO()
    >>> json.dump(['streaming API'], io)
    >>> io.getvalue()
    '["streaming API"]'

Compact encoding::

    >>> import simplejson as json
    >>> json.dumps([1,2,3,{'4': 5, '6': 7}], separators=(',',':'))
    '[1,2,3,{"4":5,"6":7}]'

Pretty printing::

    >>> import simplejson as json
    >>> s = json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4)
    >>> print '\n'.join([l.rstrip() for l in  s.splitlines()])
    {
        "4": 5,
        "6": 7
    }

Decoding JSON::

    >>> import simplejson as json
    >>> obj = [u'foo', {u'bar': [u'baz', None, 1.0, 2]}]
    >>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]') == obj
    True
    >>> json.loads('"\\"foo\\bar"') == u'"foo\x08ar'
    True
    >>> from StringIO import StringIO
    >>> io = StringIO('["streaming API"]')
    >>> json.load(io)[0] == 'streaming API'
    True

Specializing JSON object decoding::

    >>> import simplejson as json
    >>> def as_complex(dct):
    ...     if '__complex__' in dct:
    ...         return complex(dct['real'], dct['imag'])
    ...     return dct
    ...
    >>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
    ...     object_hook=as_complex)
    (1+2j)
    >>> import decimal
    >>> json.loads('1.1', parse_float=decimal.Decimal) == decimal.Decimal('1.1')
    True

Specializing JSON object encoding::

    >>> import simplejson as json
    >>> def encode_complex(obj):
    ...     if isinstance(obj, complex):
    ...         return [obj.real, obj.imag]
    ...     raise TypeError("%r is not JSON serializable" % (o,))
    ...
    >>> json.dumps(2 + 1j, default=encode_complex)
    '[2.0, 1.0]'
    >>> json.JSONEncoder(default=encode_complex).encode(2 + 1j)
    '[2.0, 1.0]'
    >>> ''.join(json.JSONEncoder(default=encode_complex).iterencode(2 + 1j))
    '[2.0, 1.0]'


Using simplejson.tool from the shell to validate and pretty-print::

    $ echo '{"json":"obj"}' | python -msimplejson.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -msimplejson.tool
    Expecting property name: line 1 column 2 (char 2)
]]></doc>
<depends name="simplejson"></depends>
<depends name="simplejson.encoder"></depends>
<depends name="collections"></depends>
<depends name="simplejson.decoder"></depends>
<import_function name="load" module="simplejson"></import_function>
<import_function name="dump" module="simplejson"></import_function>
<import_function name="dumps" module="simplejson"></import_function>
<import_function name="loads" module="simplejson"></import_function>
<import_class name="JSONEncoder" module="simplejson.encoder"></import_class>
<import_class name="OrderedDict" module="collections"></import_class>
<import_class name="JSONDecodeError" module="simplejson.decoder"></import_class>
<import_class name="JSONDecoder" module="simplejson.decoder"></import_class>
<attribute name="__version__" type="str"><value><![CDATA[2.0.7]]></value>
</attribute>
<attribute name="use_system_version" type="bool"><value><![CDATA[True]]></value>
</attribute>
</package>
<package name="django.utils.simplejson.decoder" file="/django/utils/simplejson/decoder.pyc"><doc><![CDATA[Implementation of JSONDecoder
]]></doc>
<depends name="struct"></depends>
<depends name="re"></depends>
<depends name="sys"></depends>
<depends name="simplejson._speedups"></depends>
<import_class name="make_scanner" module="simplejson._speedups"></import_class>
<attribute name="WHITESPACE_STR" type="str"><value><![CDATA[ 	
]]></value>
</attribute>
<attribute name="c_scanstring" type="NoneType"><value></value>
</attribute>
<attribute name="NegInf" type="float"><value><![CDATA[-inf]]></value>
</attribute>
<attribute name="_CONSTANTS" type="dict"><value><![CDATA[{'Infinity': inf, 'NaN': nan, '-Infinity': -inf}]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['JSONDecoder']]]></value>
</attribute>
<attribute name="NaN" type="float"><value><![CDATA[nan]]></value>
</attribute>
<attribute name="BACKSLASH" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</attribute>
<attribute name="FLAGS" type="int"><value><![CDATA[88]]></value>
</attribute>
<attribute name="PosInf" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="STRINGCHUNK" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ec7e90>]]></value>
</attribute>
<attribute name="WHITESPACE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9eebc50>]]></value>
</attribute>
<attribute name="DEFAULT_ENCODING" type="str"><value><![CDATA[utf-8]]></value>
</attribute>
<function name="linecol"><doc></doc>
<argument name="doc"></argument>
<argument name="pos"></argument>
</function>
<function name="scanstring"><doc><![CDATA[Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.]]></doc>
<argument name="s"></argument>
<argument name="end"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
<argument name="strict" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="_b" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</argument>
<argument name="_m" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x9ec7e90>]]></value>
</argument>
</function>
<function name="JSONArray"><doc></doc>
<argument name="['s', 'end']"></argument>
<argument name="scan_once"></argument>
<argument name="_w" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x9eebc50>]]></value>
</argument>
<argument name="_ws" type="str"><value><![CDATA[ 	
]]></value>
</argument>
</function>
<function name="JSONObject"><doc></doc>
<argument name="['s', 'end']"></argument>
<argument name="encoding"></argument>
<argument name="strict"></argument>
<argument name="scan_once"></argument>
<argument name="object_hook"></argument>
<argument name="_w" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x9eebc50>]]></value>
</argument>
<argument name="_ws" type="str"><value><![CDATA[ 	
]]></value>
</argument>
</function>
<function name="py_scanstring"><doc><![CDATA[Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.]]></doc>
<argument name="s"></argument>
<argument name="end"></argument>
<argument name="encoding" type="NoneType"><value></value>
</argument>
<argument name="strict" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="_b" type="dict"><value><![CDATA[{'r': u'\r', '"': u'"', 't': u'\t', 'f': u'\x0c', 'b': u'\x08', '\\': u'\\', '/': u'/', 'n': u'\n'}]]></value>
</argument>
<argument name="_m" type="builtin_function_or_method"><value><![CDATA[<built-in method match of _sre.SRE_Pattern object at 0x9ec7e90>]]></value>
</argument>
</function>
<function name="_floatconstants"><doc></doc>
</function>
<function name="errmsg"><doc></doc>
<argument name="msg"></argument>
<argument name="doc"></argument>
<argument name="pos"></argument>
<argument name="end" type="NoneType"><value></value>
</argument>
</function>
<class name="JSONDecoder"></class>
</package>
<package name="django.utils.simplejson.tool" file="/django/utils/simplejson/tool.pyc"><doc><![CDATA[Using simplejson from the shell to validate and
pretty-print::

    $ echo '{"json":"obj"}' | python -msimplejson.tool
    {
        "json": "obj"
    }
    $ echo '{ 1.2:3.4}' | python -msimplejson.tool
    Expecting property name: line 1 column 2 (char 2)
]]></doc>
<function name="main"><doc></doc>
</function>
</package>
<package name="django.utils.simplejson.encoder" file="/django/utils/simplejson/encoder.pyc"><doc><![CDATA[Implementation of JSONEncoder
]]></doc>
<depends name="re"></depends>
<depends name="__builtin__"></depends>
<import_attribute name="FLOAT_REPR" type="builtin_function_or_method" module="__builtin__"></import_attribute>
<attribute name="ESCAPE_ASCII" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9ec7de0>]]></value>
</attribute>
<attribute name="INFINITY" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="i" type="int"><value><![CDATA[31]]></value>
</attribute>
<attribute name="c_make_encoder" type="NoneType"><value></value>
</attribute>
<attribute name="HAS_UTF8" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fc29c0>]]></value>
</attribute>
<attribute name="c_encode_basestring_ascii" type="NoneType"><value></value>
</attribute>
<attribute name="ESCAPE_DCT" type="dict"><value><![CDATA[{'\x01': '\\u0001', '\x00': '\\u0000', '\x03': '\\u0003', '\x02': '\\u0002', '\x05': '\\u0005', '\x04': '\\u0004', '\x07': '\\u0007', '\x06': '\\u0006', '\t': '\\t', '\x08': '\\b', '\x0b': '\\u000b', '\n': '\\n', '\r': '\\r', '\x0c': '\\f', '\x0f': '\\u000f', '\x0e': '\\u000e', '\x11': '\\u0011', '\x10': '\\u0010', '\x13': '\\u0013', '\x12': '\\u0012', '\x15': '\\u0015', '\x14': '\\u0014', '\x17': '\\u0017', '\x16': '\\u0016', '\x19': '\\u0019', '\x18': '\\u0018', '\x1b': '\\u001b', '\x1a': '\\u001a', '\x1d': '\\u001d', '\x1c': '\\u001c', '\x1f': '\\u001f', '\x1e': '\\u001e', '"': '\\"', '\\': '\\\\'}]]></value>
</attribute>
<attribute name="ESCAPE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9f7cca0>]]></value>
</attribute>
<function name="_make_iterencode"><doc></doc>
<argument name="markers"></argument>
<argument name="_default"></argument>
<argument name="_encoder"></argument>
<argument name="_indent"></argument>
<argument name="_floatstr"></argument>
<argument name="_key_separator"></argument>
<argument name="_item_separator"></argument>
<argument name="_sort_keys"></argument>
<argument name="_skipkeys"></argument>
<argument name="_one_shot"></argument>
<argument name="False" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="True" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="ValueError" type="type"><value><![CDATA[<type 'exceptions.ValueError'>]]></value>
</argument>
<argument name="basestring" type="type"><value><![CDATA[<type 'basestring'>]]></value>
</argument>
<argument name="dict" type="type"><value><![CDATA[<type 'dict'>]]></value>
</argument>
<argument name="float" type="type"><value><![CDATA[<type 'float'>]]></value>
</argument>
<argument name="id" type="builtin_function_or_method"><value><![CDATA[<built-in function id>]]></value>
</argument>
<argument name="int" type="type"><value><![CDATA[<type 'int'>]]></value>
</argument>
<argument name="isinstance" type="builtin_function_or_method"><value><![CDATA[<built-in function isinstance>]]></value>
</argument>
<argument name="list" type="type"><value><![CDATA[<type 'list'>]]></value>
</argument>
<argument name="long" type="type"><value><![CDATA[<type 'long'>]]></value>
</argument>
<argument name="str" type="type"><value><![CDATA[<type 'str'>]]></value>
</argument>
<argument name="tuple" type="type"><value><![CDATA[<type 'tuple'>]]></value>
</argument>
</function>
<function name="encode_basestring"><doc><![CDATA[Return a JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<function name="py_encode_basestring_ascii"><doc><![CDATA[Return an ASCII-only JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<function name="encode_basestring_ascii"><doc><![CDATA[Return an ASCII-only JSON representation of a Python string

    ]]></doc>
<argument name="s"></argument>
</function>
<class name="JSONEncoder"></class>
</package>
<package name="django.utils.simplejson.scanner" file="/django/utils/simplejson/scanner.pyc"><doc><![CDATA[JSON token scanner
]]></doc>
<depends name="simplejson._speedups"></depends>
<depends name="re"></depends>
<import_class name="make_scanner" module="simplejson._speedups"></import_class>
<import_class name="c_make_scanner" module="simplejson._speedups"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['make_scanner']]]></value>
</attribute>
<attribute name="NUMBER_RE" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa05a938>]]></value>
</attribute>
<function name="py_make_scanner"><doc></doc>
<argument name="context"></argument>
</function>
</package>
<package name="django.contrib.messages.storage.base" file="/django/contrib/messages/storage/base.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_class name="StrAndUnicode" module="django.utils.encoding"></import_class>
<attribute name="LEVEL_TAGS" type="dict"><value><![CDATA[{40: 'error', 25: 'success', 10: 'debug', 20: 'info', 30: 'warning'}]]></value>
</attribute>
<class name="BaseStorage"></class>
<class name="Message"></class>
</package>
<package name="django.contrib.messages.storage.user_messages" file="/django/contrib/messages/storage/user_messages.pyc"><doc><![CDATA[
Storages used to assist in the deprecation of contrib.auth User messages.

]]></doc>
<import_class name="FallbackStorage" module="django.contrib.messages.storage.fallback"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<import_class name="Message" module="django.contrib.messages.storage.base"></import_class>
<class name="UserMessagesStorage"></class>
<class name="LegacyFallbackStorage"></class>
</package>
<package name="django.contrib.auth.models" file="/django/contrib/auth/models.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_hashlib"></depends>
<depends name="urllib"></depends>
<import_attribute name="md5_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="EmptyManager" module="django.db.models.manager"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<attribute name="UNUSABLE_PASSWORD" type="str"><value><![CDATA[!]]></value>
</attribute>
<function name="_user_has_module_perms"><doc></doc>
<argument name="user"></argument>
<argument name="app_label"></argument>
</function>
<function name="check_password"><doc><![CDATA[
    Returns a boolean of whether the raw_password was correct. Handles
    encryption formats behind the scenes.
    ]]></doc>
<argument name="raw_password"></argument>
<argument name="enc_password"></argument>
</function>
<function name="get_hexdigest"><doc><![CDATA[
    Returns a string of the hexdigest of the given plaintext password and salt
    using the given algorithm ('md5', 'sha1' or 'crypt').
    ]]></doc>
<argument name="algorithm"></argument>
<argument name="salt"></argument>
<argument name="raw_password"></argument>
</function>
<function name="_user_get_all_permissions"><doc></doc>
<argument name="user"></argument>
<argument name="obj"></argument>
</function>
<function name="_user_has_perm"><doc></doc>
<argument name="user"></argument>
<argument name="perm"></argument>
<argument name="obj"></argument>
</function>
<function name="update_last_login" kwargs="kwargs"><doc><![CDATA[
    A signal receiver which updates the last_login date for
    the user logging in.
    ]]></doc>
<argument name="sender"></argument>
<argument name="user"></argument>
</function>
<class name="Group"></class>
<class name="PermissionManager"></class>
<class name="UserManager"></class>
<class name="User"></class>
<class name="SiteProfileNotAvailable"></class>
<class name="Permission"></class>
<class name="AnonymousUser"></class>
<class name="Message"></class>
</package>
<package name="django.contrib.contenttypes.models" file="/django/contrib/contenttypes/models.pyc"><doc></doc>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<class name="ContentType"></class>
<class name="ContentTypeManager"></class>
</package>
<package name="django.contrib.auth" file="/django/contrib/auth/__init__.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_warnings"></depends>
<import_attribute name="user_logged_out" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="warn" type="builtin_function_or_method" module="_warnings"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="SESSION_KEY" type="str"><value><![CDATA[_auth_user_id]]></value>
</attribute>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<attribute name="BACKEND_SESSION_KEY" type="str"><value><![CDATA[_auth_user_backend]]></value>
</attribute>
<function name="load_backend"><doc></doc>
<argument name="path"></argument>
</function>
<function name="get_user"><doc></doc>
<argument name="request"></argument>
</function>
<function name="authenticate" kwargs="credentials"><doc><![CDATA[
    If the given credentials are valid, return a User object.
    ]]></doc>
</function>
<function name="logout"><doc><![CDATA[
    Removes the authenticated user's ID from the request and flushes their
    session data.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="login"><doc><![CDATA[
    Persist a user id and a backend in the request. This way a user doesn't
    have to reauthenticate on every request.
    ]]></doc>
<argument name="request"></argument>
<argument name="user"></argument>
</function>
<function name="get_backends"><doc></doc>
</function>
</package>
<package name="django.contrib.auth.backends" file="/django/contrib/auth/backends.pyc"><doc></doc>
<import_attribute name="connection" type="DatabaseWrapper" module="django.db.backends.sqlite3.base"></import_attribute>
<import_class name="Permission" module="django.contrib.auth.models"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<class name="RemoteUserBackend"></class>
<class name="ModelBackend"></class>
</package>
<package name="django.contrib.auth.tokens" file="/django/contrib/auth/tokens.pyc"><doc></doc>
<depends name="datetime"></depends>
<depends name="_hashlib"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="sha_constructor" type="builtin_function_or_method" module="_hashlib"></import_attribute>
<import_function name="salted_hmac" module="django.utils.crypto"></import_function>
<import_function name="int_to_base36" module="django.utils.http"></import_function>
<import_function name="base36_to_int" module="django.utils.http"></import_function>
<import_function name="constant_time_compare" module="django.utils.crypto"></import_function>
<import_class name="date" module="datetime"></import_class>
<attribute name="default_token_generator" type="PasswordResetTokenGenerator"><value><![CDATA[<django.contrib.auth.tokens.PasswordResetTokenGenerator object at 0xa04de8c>]]></value>
</attribute>
<class name="PasswordResetTokenGenerator"></class>
</package>
<package name="django.contrib.auth.middleware" file="/django/contrib/auth/middleware.pyc"><doc></doc>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<class name="RemoteUserMiddleware"></class>
<class name="AuthenticationMiddleware"></class>
<class name="LazyUser"></class>
</package>
<package name="django.contrib.auth.admin" file="/django/contrib/auth/admin.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="method_decorator" module="django.utils.decorators"></import_function>
<import_function name="csrf_protect_m" module="django.utils.decorators"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="get_object_or_404" module="django.shortcuts"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="UserChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="Group" module="django.contrib.auth.models"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<import_class name="UserCreationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="AdminPasswordChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<class name="UserAdmin"></class>
<class name="GroupAdmin"></class>
</package>
<package name="django.contrib.admin" file="/django/contrib/admin/__init__.pyc"><doc></doc>
<import_attribute name="site" type="AdminSite" module="django.contrib.admin.sites"></import_attribute>
<import_class name="StackedInline" module="django.contrib.admin.options"></import_class>
<import_class name="AdminSite" module="django.contrib.admin.sites"></import_class>
<import_class name="TabularInline" module="django.contrib.admin.options"></import_class>
<import_class name="ModelAdmin" module="django.contrib.admin.options"></import_class>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="ACTION_CHECKBOX_NAME" type="str"><value><![CDATA[_selected_action]]></value>
</attribute>
<function name="autodiscover"><doc><![CDATA[
    Auto-discover INSTALLED_APPS admin.py modules and fail silently when
    not present. This forces an import on them to register any admin bits they
    may want.
    ]]></doc>
</function>
</package>
<package name="django.contrib.admin.models" file="/django/contrib/admin/models.pyc"><doc></doc>
<import_function name="quote" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<attribute name="CHANGE" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="ADDITION" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="DELETION" type="int"><value><![CDATA[3]]></value>
</attribute>
<class name="LogEntry"></class>
<class name="LogEntryManager"></class>
</package>
<package name="django.contrib.admin.filterspecs" file="/django/contrib/admin/filterspecs.pyc"><doc><![CDATA[
FilterSpec encapsulates the logic for displaying filters in the Django admin.
Filters are specified in models with the "list_filter" option.

Each filter subclass knows how to display a filter for a field that passes a
certain test -- e.g. being a DateField or ForeignKey.
]]></doc>
<depends name="datetime"></depends>
<import_function name="get_limit_choices_to_from_path" module="django.contrib.admin.util"></import_function>
<import_function name="reverse_field_path" module="django.contrib.admin.util"></import_function>
<import_function name="get_model_from_relation" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<class name="RelatedFilterSpec"></class>
<class name="BooleanFieldFilterSpec"></class>
<class name="FilterSpec"></class>
<class name="AllValuesFilterSpec"></class>
<class name="ChoicesFilterSpec"></class>
<class name="DateFieldFilterSpec"></class>
</package>
<package name="django.contrib.admin.validation" file="/django/contrib/admin/validation.pyc"><doc></doc>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="_get_foreign_key" module="django.forms.models"></import_function>
<import_function name="fields_for_model" module="django.forms.models"></import_function>
<import_function name="get_fields_from_path" module="django.contrib.admin.util"></import_function>
<import_class name="BaseModelFormSet" module="django.forms.models"></import_class>
<import_class name="NotRelationField" module="django.contrib.admin.util"></import_class>
<import_class name="BaseModelForm" module="django.forms.models"></import_class>
<import_class name="BaseModelAdmin" module="django.contrib.admin.options"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['validate']]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<function name="validate_base"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
</function>
<function name="check_isdict"><doc></doc>
<argument name="cls"></argument>
<argument name="label"></argument>
<argument name="obj"></argument>
</function>
<function name="check_formfield"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="check_readonly_fields"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
</function>
<function name="fetch_attr"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="validate_inline"><doc></doc>
<argument name="cls"></argument>
<argument name="parent"></argument>
<argument name="parent_model"></argument>
</function>
<function name="get_field"><doc></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
<argument name="opts"></argument>
<argument name="label"></argument>
<argument name="field"></argument>
</function>
<function name="check_isseq"><doc></doc>
<argument name="cls"></argument>
<argument name="label"></argument>
<argument name="obj"></argument>
</function>
<function name="validate"><doc><![CDATA[
    Does basic ModelAdmin option validation. Calls custom validation
    classmethod in the end if it is provided in cls. The signature of the
    custom validation classmethod should be: def validate(cls, model).
    ]]></doc>
<argument name="cls"></argument>
<argument name="model"></argument>
</function>
</package>
<package name="django.contrib.admin.helpers" file="/django/contrib/admin/helpers.pyc"><doc></doc>
<import_attribute name="checkbox" type="CheckboxInput" module="django.forms.widgets"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="capfirst" module="django.template.defaultfilters"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="display_for_field" module="django.contrib.admin.util"></import_function>
<import_function name="label_for_field" module="django.contrib.admin.util"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="lookup_field" module="django.contrib.admin.util"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="help_text_for_field" module="django.contrib.admin.util"></import_function>
<import_class name="ManyToManyRel" module="django.db.models.fields.related"></import_class>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<attribute name="ACTION_CHECKBOX_NAME" type="str"><value><![CDATA[_selected_action]]></value>
</attribute>
<function name="normalize_fieldsets"><doc><![CDATA[
    Make sure the keys in fieldset dictionaries are strings. Returns the
    normalized data.
    ]]></doc>
<argument name="fieldsets"></argument>
</function>
<function name="normalize_dictionary"><doc><![CDATA[
    Converts all the keys in "data_dict" to strings. The keys must be
    convertible using str().
    ]]></doc>
<argument name="data_dict"></argument>
</function>
<class name="Fieldline"></class>
<class name="InlineAdminFormSet"></class>
<class name="Fieldset"></class>
<class name="InlineFieldset"></class>
<class name="AdminField"></class>
<class name="AdminErrorList"></class>
<class name="InlineAdminForm"></class>
<class name="AdminReadonlyField"></class>
<class name="AdminForm"></class>
<class name="ActionForm"></class>
</package>
<package name="django.template.defaultfilters" file="/django/template/defaultfilters.pyc"><doc><![CDATA[Default variable filters.]]></doc>
<depends name="functools"></depends>
<depends name="re"></depends>
<depends name="random"></depends>
<depends name="decimal"></depends>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext" module="django.utils.translation"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="wraps" module="functools"></import_function>
<import_function name="conditional_escape" module="django.utils.html"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="InvalidOperation" module="decimal"></import_class>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Decimal" module="decimal"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<attribute name="ROUND_HALF_UP" type="str"><value><![CDATA[ROUND_HALF_UP]]></value>
</attribute>
<attribute name="nan" type="float"><value><![CDATA[nan]]></value>
</attribute>
<attribute name="pos_inf" type="float"><value><![CDATA[inf]]></value>
</attribute>
<attribute name="neg_inf" type="float"><value><![CDATA[-inf]]></value>
</attribute>
<attribute name="special_floats" type="list"><value><![CDATA[['inf', '-inf', 'nan']]]></value>
</attribute>
<function name="truncatewords" args="args" kwargs="kwargs"><doc><![CDATA[
    Truncates a string after a certain number of words.

    Argument: Number of words to truncate after.

    Newlines within the string are removed.
    ]]></doc>
</function>
<function name="linebreaksbr" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts all newlines in a piece of plain text to HTML line breaks
    (``<br />``).
    ]]></doc>
</function>
<function name="yesno"><doc><![CDATA[
    Given a string mapping values for true, false and (optionally) None,
    returns one of those strings accoding to the value:

    ==========  ======================  ==================================
    Value       Argument                Outputs
    ==========  ======================  ==================================
    ``True``    ``"yeah,no,maybe"``     ``yeah``
    ``False``   ``"yeah,no,maybe"``     ``no``
    ``None``    ``"yeah,no,maybe"``     ``maybe``
    ``None``    ``"yeah,no"``           ``"no"`` (converts None to False
                                        if no mapping for None is given.
    ==========  ======================  ==================================
    ]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="upper" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into all uppercase.]]></doc>
</function>
<function name="urlencode" args="args" kwargs="kwargs"><doc><![CDATA[
    Escapes a value for use in a URL.

    Takes an optional ``safe`` parameter used to determine the characters which
    should not be escaped by Django's ``urlquote`` method. If not provided, the
    default safe characters will be used (but an empty string can be provided
    when *all* characters should be escaped).
    ]]></doc>
</function>
<function name="random"><doc><![CDATA[Returns a random item from the list.]]></doc>
<argument name="value"></argument>
</function>
<function name="striptags" args="args" kwargs="kwargs"><doc><![CDATA[Strips all [X]HTML tags.]]></doc>
</function>
<function name="filesizeformat"><doc><![CDATA[
    Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
    102 bytes, etc).
    ]]></doc>
<argument name="bytes"></argument>
</function>
<function name="pprint"><doc><![CDATA[A wrapper around pprint.pprint -- for debugging, really.]]></doc>
<argument name="value"></argument>
</function>
<function name="timesince"><doc><![CDATA[Formats a date as the time since that date (i.e. "4 days, 6 hours").]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="urlizetrunc" args="args" kwargs="kwargs"><doc><![CDATA[
    Converts URLs into clickable links, truncating URLs to the given character
    limit, and adding 'rel=nofollow' attribute to discourage spamming.

    Argument: Length to truncate URLs to.
    ]]></doc>
</function>
<function name="iriencode" args="args" kwargs="kwargs"><doc><![CDATA[Escapes an IRI value for use in a URL.]]></doc>
</function>
<function name="escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Marks the value as a string that should not be auto-escaped.
    ]]></doc>
</function>
<function name="linebreaks" args="args" kwargs="kwargs"><doc><![CDATA[
    Replaces line breaks in plain text with appropriate HTML; a single
    newline becomes an HTML line break (``<br />``) and a new line
    followed by a blank line becomes a paragraph break (``</p>``).
    ]]></doc>
</function>
<function name="length_is"><doc><![CDATA[Returns a boolean of whether the value's length is the argument.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="removetags" args="args" kwargs="kwargs"><doc><![CDATA[Removes a space separated list of [X]HTML tags from the output.]]></doc>
</function>
<function name="ljust" args="args" kwargs="kwargs"><doc><![CDATA[
    Left-aligns the value in a field of a given width.

    Argument: field size.
    ]]></doc>
</function>
<function name="urlize" args="args" kwargs="kwargs"><doc><![CDATA[Converts URLs in plain text into clickable links.]]></doc>
</function>
<function name="fix_ampersands" args="args" kwargs="kwargs"><doc><![CDATA[Replaces ampersands with ``&amp;`` entities.]]></doc>
</function>
<function name="floatformat"><doc><![CDATA[
    Displays a float to a specified number of decimal places.

    If called without an argument, it displays the floating point number with
    one decimal place -- but only if there's a decimal place to be displayed:

    * num1 = 34.23234
    * num2 = 34.00000
    * num3 = 34.26000
    * {{ num1|floatformat }} displays "34.2"
    * {{ num2|floatformat }} displays "34"
    * {{ num3|floatformat }} displays "34.3"

    If arg is positive, it will always display exactly arg number of decimal
    places:

    * {{ num1|floatformat:3 }} displays "34.232"
    * {{ num2|floatformat:3 }} displays "34.000"
    * {{ num3|floatformat:3 }} displays "34.260"

    If arg is negative, it will display arg number of decimal places -- but
    only if there are places to be displayed:

    * {{ num1|floatformat:"-3" }} displays "34.232"
    * {{ num2|floatformat:"-3" }} displays "34"
    * {{ num3|floatformat:"-3" }} displays "34.260"

    If the input float is infinity or NaN, the (platform-dependent) string
    representation of that value will be displayed.
    ]]></doc>
<argument name="text"></argument>
<argument name="arg" type="int"><value><![CDATA[-1]]></value>
</argument>
</function>
<function name="phone2numeric"><doc><![CDATA[Takes a phone number and converts it in to its numerical equivalent.]]></doc>
<argument name="value"></argument>
</function>
<function name="addslashes" args="args" kwargs="kwargs"><doc><![CDATA[
    Adds slashes before quotes. Useful for escaping strings in CSV, for
    example. Less useful for escaping JavaScript; use the ``escapejs``
    filter instead.
    ]]></doc>
</function>
<function name="slice_"><doc><![CDATA[
    Returns a slice of the list.

    Uses the same syntax as Python's list slicing; see
    http://diveintopython.org/native_data_types/lists.html#odbchelper.list.slice
    for an introduction.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="add"><doc><![CDATA[Adds the arg to the value.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="force_escape" args="args" kwargs="kwargs"><doc><![CDATA[
    Escapes a string's HTML. This returns a new string containing the escaped
    characters (as opposed to "escape", which marks the content for later
    possible escaping).
    ]]></doc>
</function>
<function name="make_list" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns the value turned into a list.

    For an integer, it's a list of digits.
    For a string, it's a list of characters.
    ]]></doc>
</function>
<function name="divisibleby"><doc><![CDATA[Returns True if the value is devisible by the argument.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="time"><doc><![CDATA[Formats a time according to the given format.]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="unordered_list"><doc><![CDATA[
    Recursively takes a self-nested list and returns an HTML unordered list --
    WITHOUT opening and closing <ul> tags.

    The list is assumed to be in the proper format. For example, if ``var``
    contains: ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``,
    then ``{{ var|unordered_list }}`` would return::

        <li>States
        <ul>
                <li>Kansas
                <ul>
                        <li>Lawrence</li>
                        <li>Topeka</li>
                </ul>
                </li>
                <li>Illinois</li>
        </ul>
        </li>
    ]]></doc>
<argument name="value"></argument>
<argument name="autoescape" type="NoneType"><value></value>
</argument>
</function>
<function name="get_digit"><doc><![CDATA[
    Given a whole number, returns the requested digit of it, where 1 is the
    right-most digit, 2 is the second-right-most digit, etc. Returns the
    original value for invalid input (if input or argument is not an integer,
    or if argument is less than 1). Otherwise, output is always an integer.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="timeuntil"><doc><![CDATA[Formats a date as the time until that date (i.e. "4 days, 6 hours").]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="safeseq"><doc><![CDATA[
    A "safe" filter for sequences. Marks each element in the sequence,
    individually, as safe, after converting them to unicode. Returns a list
    with the results.
    ]]></doc>
<argument name="value"></argument>
</function>
<function name="rjust" args="args" kwargs="kwargs"><doc><![CDATA[
    Right-aligns the value in a field of a given width.

    Argument: field size.
    ]]></doc>
</function>
<function name="safe" args="args" kwargs="kwargs"><doc><![CDATA[
    Marks the value as a string that should not be auto-escaped.
    ]]></doc>
</function>
<function name="wordcount" args="args" kwargs="kwargs"><doc><![CDATA[Returns the number of words.]]></doc>
</function>
<function name="stringformat"><doc><![CDATA[
    Formats the variable according to the arg, a string formatting specifier.

    This specifier uses Python string formating syntax, with the exception that
    the leading "%" is dropped.

    See http://docs.python.org/lib/typesseq-strings.html for documentation
    of Python string formatting
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="linenumbers" args="args" kwargs="kwargs"><doc><![CDATA[Displays text with line numbers.]]></doc>
</function>
<function name="cut" args="args" kwargs="kwargs"><doc><![CDATA[
    Removes all values of arg from the given string.
    ]]></doc>
</function>
<function name="stringfilter"><doc><![CDATA[
    Decorator for filters which should only receive unicode objects. The object
    passed as the first positional argument will be converted to a unicode
    object.
    ]]></doc>
<argument name="func"></argument>
</function>
<function name="date"><doc><![CDATA[Formats a date according to the given format.]]></doc>
<argument name="value"></argument>
<argument name="arg" type="NoneType"><value></value>
</argument>
</function>
<function name="dictsort"><doc><![CDATA[
    Takes a list of dicts, returns that list sorted by the property given in
    the argument.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="dictsortreversed"><doc><![CDATA[
    Takes a list of dicts, returns that list sorted in reverse order by the
    property given in the argument.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="default_if_none"><doc><![CDATA[If value is None, use given default.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="pluralize"><doc><![CDATA[
    Returns a plural suffix if the value is not 1. By default, 's' is used as
    the suffix:

    * If value is 0, vote{{ value|pluralize }} displays "0 votes".
    * If value is 1, vote{{ value|pluralize }} displays "1 vote".
    * If value is 2, vote{{ value|pluralize }} displays "2 votes".

    If an argument is provided, that string is used instead:

    * If value is 0, class{{ value|pluralize:"es" }} displays "0 classes".
    * If value is 1, class{{ value|pluralize:"es" }} displays "1 class".
    * If value is 2, class{{ value|pluralize:"es" }} displays "2 classes".

    If the provided argument contains a comma, the text before the comma is
    used for the singular case and the text after the comma is used for the
    plural case:

    * If value is 0, cand{{ value|pluralize:"y,ies" }} displays "0 candies".
    * If value is 1, cand{{ value|pluralize:"y,ies" }} displays "1 candy".
    * If value is 2, cand{{ value|pluralize:"y,ies" }} displays "2 candies".
    ]]></doc>
<argument name="value"></argument>
<argument name="arg" type="unicode"><value><![CDATA[s]]></value>
</argument>
</function>
<function name="lower" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into all lowercase.]]></doc>
</function>
<function name="join"><doc><![CDATA[
    Joins a list with a string, like Python's ``str.join(list)``.
    ]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
<argument name="autoescape" type="NoneType"><value></value>
</argument>
</function>
<function name="center" args="args" kwargs="kwargs"><doc><![CDATA[Centers the value in a field of a given width.]]></doc>
</function>
<function name="default"><doc><![CDATA[If value is unavailable, use given default.]]></doc>
<argument name="value"></argument>
<argument name="arg"></argument>
</function>
<function name="truncatewords_html" args="args" kwargs="kwargs"><doc><![CDATA[
    Truncates HTML after a certain number of words.

    Argument: Number of words to truncate after.

    Newlines in the HTML are preserved.
    ]]></doc>
</function>
<function name="escapejs" args="args" kwargs="kwargs"><doc><![CDATA[Hex encodes characters for use in JavaScript strings.]]></doc>
</function>
<function name="length"><doc><![CDATA[Returns the length of the value - useful for lists.]]></doc>
<argument name="value"></argument>
</function>
<function name="wordwrap" args="args" kwargs="kwargs"><doc><![CDATA[
    Wraps words at specified line length.

    Argument: number of characters to wrap the text at.
    ]]></doc>
</function>
<function name="last"><doc><![CDATA[Returns the last item in a list]]></doc>
<argument name="value"></argument>
</function>
<function name="title" args="args" kwargs="kwargs"><doc><![CDATA[Converts a string into titlecase.]]></doc>
</function>
<function name="capfirst" args="args" kwargs="kwargs"><doc><![CDATA[Capitalizes the first character of the value.]]></doc>
</function>
<function name="slugify" args="args" kwargs="kwargs"><doc><![CDATA[
    Normalizes string, converts to lowercase, removes non-alpha characters,
    and converts spaces to hyphens.
    ]]></doc>
</function>
<function name="first"><doc><![CDATA[Returns the first item in a list.]]></doc>
<argument name="value"></argument>
</function>
</package>
<package name="django.contrib.admin.util" file="/django/contrib/admin/util.pyc"><doc></doc>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="pretty_name" module="django.forms.forms"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="Collector" module="django.db.models.deletion"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<function name="unquote"><doc><![CDATA[
    Undo the effects of quote(). Based heavily on urllib.unquote().
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="reverse_field_path"><doc><![CDATA[ Create a reversed field path.

    E.g. Given (Order, "user__groups"),
    return (Group, "user__order").

    Final field must be a related model, not a data field.

    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<function name="model_format_dict"><doc><![CDATA[
    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
    typically for use with string formatting.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.

    ]]></doc>
<argument name="obj"></argument>
</function>
<function name="flatten_fieldsets"><doc><![CDATA[Returns a list of field names from an admin fieldsets structure.]]></doc>
<argument name="fieldsets"></argument>
</function>
<function name="get_model_from_relation"><doc></doc>
<argument name="field"></argument>
</function>
<function name="display_for_field"><doc></doc>
<argument name="value"></argument>
<argument name="field"></argument>
</function>
<function name="label_for_field"><doc></doc>
<argument name="name"></argument>
<argument name="model"></argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
<argument name="return_attr" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="model_ngettext"><doc><![CDATA[
    Return the appropriate `verbose_name` or `verbose_name_plural` value for
    `obj` depending on the count `n`.

    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
    `QuerySet` is used.

    ]]></doc>
<argument name="obj"></argument>
<argument name="n" type="NoneType"><value></value>
</argument>
</function>
<function name="remove_trailing_data_field"><doc><![CDATA[ Discard trailing non-relation field if extant. ]]></doc>
<argument name="fields"></argument>
</function>
<function name="quote"><doc><![CDATA[
    Ensure that primary key values do not confuse the admin URLs by escaping
    any '/', '_' and ':' characters. Similar to urllib.quote, except that the
    quoting is slightly different so that it doesn't get automatically
    unquoted by the Web browser.
    ]]></doc>
<argument name="s"></argument>
</function>
<function name="lookup_field"><doc></doc>
<argument name="name"></argument>
<argument name="obj"></argument>
<argument name="model_admin" type="NoneType"><value></value>
</argument>
</function>
<function name="get_fields_from_path"><doc><![CDATA[ Return list of Fields given path relative to model.

    e.g. (ModelX, "user__groups__name") -> [
        <django.db.models.fields.related.ForeignKey object at 0x...>,
        <django.db.models.fields.related.ManyToManyField object at 0x...>,
        <django.db.models.fields.CharField object at 0x...>,
    ]
    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<function name="help_text_for_field"><doc></doc>
<argument name="name"></argument>
<argument name="model"></argument>
</function>
<function name="get_deleted_objects"><doc><![CDATA[
    Find all objects related to ``objs`` that should also be deleted. ``objs``
    must be a homogenous iterable of objects (e.g. a QuerySet).

    Returns a nested list of strings suitable for display in the
    template with the ``unordered_list`` filter.

    ]]></doc>
<argument name="objs"></argument>
<argument name="opts"></argument>
<argument name="user"></argument>
<argument name="admin_site"></argument>
<argument name="using"></argument>
</function>
<function name="get_limit_choices_to_from_path"><doc><![CDATA[ Return Q object for limiting choices if applicable.

    If final model in path is linked via a ForeignKey or ManyToManyField which
    has a `limit_choices_to` attribute, return it as a Q object.
    ]]></doc>
<argument name="model"></argument>
<argument name="path"></argument>
</function>
<class name="NestedObjects"></class>
<class name="NotRelationField"></class>
</package>
<package name="django.contrib.admin.widgets" file="/django/contrib/admin/widgets.pyc"><doc><![CDATA[
Form Widget classes specific to the Django admin site.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="flatatt" module="django.forms.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="truncate_words" module="django.utils.text"></import_function>
<import_class name="NoReverseMatch" module="django.core.urlresolvers"></import_class>
<import_class name="RadioFieldRenderer" module="django.forms.widgets"></import_class>
<function name="url_params_from_lookup_dict"><doc><![CDATA[
    Converts the type of lookups specified in a ForeignKey limit_choices_to
    attribute to a dictionary of query parameters
    ]]></doc>
<argument name="lookups"></argument>
</function>
<class name="AdminTextareaWidget"></class>
<class name="AdminRadioSelect"></class>
<class name="AdminSplitDateTime"></class>
<class name="FilteredSelectMultiple"></class>
<class name="AdminIntegerFieldWidget"></class>
<class name="AdminRadioFieldRenderer"></class>
<class name="AdminTextInputWidget"></class>
<class name="AdminTimeWidget"></class>
<class name="RelatedFieldWidgetWrapper"></class>
<class name="AdminDateWidget"></class>
<class name="AdminURLFieldWidget"></class>
<class name="AdminCommaSeparatedIntegerFieldWidget"></class>
<class name="ManyToManyRawIdWidget"></class>
<class name="AdminFileWidget"></class>
<class name="ForeignKeyRawIdWidget"></class>
</package>
<package name="django.contrib.admin.forms" file="/django/contrib/admin/forms.pyc"><doc></doc>
<import_attribute name="ERROR_MESSAGE" type="__proxy__" module="django.utils.functional"></import_attribute>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="authenticate" module="django.contrib.auth"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="AuthenticationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<class name="AdminAuthenticationForm"></class>
</package>
<package name="django.contrib.admin.options" file="/django/contrib/admin/options.pyc"><doc></doc>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="unquote" module="django.contrib.admin.util"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="model_format_dict" module="django.contrib.admin.util"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_function name="ungettext" module="django.utils.translation"></import_function>
<import_function name="flatten_fieldsets" module="django.contrib.admin.util"></import_function>
<import_function name="csrf_protect_m" module="django.utils.decorators"></import_function>
<import_function name="method_decorator" module="django.utils.decorators"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="get_deleted_objects" module="django.contrib.admin.util"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="modelform_factory" module="django.forms.models"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="modelformset_factory" module="django.forms.models"></import_function>
<import_function name="inlineformset_factory" module="django.forms.models"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="get_object_or_404" module="django.shortcuts"></import_function>
<import_function name="all_valid" module="django.forms.formsets"></import_function>
<import_function name="escapejs" module="django.utils.html"></import_function>
<import_function name="curry" module="django.utils.functional"></import_function>
<import_class name="Paginator" module="django.core.paginator"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="BaseInlineFormSet" module="django.forms.models"></import_class>
<import_class name="ValidationError" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<import_class name="RelatedObject" module="django.db.models.related"></import_class>
<import_class name="FieldDoesNotExist" module="django.db.models.fields"></import_class>
<attribute name="LOOKUP_SEP" type="str"><value><![CDATA[__]]></value>
</attribute>
<attribute name="BLANK_CHOICE_DASH" type="list"><value><![CDATA[[('', '---------')]]]></value>
</attribute>
<attribute name="HORIZONTAL" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="QUERY_TERMS" type="dict"><value><![CDATA[{'gt': None, 'in': None, 'month': None, 'isnull': None, 'endswith': None, 'week_day': None, 'year': None, 'regex': None, 'gte': None, 'contains': None, 'lt': None, 'startswith': None, 'iendswith': None, 'icontains': None, 'iexact': None, 'exact': None, 'day': None, 'search': None, 'iregex': None, 'range': None, 'istartswith': None, 'lte': None}]]></value>
</attribute>
<attribute name="FORMFIELD_FOR_DBFIELD_DEFAULTS" type="dict"><value><![CDATA[{<class 'django.db.models.fields.files.ImageField'>: {'widget': <class 'django.contrib.admin.widgets.AdminFileWidget'>}, <class 'django.db.models.fields.TextField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTextareaWidget'>}, <class 'django.db.models.fields.files.FileField'>: {'widget': <class 'django.contrib.admin.widgets.AdminFileWidget'>}, <class 'django.db.models.fields.IntegerField'>: {'widget': <class 'django.contrib.admin.widgets.AdminIntegerFieldWidget'>}, <class 'django.db.models.fields.DateTimeField'>: {'widget': <class 'django.contrib.admin.widgets.AdminSplitDateTime'>, 'form_class': <class 'django.forms.fields.SplitDateTimeField'>}, <class 'django.db.models.fields.TimeField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTimeWidget'>}, <class 'django.db.models.fields.BigIntegerField'>: {'widget': <class 'django.contrib.admin.widgets.AdminIntegerFieldWidget'>}, <class 'django.db.models.fields.DateField'>: {'widget': <class 'django.contrib.admin.widgets.AdminDateWidget'>}, <class 'django.db.models.fields.URLField'>: {'widget': <class 'django.contrib.admin.widgets.AdminURLFieldWidget'>}, <class 'django.db.models.fields.CharField'>: {'widget': <class 'django.contrib.admin.widgets.AdminTextInputWidget'>}}]]></value>
</attribute>
<attribute name="VERTICAL" type="int"><value><![CDATA[2]]></value>
</attribute>
<function name="get_ul_class"><doc></doc>
<argument name="x"></argument>
</function>
<class name="IncorrectLookupParameters"></class>
<class name="StackedInline"></class>
<class name="TabularInline"></class>
<class name="InlineModelAdmin"></class>
<class name="BaseModelAdmin"></class>
<class name="ModelAdmin"></class>
</package>
<package name="django.template" file="/django/template/__init__.pyc"><doc><![CDATA[
This is the Django template system.

How it works:

The Lexer.tokenize() function converts a template string (i.e., a string containing
markup with custom template tags) to tokens, which can be either plain text
(TOKEN_TEXT), variables (TOKEN_VAR) or block statements (TOKEN_BLOCK).

The Parser() class takes a list of tokens in its constructor, and its parse()
method returns a compiled template -- which is, under the hood, a list of
Node objects.

Each Node is responsible for creating some sort of output -- e.g. simple text
(TextNode), variable values in a given context (VariableNode), results of basic
logic (IfNode), results of looping (ForNode), or anything else. The core Node
types are TextNode, VariableNode, IfNode and ForNode, but plugin modules can
define their own custom node types.

Each Node has a render() method, which takes a Context and returns a string of
the rendered node. For example, the render() method of a Variable Node returns
the variable's value as a string. The render() method of an IfNode returns the
rendered output of whatever was inside the loop, recursively.

The Template class is a convenient wrapper that takes care of template
compilation and rendering.

Usage:

The only thing you should ever use directly in this file is the Template class.
Create a compiled template object with a template_string, then call render()
with a context. In the compilation stage, the TemplateSyntaxError exception
will be raised if the template doesn't have proper syntax.

Sample code:

>>> from django import template
>>> s = u'<html>{% if test %}<h1>{{ varvalue }}</h1>{% endif %}</html>'
>>> t = template.Template(s)

(t is now a compiled template, and its render() method can be called multiple
times with multiple contexts)

>>> c = template.Context({'test':True, 'varvalue': 'Hello'})
>>> t.render(c)
u'<html><h1>Hello</h1></html>'
>>> c = template.Context({'test':False, 'varvalue': 'Hello'})
>>> t.render(c)
u'<html></html>'
]]></doc>
<import_function name="resolve_variable" module="django.template.base"></import_function>
<import_function name="get_library" module="django.template.base"></import_function>
<import_function name="import_library" module="django.template.base"></import_function>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_function name="compile_string" module="django.template.base"></import_function>
<import_function name="unescape_string_literal" module="django.utils.text"></import_function>
<import_function name="generic_tag_compiler" module="django.template.base"></import_function>
<import_function name="get_templatetags_modules" module="django.template.base"></import_function>
<import_function name="add_to_builtins" module="django.template.base"></import_function>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="InvalidTemplateLibrary" module="django.template.base"></import_class>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="FilterExpression" module="django.template.base"></import_class>
<import_class name="ContextPopException" module="django.template.context"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="VariableDoesNotExist" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="TextNode" module="django.template.base"></import_class>
<import_class name="Origin" module="django.template.base"></import_class>
<import_class name="Lexer" module="django.template.base"></import_class>
<import_class name="Token" module="django.template.base"></import_class>
<import_class name="StringOrigin" module="django.template.base"></import_class>
<import_class name="VariableNode" module="django.template.base"></import_class>
<import_class name="Parser" module="django.template.base"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<import_class name="TemplateEncodingError" module="django.template.base"></import_class>
<import_class name="TokenParser" module="django.template.base"></import_class>
<attribute name="TOKEN_VAR" type="int"><value><![CDATA[1]]></value>
</attribute>
<attribute name="FILTER_ARGUMENT_SEPARATOR" type="str"><value><![CDATA[:]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="UNKNOWN_SOURCE" type="str"><value><![CDATA[<unknown source>]]></value>
</attribute>
<attribute name="constant_string" type="str"><value><![CDATA[(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*')]]></value>
</attribute>
<attribute name="TOKEN_COMMENT" type="int"><value><![CDATA[3]]></value>
</attribute>
<attribute name="filter_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fb9420>]]></value>
</attribute>
<attribute name="builtins" type="list"><value><![CDATA[[<django.template.base.Library object at 0x9fde4ac>, <django.template.base.Library object at 0x9fe372c>, <django.template.base.Library object at 0x9fec3ec>]]]></value>
</attribute>
<attribute name="libraries" type="dict"><value></value>
</attribute>
<attribute name="TOKEN_TEXT" type="int"><value></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="TRANSLATOR_COMMENT_MARK" type="str"><value><![CDATA[Translators]]></value>
</attribute>
<attribute name="ALLOWED_VARIABLE_CHARS" type="str"><value><![CDATA[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.]]></value>
</attribute>
<attribute name="FILTER_SEPARATOR" type="str"><value><![CDATA[|]]></value>
</attribute>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fb2eb0>]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="__all__" type="tuple"><value><![CDATA[('Template', 'Context', 'RequestContext', 'compile_string')]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="TOKEN_BLOCK" type="int"><value><![CDATA[2]]></value>
</attribute>
<attribute name="VARIABLE_ATTRIBUTE_SEPARATOR" type="str"><value><![CDATA[.]]></value>
</attribute>
<attribute name="filter_raw_string" type="str"><value><![CDATA[
^(?P<constant>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
^(?P<var>[\w\.]+|[-+\.]?\d[\d\.e]*)|
 (?:\|
     (?P<filter_name>\w+)
         (?:\:
             (?:
              (?P<constant_arg>(?:\_\("[^"\\]*(?:\\.[^"\\]*)*"\)|\_\('[^'\\]*(?:\\.[^'\\]*)*'\)|"[^"\\]*(?:\\.[^"\\]*)*"|'[^'\\]*(?:\\.[^'\\]*)*'))|
              (?P<var_arg>[\w\.]+|[-+\.]?\d[\d\.e]*)
             )
         )?
 )]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
</package>
<package name="django.template.response" file="/django/template/response.pyc"><doc></doc>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<class name="TemplateResponse"></class>
<class name="ContentNotRenderedError"></class>
<class name="SimpleTemplateResponse"></class>
</package>
<package name="django.template.debug" file="/django/template/debug.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="localize" module="django.utils.formats"></import_function>
<import_function name="escape" module="django.utils.html"></import_function>
<import_class name="SafeData" module="django.utils.safestring"></import_class>
<import_class name="Parser" module="django.template.base"></import_class>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="Lexer" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="EscapeData" module="django.utils.safestring"></import_class>
<import_class name="VariableNode" module="django.template.base"></import_class>
<attribute name="tag_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9fb2eb0>]]></value>
</attribute>
<class name="DebugNodeList"></class>
<class name="DebugParser"></class>
<class name="DebugLexer"></class>
<class name="DebugVariableNode"></class>
</package>
<package name="django.template.loader_tags" file="/django/template/loader_tags.pyc"><doc></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_function name="token_kwargs" module="django.template.defaulttags"></import_function>
<import_function name="get_template" module="django.template.loader"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="TextNode" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<attribute name="BLOCK_CONTEXT_KEY" type="str"><value><![CDATA[block_context]]></value>
</attribute>
<function name="do_extends"><doc><![CDATA[
    Signal that this template extends a parent template.

    This tag may be used in two ways: ``{% extends "base" %}`` (with quotes)
    uses the literal value "base" as the name of the parent template to extend,
    or ``{% extends variable %}`` uses the value of ``variable`` as either the
    name of the parent template to extend (if it evaluates to a string) or as
    the parent tempate itelf (if it evaluates to a Template object).
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_include"><doc><![CDATA[
    Loads a template and renders it with the current context. You can pass
    additional context using keyword arguments.

    Example::

        {% include "foo/some_include" %}
        {% include "foo/some_include" with bar="BAZZ!" baz="BING!" %}

    Use the ``only`` argument to exclude the current context when rendering
    the included template::

        {% include "foo/some_include" only %}
        {% include "foo/some_include" with bar="1" only %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_block"><doc><![CDATA[
    Define a block that can be overridden by child templates.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<class name="ExtendsNode"></class>
<class name="ExtendsError"></class>
<class name="ConstantIncludeNode"></class>
<class name="BaseIncludeNode"></class>
<class name="BlockContext"></class>
<class name="BlockNode"></class>
<class name="IncludeNode"></class>
</package>
<package name="django.template.smartif" file="/django/template/smartif.pyc"><doc><![CDATA[
Parser and utilities for the smart 'if' tag
]]></doc>
<depends name="operator"></depends>
<attribute name="OPERATORS" type="dict"><value><![CDATA[{'and': <class 'django.template.smartif.Operator'>, '>=': <class 'django.template.smartif.Operator'>, 'not in': <class 'django.template.smartif.Operator'>, '==': <class 'django.template.smartif.Operator'>, '<=': <class 'django.template.smartif.Operator'>, 'in': <class 'django.template.smartif.Operator'>, 'not': <class 'django.template.smartif.Operator'>, '!=': <class 'django.template.smartif.Operator'>, 'or': <class 'django.template.smartif.Operator'>, '=': <class 'django.template.smartif.Operator'>, '<': <class 'django.template.smartif.Operator'>, '>': <class 'django.template.smartif.Operator'>}]]></value>
</attribute>
<attribute name="key" type="str"><value><![CDATA[>]]></value>
</attribute>
<attribute name="EndToken" type="EndToken"><value><![CDATA[()]]></value>
</attribute>
<function name="prefix"><doc><![CDATA[
    Creates a prefix operator, given a binding power and a function that
    evaluates the node.
    ]]></doc>
<argument name="bp"></argument>
<argument name="func"></argument>
</function>
<function name="infix"><doc><![CDATA[
    Creates an infix operator, given a binding power and a function that
    evaluates the node
    ]]></doc>
<argument name="bp"></argument>
<argument name="func"></argument>
</function>
<class name="TokenBase"></class>
<class name="Literal"></class>
<class name="IfParser"></class>
<class name="op"></class>
</package>
<package name="django.template.defaulttags" file="/django/template/defaulttags.pyc"><doc><![CDATA[Default tags used by the template system, available to all templates.]]></doc>
<depends name="re"></depends>
<depends name="sys"></depends>
<depends name="itertools"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="register" type="Library" module="django.template.base"></import_attribute>
<import_function name="get_library" module="django.template.base"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_class name="NodeList" module="django.template.base"></import_class>
<import_class name="InvalidTemplateLibrary" module="django.template.base"></import_class>
<import_class name="Literal" module="django.template.smartif"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="Node" module="django.template.base"></import_class>
<import_class name="TemplateSyntaxError" module="django.template.base"></import_class>
<import_class name="IfParser" module="django.template.smartif"></import_class>
<import_class name="VariableDoesNotExist" module="django.template.base"></import_class>
<import_class name="Variable" module="django.template.base"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="itertools_cycle" module="itertools"></import_class>
<import_class name="Library" module="django.template.base"></import_class>
<import_class name="groupby" module="itertools"></import_class>
<attribute name="kwarg_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0x9edc560>]]></value>
</attribute>
<attribute name="SINGLE_BRACE_START" type="str"><value><![CDATA[{]]></value>
</attribute>
<attribute name="SINGLE_BRACE_END" type="str"><value><![CDATA[}]]></value>
</attribute>
<attribute name="BLOCK_TAG_END" type="str"><value><![CDATA[%}]]></value>
</attribute>
<attribute name="BLOCK_TAG_START" type="str"><value><![CDATA[{%]]></value>
</attribute>
<attribute name="VARIABLE_TAG_START" type="str"><value><![CDATA[{{]]></value>
</attribute>
<attribute name="COMMENT_TAG_START" type="str"><value><![CDATA[{#]]></value>
</attribute>
<attribute name="COMMENT_TAG_END" type="str"><value><![CDATA[#}]]></value>
</attribute>
<attribute name="VARIABLE_TAG_END" type="str"><value><![CDATA[}}]]></value>
</attribute>
<function name="comment"><doc><![CDATA[
    Ignores everything between ``{% comment %}`` and ``{% endcomment %}``.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="load"><doc><![CDATA[
    Loads a custom template tag set.

    For example, to load the template tags in
    ``django/templatetags/news/photos.py``::

        {% load news.photos %}

    Can also be used to load an individual tag/filter from
    a library::

        {% load byline from news %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifchanged"><doc><![CDATA[
    Checks if a value has changed from the last iteration of a loop.

    The 'ifchanged' block tag is used within a loop. It has two possible uses.

    1. Checks its own rendered contents against its previous state and only
       displays the content if it has changed. For example, this displays a
       list of days, only displaying the month if it changes::

            <h1>Archive for {{ year }}</h1>

            {% for date in days %}
                {% ifchanged %}<h3>{{ date|date:"F" }}</h3>{% endifchanged %}
                <a href="{{ date|date:"M/d"|lower }}/">{{ date|date:"j" }}</a>
            {% endfor %}

    2. If given a variable, check whether that variable has changed.
       For example, the following shows the date every time it changes, but
       only shows the hour if both the hour and the date have changed::

            {% for date in days %}
                {% ifchanged date.date %} {{ date.date }} {% endifchanged %}
                {% ifchanged date.hour date.date %}
                    {{ date.hour }}
                {% endifchanged %}
            {% endfor %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="autoescape"><doc><![CDATA[
    Force autoescape behaviour for this block.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="csrf_token"><doc></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifequal"><doc><![CDATA[
    Outputs the contents of the block if the two arguments equal each other.

    Examples::

        {% ifequal user.id comment.user_id %}
            ...
        {% endifequal %}

        {% ifnotequal user.id comment.user_id %}
            ...
        {% else %}
            ...
        {% endifnotequal %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="include_is_allowed"><doc></doc>
<argument name="filepath"></argument>
</function>
<function name="firstof"><doc><![CDATA[
    Outputs the first variable passed that is not False, without escaping.

    Outputs nothing if all the passed variables are False.

    Sample usage::

        {% firstof var1 var2 var3 %}

    This is equivalent to::

        {% if var1 %}
            {{ var1|safe }}
        {% else %}{% if var2 %}
            {{ var2|safe }}
        {% else %}{% if var3 %}
            {{ var3|safe }}
        {% endif %}{% endif %}{% endif %}

    but obviously much cleaner!

    You can also use a literal string as a fallback value in case all
    passed variables are False::

        {% firstof var1 var2 var3 "fallback value" %}

    If you want to escape the output, use a filter tag::

        {% filter force_escape %}
            {% firstof var1 var2 var3 "fallback value" %}
        {% endfilter %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ifnotequal"><doc><![CDATA[
    Outputs the contents of the block if the two arguments are not equal.
    See ifequal.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="token_kwargs"><doc><![CDATA[
    A utility method for parsing token keyword arguments.

    :param bits: A list containing remainder of the token (split by spaces)
        that is to be checked for arguments. Valid arguments will be removed
        from this list.

    :param support_legacy: If set to true ``True``, the legacy format
        ``1 as foo`` will be accepted. Otherwise, only the standard ``foo=1``
        format is allowed.

    :returns: A dictionary of the arguments retrieved from the ``bits`` token
        list.

    There is no requirement for all remaining token ``bits`` to be keyword
    arguments, so the dictionary will be returned as soon as an invalid
    argument format is reached.
    ]]></doc>
<argument name="bits"></argument>
<argument name="parser"></argument>
<argument name="support_legacy" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="do_filter"><doc><![CDATA[
    Filters the contents of the block through variable filters.

    Filters can also be piped through each other, and they can have
    arguments -- just like in variable syntax.

    Sample usage::

        {% filter force_escape|lower %}
            This text will be HTML-escaped, and will appear in lowercase.
        {% endfilter %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_with"><doc><![CDATA[
    Adds one or more values to the context (inside of this block) for caching
    and easy access.

    For example::

        {% with total=person.some_sql_method %}
            {{ total }} object{{ total|pluralize }}
        {% endwith %}

    Multiple values can be added to the context::

        {% with foo=1 bar=2 %}
            ...
        {% endwith %}

    The legacy format of ``{% with person.some_sql_method as total %}`` is
    still accepted.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="spaceless"><doc><![CDATA[
    Removes whitespace between HTML tags, including tab and newline characters.

    Example usage::

        {% spaceless %}
            <p>
                <a href="foo/">Foo</a>
            </p>
        {% endspaceless %}

    This example would return this HTML::

        <p><a href="foo/">Foo</a></p>

    Only space between *tags* is normalized -- not space between tags and text.
    In this example, the space around ``Hello`` won't be stripped::

        {% spaceless %}
            <strong>
                Hello
            </strong>
        {% endspaceless %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="ssi"><doc><![CDATA[
    Outputs the contents of a given file into the page.

    Like a simple "include" tag, the ``ssi`` tag includes the contents
    of another file -- which must be specified using an absolute path --
    in the current page::

        {% ssi /home/html/ljworld.com/includes/right_generic.html %}

    If the optional "parsed" parameter is given, the contents of the included
    file are evaluated as template code, with the current context::

        {% ssi /home/html/ljworld.com/includes/right_generic.html parsed %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_for"><doc><![CDATA[
    Loops over each item in an array.

    For example, to display a list of athletes given ``athlete_list``::

        <ul>
        {% for athlete in athlete_list %}
            <li>{{ athlete.name }}</li>
        {% endfor %}
        </ul>

    You can loop over a list in reverse by using
    ``{% for obj in list reversed %}``.

    You can also unpack multiple values from a two-dimensional array::

        {% for key,value in dict.items %}
            {{ key }}: {{ value }}
        {% endfor %}

    The ``for`` tag can take an optional ``{% empty %}`` clause that will
    be displayed if the given array is empty or could not be found::

        <ul>
          {% for athlete in athlete_list %}
            <li>{{ athlete.name }}</li>
          {% empty %}
            <li>Sorry, no athletes in this list.</li>
          {% endfor %}
        <ul>

    The above is equivalent to -- but shorter, cleaner, and possibly faster
    than -- the following::

        <ul>
          {% if althete_list %}
            {% for athlete in athlete_list %}
              <li>{{ athlete.name }}</li>
            {% endfor %}
          {% else %}
            <li>Sorry, no athletes in this list.</li>
          {% endif %}
        </ul>

    The for loop sets a number of variables available within the loop:

        ==========================  ================================================
        Variable                    Description
        ==========================  ================================================
        ``forloop.counter``         The current iteration of the loop (1-indexed)
        ``forloop.counter0``        The current iteration of the loop (0-indexed)
        ``forloop.revcounter``      The number of iterations from the end of the
                                    loop (1-indexed)
        ``forloop.revcounter0``     The number of iterations from the end of the
                                    loop (0-indexed)
        ``forloop.first``           True if this is the first time through the loop
        ``forloop.last``            True if this is the last time through the loop
        ``forloop.parentloop``      For nested loops, this is the loop "above" the
                                    current one
        ==========================  ================================================

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="regroup"><doc><![CDATA[
    Regroups a list of alike objects by a common attribute.

    This complex tag is best illustrated by use of an example:  say that
    ``people`` is a list of ``Person`` objects that have ``first_name``,
    ``last_name``, and ``gender`` attributes, and you'd like to display a list
    that looks like:

        * Male:
            * George Bush
            * Bill Clinton
        * Female:
            * Margaret Thatcher
            * Colendeeza Rice
        * Unknown:
            * Pat Smith

    The following snippet of template code would accomplish this dubious task::

        {% regroup people by gender as grouped %}
        <ul>
        {% for group in grouped %}
            <li>{{ group.grouper }}
            <ul>
                {% for item in group.list %}
                <li>{{ item }}</li>
                {% endfor %}
            </ul>
        {% endfor %}
        </ul>

    As you can see, ``{% regroup %}`` populates a variable with a list of
    objects with ``grouper`` and ``list`` attributes.  ``grouper`` contains the
    item that was grouped by; ``list`` contains the list of objects that share
    that ``grouper``.  In this case, ``grouper`` would be ``Male``, ``Female``
    and ``Unknown``, and ``list`` is the list of people with those genders.

    Note that ``{% regroup %}`` does not work when the list to be grouped is not
    sorted by the key you are grouping by!  This means that if your list of
    people was not sorted by gender, you'd need to make sure it is sorted
    before using it, i.e.::

        {% regroup people|dictsort:"gender" by gender as grouped %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_ifequal"><doc></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
<argument name="negate"></argument>
</function>
<function name="templatetag"><doc><![CDATA[
    Outputs one of the bits used to compose template tags.

    Since the template system has no concept of "escaping", to display one of
    the bits used in template tags, you must use the ``{% templatetag %}`` tag.

    The argument tells which template bit to output:

        ==================  =======
        Argument            Outputs
        ==================  =======
        ``openblock``       ``{%``
        ``closeblock``      ``%}``
        ``openvariable``    ``{{``
        ``closevariable``   ``}}``
        ``openbrace``       ``{``
        ``closebrace``      ``}``
        ``opencomment``     ``{#``
        ``closecomment``    ``#}``
        ==================  =======
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="now"><doc><![CDATA[
    Displays the date, formatted according to the given string.

    Uses the same format as PHP's ``date()`` function; see http://php.net/date
    for all the possible values.

    Sample usage::

        It is {% now "jS F Y H:i" %}
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="cycle"><doc><![CDATA[
    Cycles among the given strings each time this tag is encountered.

    Within a loop, cycles among the given strings each time through
    the loop::

        {% for o in some_list %}
            <tr class="{% cycle 'row1' 'row2' %}">
                ...
            </tr>
        {% endfor %}

    Outside of a loop, give the values a unique name the first time you call
    it, then use that name each sucessive time through::

            <tr class="{% cycle 'row1' 'row2' 'row3' as rowcolors %}">...</tr>
            <tr class="{% cycle rowcolors %}">...</tr>
            <tr class="{% cycle rowcolors %}">...</tr>

    You can use any number of values, separated by spaces. Commas can also
    be used to separate values; if a comma is used, the cycle values are
    interpreted as literal strings.

    The optional flag "silent" can be used to prevent the cycle declaration
    from returning any value::

        {% cycle 'row1' 'row2' as rowcolors silent %}{# no value here #}
        {% for o in some_list %}
            <tr class="{% cycle rowcolors %}">{# first value will be "row1" #}
                ...
            </tr>
        {% endfor %}

    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="widthratio"><doc><![CDATA[
    For creating bar charts and such, this tag calculates the ratio of a given
    value to a maximum value, and then applies that ratio to a constant.

    For example::

        <img src='bar.gif' height='10' width='{% widthratio this_value max_value 100 %}' />

    Above, if ``this_value`` is 175 and ``max_value`` is 200, the image in
    the above example will be 88 pixels wide (because 175/200 = .875;
    .875 * 100 = 87.5 which is rounded up to 88).
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="url"><doc><![CDATA[
    Returns an absolute URL matching given view with its parameters.

    This is a way to define links that aren't tied to a particular URL
    configuration::

        {% url path.to.some_view arg1 arg2 %}

        or

        {% url path.to.some_view name1=value1 name2=value2 %}

    The first argument is a path to a view. It can be an absolute python path
    or just ``app_name.view_name`` without the project name if the view is
    located inside the project.  Other arguments are comma-separated values
    that will be filled in place of positional and keyword arguments in the
    URL. All arguments for the URL should be present.

    For example if you have a view ``app_name.client`` taking client's id and
    the corresponding line in a URLconf looks like this::

        ('^client/(\d+)/$', 'app_name.client')

    and this app's URLconf is included into the project's URLconf under some
    path::

        ('^clients/', include('project_name.app_name.urls'))

    then in a template you can create a link for a certain client like this::

        {% url app_name.client client.id %}

    The URL will look like ``/clients/client/123/``.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="do_if"><doc><![CDATA[
    The ``{% if %}`` tag evaluates a variable, and if that variable is "true"
    (i.e., exists, is not empty, and is not a false boolean value), the
    contents of the block are output:

    ::

        {% if athlete_list %}
            Number of athletes: {{ athlete_list|count }}
        {% else %}
            No athletes.
        {% endif %}

    In the above, if ``athlete_list`` is not empty, the number of athletes will
    be displayed by the ``{{ athlete_list|count }}`` variable.

    As you can see, the ``if`` tag can take an option ``{% else %}`` clause
    that will be displayed if the test fails.

    ``if`` tags may use ``or``, ``and`` or ``not`` to test a number of
    variables or to negate a given variable::

        {% if not athlete_list %}
            There are no athletes.
        {% endif %}

        {% if athlete_list or coach_list %}
            There are some athletes or some coaches.
        {% endif %}

        {% if athlete_list and coach_list %}
            Both atheletes and coaches are available.
        {% endif %}

        {% if not athlete_list or coach_list %}
            There are no athletes, or there are some coaches.
        {% endif %}

        {% if athlete_list and not coach_list %}
            There are some athletes and absolutely no coaches.
        {% endif %}

    Comparison operators are also available, and the use of filters is also
    allowed, for example::

        {% if articles|length >= 5 %}...{% endif %}

    Arguments and operators _must_ have a space between them, so
    ``{% if 1>2 %}`` is not a valid if tag.

    All supported operators are: ``or``, ``and``, ``in``, ``not in``
    ``==`` (or ``=``), ``!=``, ``>``, ``>=``, ``<`` and ``<=``.

    Operator precedence follows Python.
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<function name="debug"><doc><![CDATA[
    Outputs a whole load of debugging information, including the current
    context and imported modules.

    Sample usage::

        <pre>
            {% debug %}
        </pre>
    ]]></doc>
<argument name="parser"></argument>
<argument name="token"></argument>
</function>
<class name="IfEqualNode"></class>
<class name="AutoEscapeControlNode"></class>
<class name="RegroupNode"></class>
<class name="FilterNode"></class>
<class name="FirstOfNode"></class>
<class name="SpacelessNode"></class>
<class name="IfNode"></class>
<class name="URLNode"></class>
<class name="IfChangedNode"></class>
<class name="DebugNode"></class>
<class name="TemplateIfParser"></class>
<class name="WithNode"></class>
<class name="NowNode"></class>
<class name="ForNode"></class>
<class name="WidthRatioNode"></class>
<class name="LoadNode"></class>
<class name="CsrfTokenNode"></class>
<class name="SsiNode"></class>
<class name="CycleNode"></class>
<class name="CommentNode"></class>
<class name="TemplateLiteral"></class>
<class name="TemplateTagNode"></class>
</package>
<package name="django.contrib.admin.actions" file="/django/contrib/admin/actions.pyc"><doc><![CDATA[
Built-in, globally-available admin actions.
]]></doc>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="ugettext_lazy" module="django.utils.translation"></import_function>
<import_function name="get_deleted_objects" module="django.contrib.admin.util"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="model_ngettext" module="django.contrib.admin.util"></import_function>
<import_class name="PermissionDenied" module="django.core.exceptions"></import_class>
<function name="delete_selected"><doc><![CDATA[
    Default action which deletes the selected objects.

    This action first displays a confirmation page whichs shows all the
    deleteable objects, or, if the user has no permission one of the related
    childs (foreignkeys), a "permission denied" message.

    Next, it delets all selected objects and redirects back to the change list.
    ]]></doc>
<argument name="modeladmin"></argument>
<argument name="request"></argument>
<argument name="queryset"></argument>
</function>
</package>
<package name="django.contrib.admin.sites" file="/django/contrib/admin/sites.pyc"><doc></doc>
<depends name="re"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="never_cache" module="django.views.decorators.cache"></import_function>
<import_function name="capfirst" module="django.utils.text"></import_function>
<import_function name="update_wrapper" module="django.utils.functional"></import_function>
<import_function name="mark_safe" module="django.utils.safestring"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="AdminAuthenticationForm" module="django.contrib.admin.forms"></import_class>
<import_class name="ModelBase" module="django.db.models.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="ModelAdmin" module="django.contrib.admin.options"></import_class>
<attribute name="site" type="AdminSite"><value><![CDATA[<django.contrib.admin.sites.AdminSite object at 0xa1031ec>]]></value>
</attribute>
<attribute name="LOGIN_FORM_KEY" type="str"><value><![CDATA[this_is_the_login_form]]></value>
</attribute>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<class name="NotRegistered"></class>
<class name="AlreadyRegistered"></class>
<class name="AdminSite"></class>
</package>
<package name="django.contrib.contenttypes.views" file="/django/contrib/contenttypes/views.pyc"><doc></doc>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_class name="ObjectDoesNotExist" module="django.core.exceptions"></import_class>
<import_class name="Site" module="django.contrib.sites.models"></import_class>
<import_class name="ContentType" module="django.contrib.contenttypes.models"></import_class>
<function name="shortcut"><doc><![CDATA[Redirect to an object's page based on a content-type ID and an object ID.]]></doc>
<argument name="request"></argument>
<argument name="content_type_id"></argument>
<argument name="object_id"></argument>
</function>
</package>
<package name="django.contrib.sites.models" file="/django/contrib/sites/models.pyc"><doc></doc>
<import_function name="_" module="django.utils.translation"></import_function>
<attribute name="SITE_CACHE" type="dict"><value></value>
</attribute>
<function name="get_current_site"><doc><![CDATA[
    Checks if contrib.sites is installed and returns either the current
    ``Site`` object or a ``RequestSite`` object based on the request.
    ]]></doc>
<argument name="request"></argument>
</function>
<class name="SiteManager"></class>
<class name="Site"></class>
<class name="RequestSite"></class>
</package>
<package name="django.views.decorators.cache" file="/django/views/decorators/cache.pyc"><doc></doc>
<depends name="functools"></depends>
<import_function name="add_never_cache_headers" module="django.utils.cache"></import_function>
<import_function name="wraps" module="functools"></import_function>
<import_function name="available_attrs" module="django.utils.decorators"></import_function>
<import_function name="patch_cache_control" module="django.utils.cache"></import_function>
<import_function name="decorator_from_middleware_with_args" module="django.utils.decorators"></import_function>
<import_class name="CacheMiddleware" module="django.middleware.cache"></import_class>
<function name="cache_control" kwargs="kwargs"><doc></doc>
</function>
<function name="cache_page" args="args" kwargs="kwargs"><doc><![CDATA[
    Decorator for views that tries getting the page from the cache and
    populates the cache if the page isn't in the cache yet.

    The cache is keyed by the URL and some data from the headers.
    Additionally there is the key prefix that is used to distinguish different
    cache areas in a multi-site setup. You could use the
    sites.get_current().domain, for example, as that is unique across a Django
    project.

    Additionally, all headers from the response's Vary header will be taken
    into account on caching -- just like the middleware does.
    ]]></doc>
</function>
<function name="never_cache"><doc><![CDATA[
    Decorator that adds headers to a response so that it will
    never be cached.
    ]]></doc>
<argument name="view_func"></argument>
</function>
</package>
<package name="django.middleware.cache" file="/django/middleware/cache.pyc"><doc><![CDATA[
Cache middleware. If enabled, each Django-powered page will be cached based on
URL. The canonical way to enable cache middleware is to set
``UpdateCacheMiddleware`` as your first piece of middleware, and
``FetchFromCacheMiddleware`` as the last::

    MIDDLEWARE_CLASSES = [
        'django.middleware.cache.UpdateCacheMiddleware',
        ...
        'django.middleware.cache.FetchFromCacheMiddleware'
    ]

This is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run
last during the response phase, which processes middleware bottom-up;
``FetchFromCacheMiddleware`` needs to run last during the request phase, which
processes middleware top-down.

The single-class ``CacheMiddleware`` can be used for some simple sites.
However, if any other piece of middleware needs to affect the cache key, you'll
need to use the two-part ``UpdateCacheMiddleware`` and
``FetchFromCacheMiddleware``. This'll most often happen when you're using
Django's ``LocaleMiddleware``.

More details about how the caching works:

* Only GET or HEAD-requests with status code 200 are cached.

* The number of seconds each page is stored for is set by the "max-age" section
  of the response's "Cache-Control" header, falling back to the
  CACHE_MIDDLEWARE_SECONDS setting if the section was not found.

* If CACHE_MIDDLEWARE_ANONYMOUS_ONLY is set to True, only anonymous requests
  (i.e., those not made by a logged-in user) will be cached. This is a simple
  and effective way of avoiding the caching of the Django admin (and any other
  user-specific content).

* This middleware expects that a HEAD request is answered with the same response
  headers exactly like the corresponding GET request.

* When a hit occurs, a shallow copy of the original response object is returned
  from process_request.

* Pages will be cached based on the contents of the request headers listed in
  the response's "Vary" header.

* This middleware also sets ETag, Last-Modified, Expires and Cache-Control
  headers on the response object.

]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="get_cache" module="django.core.cache"></import_function>
<import_function name="patch_response_headers" module="django.utils.cache"></import_function>
<import_function name="get_cache_key" module="django.utils.cache"></import_function>
<import_function name="get_max_age" module="django.utils.cache"></import_function>
<import_function name="learn_cache_key" module="django.utils.cache"></import_function>
<attribute name="DEFAULT_CACHE_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="CacheMiddleware"></class>
<class name="UpdateCacheMiddleware"></class>
<class name="FetchFromCacheMiddleware"></class>
</package>
<package name="django.shortcuts" file="/django/shortcuts/__init__.pyc"><doc><![CDATA[
This module collects helper functions and classes that "span" multiple levels
of MVC. In other words, these functions/classes introduce controlled coupling
for convenience's sake.
]]></doc>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="QuerySet" module="django.db.models.query"></import_class>
<import_class name="Manager" module="django.db.models.manager"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="HttpResponsePermanentRedirect" module="django.http"></import_class>
<function name="redirect" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns an HttpResponseRedirect to the apropriate URL for the arguments
    passed.

    The arguments could be:

        * A model: the model's `get_absolute_url()` function will be called.

        * A view name, possibly with arguments: `urlresolvers.reverse()` will
          be used to reverse-resolve the name.

        * A URL, which will be used as-is for the redirect location.

    By default issues a temporary redirect; pass permanent=True to issue a
    permanent redirect
    ]]></doc>
<argument name="to"></argument>
</function>
<function name="get_list_or_404" args="args" kwargs="kwargs"><doc><![CDATA[
    Uses filter() to return a list of objects, or raise a Http404 exception if
    the list is empty.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the filter() query.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="render" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns a HttpResponse whose content is filled with the result of calling
    django.template.loader.render_to_string() with the passed arguments.
    Uses a RequestContext by default.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="_get_queryset"><doc><![CDATA[
    Returns a QuerySet from a Model, Manager, or QuerySet. Created to make
    get_object_or_404 and get_list_or_404 more DRY.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="get_object_or_404" args="args" kwargs="kwargs"><doc><![CDATA[
    Uses get() to return an object, or raises a Http404 exception if the object
    does not exist.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the get() query.

    Note: Like with get(), an MultipleObjectsReturned will be raised if more than one
    object is found.
    ]]></doc>
<argument name="klass"></argument>
</function>
<function name="render_to_response" args="args" kwargs="kwargs"><doc><![CDATA[
    Returns a HttpResponse whose content is filled with the result of calling
    django.template.loader.render_to_string() with the passed arguments.
    ]]></doc>
</function>
</package>
<package name="django.contrib.auth.create_superuser" file="/django/contrib/auth/create_superuser.pyc"><doc><![CDATA[
Create a superuser from the command line. Deprecated; use manage.py
createsuperuser instead.
]]></doc>
</package>
<package name="django.contrib.auth.urls" file="/django/contrib/auth/urls.pyc"><doc></doc>
<import_function name="include" module="django.conf.urls.defaults"></import_function>
<import_function name="patterns" module="django.conf.urls.defaults"></import_function>
<import_function name="url" module="django.conf.urls.defaults"></import_function>
<attribute name="handler404" type="str"><value><![CDATA[django.views.defaults.page_not_found]]></value>
</attribute>
<attribute name="handler500" type="str"><value><![CDATA[django.views.defaults.server_error]]></value>
</attribute>
<attribute name="urlpatterns" type="list"><value><![CDATA[[<RegexURLPattern None ^login/$>, <RegexURLPattern None ^logout/$>, <RegexURLPattern None ^password_change/$>, <RegexURLPattern None ^password_change/done/$>, <RegexURLPattern None ^password_reset/$>, <RegexURLPattern None ^password_reset/done/$>, <RegexURLPattern None ^reset/(?P<uidb36>[0-9A-Za-z]{1,13})-(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$>, <RegexURLPattern None ^reset/done/$>]]]></value>
</attribute>
</package>
<package name="django.conf.urls.defaults" file="/django/conf/urls/defaults.pyc"><doc></doc>
<import_class name="RegexURLResolver" module="django.core.urlresolvers"></import_class>
<import_class name="RegexURLPattern" module="django.core.urlresolvers"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<attribute name="__all__" type="list"><value><![CDATA[['handler404', 'handler500', 'include', 'patterns', 'url']]]></value>
</attribute>
<attribute name="handler404" type="str"><value><![CDATA[django.views.defaults.page_not_found]]></value>
</attribute>
<attribute name="handler500" type="str"><value><![CDATA[django.views.defaults.server_error]]></value>
</attribute>
<function name="include"><doc></doc>
<argument name="arg"></argument>
<argument name="namespace" type="NoneType"><value></value>
</argument>
<argument name="app_name" type="NoneType"><value></value>
</argument>
</function>
<function name="patterns" args="args"><doc></doc>
<argument name="prefix"></argument>
</function>
<function name="url"><doc></doc>
<argument name="regex"></argument>
<argument name="view"></argument>
<argument name="kwargs" type="NoneType"><value></value>
</argument>
<argument name="name" type="NoneType"><value></value>
</argument>
<argument name="prefix" type="str"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.auth.views" file="/django/contrib/auth/views.pyc"><doc></doc>
<depends name="urlparse"></depends>
<import_attribute name="default_token_generator" type="PasswordResetTokenGenerator" module="django.contrib.auth.tokens"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="auth_login" module="django.contrib.auth"></import_function>
<import_function name="never_cache" module="django.views.decorators.cache"></import_function>
<import_function name="login_required" module="django.contrib.auth.decorators"></import_function>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_function name="csrf_protect" module="django.utils.decorators"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_function name="reverse" module="django.core.urlresolvers"></import_function>
<import_function name="base36_to_int" module="django.utils.http"></import_function>
<import_function name="auth_logout" module="django.contrib.auth"></import_function>
<import_function name="render_to_response" module="django.shortcuts"></import_function>
<import_class name="RequestContext" module="django.template.context"></import_class>
<import_class name="AuthenticationForm" module="django.contrib.auth.forms"></import_class>
<import_class name="QueryDict" module="django.http"></import_class>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="PasswordResetForm" module="django.contrib.auth.forms"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="PasswordChangeForm" module="django.contrib.auth.forms"></import_class>
<import_class name="SetPasswordForm" module="django.contrib.auth.forms"></import_class>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<function name="logout_then_login"><doc><![CDATA[
    Logs out the user if he is logged in. Then redirects to the log-in page.
    ]]></doc>
<argument name="request"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset_confirm" args="args" kwargs="kwargs"><doc><![CDATA[
    View that checks the hash in a password reset link and presents a
    form for entering a new password.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="password_reset_done"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_reset_done.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="redirect_to_login"><doc><![CDATA[
    Redirects the user to the login page, passing the given 'next' page
    ]]></doc>
<argument name="next"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
</function>
<function name="logout"><doc><![CDATA[
    Logs out the user and displays 'You are logged out' message.
    ]]></doc>
<argument name="request"></argument>
<argument name="next_page" type="NoneType"><value></value>
</argument>
<argument name="template_name" type="str"><value><![CDATA[registration/logged_out.html]]></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset_complete"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_reset_complete.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="password_reset" args="args" kwargs="kwargs"><doc></doc>
<argument name="request"></argument>
</function>
<function name="password_change_done"><doc></doc>
<argument name="request"></argument>
<argument name="template_name" type="str"><value><![CDATA[registration/password_change_done.html]]></value>
</argument>
<argument name="current_app" type="NoneType"><value></value>
</argument>
<argument name="extra_context" type="NoneType"><value></value>
</argument>
</function>
<function name="login" args="args" kwargs="kwargs"><doc><![CDATA[
    Displays the login form and handles the login action.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="password_change" args="args" kwargs="kwargs"><doc></doc>
<argument name="request"></argument>
</function>
</package>
<package name="django.contrib.auth.decorators" file="/django/contrib/auth/decorators.pyc"><doc></doc>
<depends name="functools"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="wraps" module="functools"></import_function>
<import_function name="available_attrs" module="django.utils.decorators"></import_function>
<attribute name="REDIRECT_FIELD_NAME" type="str"><value><![CDATA[next]]></value>
</attribute>
<function name="login_required"><doc><![CDATA[
    Decorator for views that checks that the user is logged in, redirecting
    to the log-in page if necessary.
    ]]></doc>
<argument name="function" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
</function>
<function name="user_passes_test"><doc><![CDATA[
    Decorator for views that checks that the user passes the given test,
    redirecting to the log-in page if necessary. The test should be a callable
    that takes the user object and returns True if the user passes.
    ]]></doc>
<argument name="test_func"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
<argument name="redirect_field_name" type="str"><value><![CDATA[next]]></value>
</argument>
</function>
<function name="permission_required"><doc><![CDATA[
    Decorator for views that checks whether a user has a particular permission
    enabled, redirecting to the log-in page if necessary.
    ]]></doc>
<argument name="perm"></argument>
<argument name="login_url" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.contrib.auth.forms" file="/django/contrib/auth/forms.pyc"><doc></doc>
<import_attribute name="default_token_generator" type="PasswordResetTokenGenerator" module="django.contrib.auth.tokens"></import_attribute>
<import_function name="authenticate" module="django.contrib.auth"></import_function>
<import_function name="int_to_base36" module="django.utils.http"></import_function>
<import_function name="get_current_site" module="django.contrib.sites.models"></import_function>
<import_function name="_" module="django.utils.translation"></import_function>
<import_class name="User" module="django.contrib.auth.models"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<class name="UserChangeForm"></class>
<class name="UserCreationForm"></class>
<class name="SetPasswordForm"></class>
<class name="PasswordChangeForm"></class>
<class name="AuthenticationForm"></class>
<class name="PasswordResetForm"></class>
<class name="AdminPasswordChangeForm"></class>
</package>
<package name="django.contrib.auth.signals" file="/django/contrib/auth/signals.pyc"><doc></doc>
<import_attribute name="user_logged_out" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_attribute name="user_logged_in" type="Signal" module="django.dispatch.dispatcher"></import_attribute>
<import_class name="Signal" module="django.dispatch.dispatcher"></import_class>
</package>
<package name="django.contrib.messages.storage.session" file="/django/contrib/messages/storage/session.pyc"><doc></doc>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<class name="SessionStorage"></class>
</package>
<package name="django.contrib.messages.storage.fallback" file="/django/contrib/messages/storage/fallback.pyc"><doc></doc>
<import_class name="SessionStorage" module="django.contrib.messages.storage.session"></import_class>
<import_class name="CookieStorage" module="django.contrib.messages.storage.cookie"></import_class>
<import_class name="BaseStorage" module="django.contrib.messages.storage.base"></import_class>
<class name="FallbackStorage"></class>
</package>
<package name="django.contrib.messages.api" file="/django/contrib/messages/api.pyc"><doc></doc>
<import_function name="lazy" module="django.utils.functional"></import_function>
<import_function name="default_storage" module="django.contrib.messages.storage"></import_function>
<import_function name="memoize" module="django.utils.functional"></import_function>
<attribute name="__all__" type="tuple"><value><![CDATA[('add_message', 'get_messages', 'get_level', 'set_level', 'debug', 'info', 'success', 'warning', 'error')]]></value>
</attribute>
<function name="info"><doc><![CDATA[
    Adds a message with the ``INFO`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="success"><doc><![CDATA[
    Adds a message with the ``SUCCESS`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_messages"><doc><![CDATA[
    Returns the message storage on the request if it exists, otherwise returns
    user.message_set.all() as the old auth context processor did.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="get_level"><doc><![CDATA[
    Returns the minimum level of messages to be recorded.

    The default level is the ``MESSAGE_LEVEL`` setting. If this is not found,
    the ``INFO`` level is used.
    ]]></doc>
<argument name="request"></argument>
</function>
<function name="warning"><doc><![CDATA[
    Adds a message with the ``WARNING`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="set_level"><doc><![CDATA[
    Sets the minimum level of messages to be recorded, returning ``True`` if
    the level was recorded successfully.

    If set to ``None``, the default level will be used (see the ``get_level``
    method).
    ]]></doc>
<argument name="request"></argument>
<argument name="level"></argument>
</function>
<function name="error"><doc><![CDATA[
    Adds a message with the ``ERROR`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="debug"><doc><![CDATA[
    Adds a message with the ``DEBUG`` level.
    ]]></doc>
<argument name="request"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="add_message"><doc><![CDATA[
    Attempts to add a message to the request using the 'messages' app, falling
    back to the user's message_set if MessageMiddleware hasn't been enabled.
    ]]></doc>
<argument name="request"></argument>
<argument name="level"></argument>
<argument name="message"></argument>
<argument name="extra_tags" type="str"><value></value>
</argument>
<argument name="fail_silently" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="MessageFailure"></class>
</package>
<package name="django.core.paginator" file="/django/core/paginator.pyc"><doc></doc>
<depends name="math"></depends>
<import_attribute name="ceil" type="builtin_function_or_method" module="math"></import_attribute>
<class name="Paginator"></class>
<class name="InvalidPage"></class>
<class name="EmptyPage"></class>
<class name="QuerySetPaginator"></class>
<class name="PageNotAnInteger"></class>
<class name="Page"></class>
</package>
<package name="django.core.management" file="/django/core/management/__init__.pyc"><doc></doc>
<depends name="imp"></depends>
<depends name="optparse"></depends>
<depends name="sys"></depends>
<depends name="os"></depends>
<import_function name="get_version" module="django"></import_function>
<import_function name="handle_default_options" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="OptionParser" module="optparse"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<attribute name="NO_DEFAULT" type="tuple"><value><![CDATA[('NO', 'DEFAULT')]]></value>
</attribute>
<attribute name="_commands" type="dict"><value><![CDATA[{'dbshell': 'django.core', 'compilemessages': 'django.core', 'dumpdata': 'django.core', 'sql': 'django.core', 'sqlcustom': 'django.core', 'createcachetable': 'django.core', 'flush': 'django.core', 'syncdb': 'django.core', 'sqlinitialdata': 'django.core', 'runserver': 'django.core', 'cleanup': 'django.core', 'runfcgi': 'django.core', 'test': 'django.core', 'sqlclear': 'django.core', 'sqlreset': 'django.core', 'shell': 'django.core', 'sqlsequencereset': 'django.core', 'testserver': 'django.core', 'makemessages': 'django.core', 'validate': 'django.core', 'sqlall': 'django.core', 'reset': 'django.core', 'diffsettings': 'django.core', 'harvester': 'dox.harvester', 'inspectdb': 'django.core', 'startapp': <django.core.management.commands.startapp.ProjectCommand object at 0xb6ff938c>, 'sqlflush': 'django.core', 'loaddata': 'django.core', 'sqlindexes': 'django.core'}]]></value>
</attribute>
<function name="find_management_module"><doc><![CDATA[
    Determines the path to the management module for the given app_name,
    without actually importing the application or the management module.

    Raises ImportError if the management module cannot be found for any reason.
    ]]></doc>
<argument name="app_name"></argument>
</function>
<function name="execute_manager"><doc><![CDATA[
    Like execute_from_command_line(), but for use by manage.py, a
    project-specific django-admin.py utility.
    ]]></doc>
<argument name="settings_mod"></argument>
<argument name="argv" type="NoneType"><value></value>
</argument>
</function>
<function name="find_commands"><doc><![CDATA[
    Given a path to a management directory, returns a list of all the command
    names that are available.

    Returns an empty list if no commands are defined.
    ]]></doc>
<argument name="management_dir"></argument>
</function>
<function name="call_command" args="args" kwargs="options"><doc><![CDATA[
    Calls the given command, with the given options and args/kwargs.

    This is the primary API you should use for calling specific commands.

    Some examples:
        call_command('syncdb')
        call_command('shell', plain=True)
        call_command('sqlall', 'myapp')
    ]]></doc>
<argument name="name"></argument>
</function>
<function name="execute_from_command_line"><doc><![CDATA[
    A simple method that runs a ManagementUtility.
    ]]></doc>
<argument name="argv" type="NoneType"><value></value>
</argument>
</function>
<function name="setup_environ"><doc><![CDATA[
    Configures the runtime environment. This can also be used by external
    scripts wanting to set up a similar environment to manage.py.
    Returns the project directory (assuming the passed settings module is
    directly in the project directory).

    The "original_settings_path" parameter is optional, but recommended, since
    trying to work out the original path from the module can be problematic.
    ]]></doc>
<argument name="settings_mod"></argument>
<argument name="original_settings_path" type="NoneType"><value></value>
</argument>
</function>
<function name="get_commands"><doc><![CDATA[
    Returns a dictionary mapping command names to their callback applications.

    This works by looking for a management.commands package in django.core, and
    in each installed application -- if a commands package exists, all commands
    in that package are registered.

    Core commands are always included. If a settings module has been
    specified, user-defined commands will also be included, the
    startproject command will be disabled, and the startapp command
    will be modified to use the directory in which the settings module appears.

    The dictionary is in the format {command_name: app_name}. Key-value
    pairs from this dictionary can then be used in calls to
    load_command_class(app_name, command_name)

    If a specific version of a command must be loaded (e.g., with the
    startapp command), the instantiated module can be placed in the
    dictionary in place of the application name.

    The dictionary is cached on the first call and reused on subsequent
    calls.
    ]]></doc>
</function>
<function name="load_command_class"><doc><![CDATA[
    Given a command name and an application name, returns the Command
    class instance. All errors raised by the import process
    (ImportError, AttributeError) are allowed to propagate.
    ]]></doc>
<argument name="app_name"></argument>
<argument name="name"></argument>
</function>
<class name="ManagementUtility"></class>
<class name="LaxOptionParser"></class>
</package>
<package name="django.core.management.sql" file="/django/core/management/sql.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_models" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<function name="sql_delete"><doc><![CDATA[Returns a list of the DROP TABLE SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="custom_sql_for_model"><doc></doc>
<argument name="model"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_reset"><doc><![CDATA[Returns a list of the DROP TABLE SQL, then the CREATE TABLE SQL, for the given module.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_custom"><doc><![CDATA[Returns a list of the custom table modifying SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_all"><doc><![CDATA[Returns a list of CREATE TABLE SQL, initial-data inserts, and CREATE INDEX SQL for the given module.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="emit_post_sync_signal"><doc></doc>
<argument name="created_models"></argument>
<argument name="verbosity"></argument>
<argument name="interactive"></argument>
<argument name="db"></argument>
</function>
<function name="sql_create"><doc><![CDATA[Returns a list of the CREATE TABLE SQL statements for the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
<function name="sql_flush"><doc><![CDATA[
    Returns a list of the SQL statements used to flush the database.

    If only_django is True, then only table names that have associated Django
    models and are in INSTALLED_APPS will be included.
    ]]></doc>
<argument name="style"></argument>
<argument name="connection"></argument>
<argument name="only_django" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="sql_indexes"><doc><![CDATA[Returns a list of the CREATE INDEX SQL statements for all models in the given app.]]></doc>
<argument name="app"></argument>
<argument name="style"></argument>
<argument name="connection"></argument>
</function>
</package>
<package name="django.core.management.validation" file="/django/core/management/validation.pyc"><doc></doc>
<depends name="sys"></depends>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="is_iterable" module="django.utils.itercompat"></import_function>
<function name="get_validation_errors"><doc><![CDATA[
    Validates all models that are part of the specified app. If no app name is provided,
    validates all models of all installed apps. Writes errors, if any, to outfile.
    Returns number of errors.
    ]]></doc>
<argument name="outfile"></argument>
<argument name="app" type="NoneType"><value></value>
</argument>
</function>
<class name="ModelErrorCollection"></class>
</package>
<package name="django.core.management.commands" file="/django/core/management/commands/__init__.pyc"><doc></doc>
</package>
<package name="django.core.management.commands.sqlflush" file="/django/core/management/commands/sqlflush.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_flush" module="django.core.management.sql"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.dbshell" file="/django/core/management/commands/dbshell.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.runfcgi" file="/django/core/management/commands/runfcgi.pyc"><doc></doc>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlcustom" file="/django/core/management/commands/sqlcustom.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_custom" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlall" file="/django/core/management/commands/sqlall.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_all" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.flush" file="/django/core/management/commands/flush.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="call_command" module="django.core.management"></import_function>
<import_function name="emit_post_sync_signal" module="django.core.management.sql"></import_function>
<import_function name="sql_flush" module="django.core.management.sql"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.startproject" file="/django/core/management/commands/startproject.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="random"></depends>
<depends name="os"></depends>
<import_attribute name="choice" type="instancemethod" module="random"></import_attribute>
<import_function name="copy_helper" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlsequencereset" file="/django/core/management/commands/sqlsequencereset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlinitialdata" file="/django/core/management/commands/sqlinitialdata.pyc"><doc></doc>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.shell" file="/django/core/management/commands/shell.pyc"><doc></doc>
<depends name="optparse"></depends>
<depends name="os"></depends>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.loaddata" file="/django/core/management/commands/loaddata.pyc"><doc></doc>
<depends name="bz2"></depends>
<depends name="itertools"></depends>
<depends name="zipfile"></depends>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<depends name="gzip"></depends>
<depends name="os"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="get_apps" type="instancemethod" module="django.db.models.loading"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="product" module="itertools"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<attribute name="has_bz2" type="bool"><value><![CDATA[True]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.serializers" file="/django/core/serializers/__init__.pyc"><doc><![CDATA[
Interfaces for serializing Django objects.

Usage::

    from django.core import serializers
    json = serializers.serialize("json", some_query_set)
    objects = list(serializers.deserialize("json", json))

To add your own serializers, use the SERIALIZATION_MODULES setting::

    SERIALIZATION_MODULES = {
        "csv" : "path.to.csv.serializer",
        "txt" : "path.to.txt.serializer",
    }

]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<attribute name="BUILTIN_SERIALIZERS" type="dict"><value><![CDATA[{'xml': 'django.core.serializers.xml_serializer', 'python': 'django.core.serializers.python', 'json': 'django.core.serializers.json'}]]></value>
</attribute>
<attribute name="_serializers" type="dict"><value></value>
</attribute>
<function name="get_deserializer"><doc></doc>
<argument name="format"></argument>
</function>
<function name="get_serializer"><doc></doc>
<argument name="format"></argument>
</function>
<function name="serialize" kwargs="options"><doc><![CDATA[
    Serialize a queryset (or any iterator that returns database objects) using
    a certain serializer.
    ]]></doc>
<argument name="format"></argument>
<argument name="queryset"></argument>
</function>
<function name="_load_serializers"><doc><![CDATA[
    Register built-in and settings-defined serializers. This is done lazily so
    that user code has a chance to (e.g.) set up custom settings without
    needing to be careful of import order.
    ]]></doc>
</function>
<function name="deserialize" kwargs="options"><doc><![CDATA[
    Deserialize a stream or a string. Returns an iterator that yields ``(obj,
    m2m_relation_dict)``, where ``obj`` is a instantiated -- but *unsaved* --
    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :
    list_of_related_objects}``.
    ]]></doc>
<argument name="format"></argument>
<argument name="stream_or_string"></argument>
</function>
<function name="get_serializer_formats"><doc></doc>
</function>
<function name="unregister_serializer"><doc><![CDATA[Unregister a given serializer. This is not a thread-safe operation.]]></doc>
<argument name="format"></argument>
</function>
<function name="get_public_serializer_formats"><doc></doc>
</function>
<function name="register_serializer"><doc><![CDATA[Register a new serializer.

    ``serializer_module`` should be the fully qualified module name
    for the serializer.

    If ``serializers`` is provided, the registration will be added
    to the provided dictionary.

    If ``serializers`` is not provided, the registration will be made
    directly into the global register of serializers. Adding serializers
    directly is not a thread-safe operation.
    ]]></doc>
<argument name="format"></argument>
<argument name="serializer_module"></argument>
<argument name="serializers" type="NoneType"><value></value>
</argument>
</function>
</package>
<package name="django.core.serializers.xml_serializer" file="/django/core/serializers/xml_serializer.pyc"><doc><![CDATA[
XML serializer.
]]></doc>
<depends name="xml.dom.pulldom"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="SimplerXMLGenerator" module="django.utils.xmlutils"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="getInnerText"><doc><![CDATA[
    Get all the inner text of a DOM node (recursively).
    ]]></doc>
<argument name="node"></argument>
</function>
<class name="Deserializer"></class>
<class name="Serializer"></class>
</package>
<package name="django.core.serializers.base" file="/django/core/serializers/base.pyc"><doc><![CDATA[
Module for abstract serializer/unserializer base classes.
]]></doc>
<depends name="StringIO"></depends>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<import_class name="StringIO" module="StringIO"></import_class>
<class name="DeserializedObject"></class>
<class name="SerializationError"></class>
<class name="Deserializer"></class>
<class name="Serializer"></class>
<class name="DeserializationError"></class>
</package>
<package name="django.core.serializers.json" file="/django/core/serializers/json.pyc"><doc><![CDATA[
Serialize data to/from JSON
]]></doc>
<depends name="decimal"></depends>
<depends name="StringIO"></depends>
<depends name="datetime"></depends>
<import_function name="PythonDeserializer" module="django.core.serializers.python"></import_function>
<import_class name="StringIO" module="StringIO"></import_class>
<import_class name="PythonSerializer" module="django.core.serializers.python"></import_class>
<function name="Deserializer" kwargs="options"><doc><![CDATA[
    Deserialize a stream or string of JSON data.
    ]]></doc>
<argument name="stream_or_string"></argument>
</function>
<class name="DjangoJSONEncoder"></class>
<class name="DateTimeAwareJSONEncoder"></class>
<class name="Serializer"></class>
</package>
<package name="django.core.serializers.python" file="/django/core/serializers/python.pyc"><doc><![CDATA[
A Python "serializer". Doesn't do much serializing per se -- just converts to
and from basic Python data types (lists, dicts, strings, etc.). Useful as a basis for
other serializers.
]]></doc>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="is_protected_type" module="django.utils.encoding"></import_function>
<import_function name="smart_unicode" module="django.utils.encoding"></import_function>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="Deserializer" kwargs="options"><doc><![CDATA[
    Deserialize simple Python objects back into Django ORM instances.

    It's expected that you pass the Python objects themselves (instead of a
    stream or a string) to the constructor
    ]]></doc>
<argument name="object_list"></argument>
</function>
<function name="_get_model"><doc><![CDATA[
    Helper to look up a model from an "app_label.module_name" string.
    ]]></doc>
<argument name="model_identifier"></argument>
</function>
<class name="Serializer"></class>
</package>
<package name="django.core.serializers.pyyaml" file="" error="No module named yaml"></package>
<package name="django.core.management.commands.compilemessages" file="/django/core/management/commands/compilemessages.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<depends name="codecs"></depends>
<depends name="os"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<function name="has_bom"><doc></doc>
<argument name="fn"></argument>
</function>
<function name="compile_messages"><doc></doc>
<argument name="stderr"></argument>
<argument name="locale" type="NoneType"><value></value>
</argument>
</function>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.diffsettings" file="/django/core/management/commands/diffsettings.pyc"><doc></doc>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<function name="module_to_dict"><doc><![CDATA[Converts a module namespace to a Python dictionary. Used by get_settings_diff.]]></doc>
<argument name="module"></argument>
<argument name="omittable" type="function"><value><![CDATA[<function <lambda> at 0xa1c009c>]]></value>
</argument>
</function>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.createcachetable" file="/django/core/management/commands/createcachetable.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.validate" file="/django/core/management/commands/validate.pyc"><doc></doc>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.reset" file="/django/core/management/commands/reset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_reset" module="django.core.management.sql"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.dumpdata" file="/django/core/management/commands/dumpdata.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<function name="sort_dependencies"><doc><![CDATA[Sort a list of app,modellist pairs into a single list of models.

    The single list of models is sorted so that any model with a natural key
    is serialized before a normal model, and any model with a natural key
    dependency has it's dependencies serialized first.
    ]]></doc>
<argument name="app_list"></argument>
</function>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.test" file="/django/core/management/commands/test.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlclear" file="/django/core/management/commands/sqlclear.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_delete" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlreset" file="/django/core/management/commands/sqlreset.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_reset" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.runserver" file="/django/core/management/commands/runserver.pyc"><doc></doc>
<depends name="socket"></depends>
<depends name="sys"></depends>
<depends name="re"></depends>
<depends name="optparse"></depends>
<depends name="os"></depends>
<import_function name="run" module="django.core.servers.basehttp"></import_function>
<import_class name="AdminMediaHandler" module="django.core.servers.basehttp"></import_class>
<import_class name="WSGIServerException" module="django.core.servers.basehttp"></import_class>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="WSGIHandler" module="django.core.handlers.wsgi"></import_class>
<attribute name="naiveip_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa242288>]]></value>
</attribute>
<attribute name="DEFAULT_PORT" type="str"><value><![CDATA[8000]]></value>
</attribute>
<class name="Command"></class>
<class name="BaseRunserverCommand"></class>
</package>
<package name="django.core.handlers.wsgi" file="/django/core/handlers/wsgi.pyc"><doc></doc>
<depends name="logging"></depends>
<depends name="sys"></depends>
<depends name="socket"></depends>
<depends name="cStringIO"></depends>
<depends name="thread"></depends>
<depends name="pprint"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_attribute name="StringIO" type="builtin_function_or_method" module="cStringIO"></import_attribute>
<import_attribute name="Lock" type="builtin_function_or_method" module="thread"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="iri_to_uri" module="django.utils.encoding"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="pformat" module="pprint"></import_function>
<import_function name="set_script_prefix" module="django.core.urlresolvers"></import_function>
<attribute name="STATUS_CODE_TEXT" type="dict"><value><![CDATA[{200: 'OK', 201: 'CREATED', 202: 'ACCEPTED', 203: 'NON-AUTHORITATIVE INFORMATION', 204: 'NO CONTENT', 205: 'RESET CONTENT', 206: 'PARTIAL CONTENT', 400: 'BAD REQUEST', 401: 'UNAUTHORIZED', 402: 'PAYMENT REQUIRED', 403: 'FORBIDDEN', 404: 'NOT FOUND', 405: 'METHOD NOT ALLOWED', 406: 'NOT ACCEPTABLE', 407: 'PROXY AUTHENTICATION REQUIRED', 408: 'REQUEST TIMEOUT', 409: 'CONFLICT', 410: 'GONE', 411: 'LENGTH REQUIRED', 412: 'PRECONDITION FAILED', 413: 'REQUEST ENTITY TOO LARGE', 414: 'REQUEST-URI TOO LONG', 415: 'UNSUPPORTED MEDIA TYPE', 416: 'REQUESTED RANGE NOT SATISFIABLE', 417: 'EXPECTATION FAILED', 100: 'CONTINUE', 101: 'SWITCHING PROTOCOLS', 300: 'MULTIPLE CHOICES', 301: 'MOVED PERMANENTLY', 302: 'FOUND', 303: 'SEE OTHER', 304: 'NOT MODIFIED', 305: 'USE PROXY', 306: 'RESERVED', 307: 'TEMPORARY REDIRECT', 500: 'INTERNAL SERVER ERROR', 501: 'NOT IMPLEMENTED', 502: 'BAD GATEWAY', 503: 'SERVICE UNAVAILABLE', 504: 'GATEWAY TIMEOUT', 505: 'HTTP VERSION NOT SUPPORTED'}]]></value>
</attribute>
<class name="LimitedStream"></class>
<class name="WSGIRequest"></class>
<class name="WSGIHandler"></class>
</package>
<package name="django.core.handlers.base" file="/django/core/handlers/base.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="logging"></depends>
<import_attribute name="logger" type="Logger" module="logging"></import_attribute>
<import_function name="force_unicode" module="django.utils.encoding"></import_function>
<import_function name="getLogger" module="logging"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<function name="get_script_name"><doc><![CDATA[
    Returns the equivalent of the HTTP request's SCRIPT_NAME environment
    variable. If Apache mod_rewrite has been used, returns what would have been
    the script name prior to any rewriting (so it's the script name as seen
    from the client's perspective), unless DJANGO_USE_POST_REWRITE is set (to
    anything).
    ]]></doc>
<argument name="environ"></argument>
</function>
<class name="BaseHandler"></class>
</package>
<package name="django.core.servers.basehttp" version="0.1" file="/django/core/servers/basehttp.pyc"><doc><![CDATA[
BaseHTTPServer that implements the Python WSGI protocol (PEP 333, rev 1.21).

Adapted from wsgiref.simple_server: http://svn.eby-sarna.com/wsgiref/

This is a simple server for use in testing or debugging Django apps. It hasn't
been reviewed for security issues. Don't use it for production use.
]]></doc>
<depends name="urllib"></depends>
<depends name="re"></depends>
<depends name="BaseHTTPServer"></depends>
<depends name="warnings"></depends>
<depends name="sys"></depends>
<depends name="socket"></depends>
<depends name="os"></depends>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_class name="HTTPServer" module="BaseHTTPServer"></import_class>
<import_class name="BaseHTTPRequestHandler" module="BaseHTTPServer"></import_class>
<attribute name="_hop_headers" type="dict"><value><![CDATA[{'trailers': 1, 'transfer-encoding': 1, 'connection': 1, 'proxy-authorization': 1, 'proxy-authenticate': 1, 'te': 1, 'upgrade': 1, 'keep-alive': 1}]]></value>
</attribute>
<attribute name="__all__" type="list"><value><![CDATA[['WSGIServer', 'WSGIRequestHandler']]]></value>
</attribute>
<attribute name="tspecials" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa1bb700>]]></value>
</attribute>
<attribute name="__version__" type="str"><value><![CDATA[0.1]]></value>
</attribute>
<attribute name="software_version" type="str"><value><![CDATA[WSGIServer/0.1 Python/2.7.1+]]></value>
</attribute>
<attribute name="server_version" type="str"><value><![CDATA[WSGIServer/0.1]]></value>
</attribute>
<attribute name="sys_version" type="str"><value><![CDATA[Python/2.7.1+]]></value>
</attribute>
<function name="_formatparam"><doc><![CDATA[Convenience function to format and return a key=value pair.

    This will quote the value if needed or if quote is true.
    ]]></doc>
<argument name="param"></argument>
<argument name="value" type="NoneType"><value></value>
</argument>
<argument name="quote" type="int"><value><![CDATA[1]]></value>
</argument>
</function>
<function name="run"><doc></doc>
<argument name="addr"></argument>
<argument name="port"></argument>
<argument name="wsgi_handler"></argument>
<argument name="ipv6" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="guess_scheme"><doc><![CDATA[Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'
    ]]></doc>
<argument name="environ"></argument>
</function>
<function name="is_hop_by_hop"><doc><![CDATA[Return true if 'header_name' is an HTTP/1.1 "Hop-by-Hop" header]]></doc>
<argument name="header_name"></argument>
</function>
<class name="WSGIServerException"></class>
<class name="ServerHandler"></class>
<class name="Headers"></class>
<class name="FileWrapper"></class>
<class name="AdminMediaHandler"></class>
<class name="WSGIRequestHandler"></class>
<class name="WSGIServer"></class>
</package>
<package name="django.contrib.staticfiles.handlers" file="/django/contrib/staticfiles/handlers.pyc"><doc></doc>
<depends name="urllib"></depends>
<depends name="urlparse"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="serve" module="django.contrib.staticfiles.views"></import_function>
<import_function name="urlparse" module="urlparse"></import_function>
<import_class name="WSGIHandler" module="django.core.handlers.wsgi"></import_class>
<class name="StaticFilesHandler"></class>
</package>
<package name="django.contrib.staticfiles.utils" file="/django/contrib/staticfiles/utils.pyc"><doc></doc>
<depends name="fnmatch"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<function name="get_files"><doc><![CDATA[
    Recursively walk the storage directories yielding the paths
    of all files that should be copied.
    ]]></doc>
<argument name="storage"></argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
<argument name="location" type="str"><value></value>
</argument>
</function>
<function name="is_ignored"><doc><![CDATA[
    Return True or False depending on whether the ``path`` should be
    ignored (if it matches any pattern in ``ignore_patterns``).
    ]]></doc>
<argument name="path"></argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
</function>
<function name="check_settings"><doc><![CDATA[
    Checks if the staticfiles settings have sane values.

    ]]></doc>
</function>
</package>
<package name="django.contrib.staticfiles.views" file="/django/contrib/staticfiles/views.pyc"><doc><![CDATA[
Views and functions for serving static files. These are only to be used during
development, and SHOULD NOT be used in a production setting.

]]></doc>
<depends name="posixpath"></depends>
<depends name="urllib"></depends>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<function name="serve" kwargs="kwargs"><doc><![CDATA[
    Serve static files below a given point in the directory structure or
    from locations inferred from the staticfiles finders.

    To use, put a URL pattern such as::

        (r'^(?P<path>.*)$', 'django.contrib.staticfiles.views.serve')

    in your URLconf.

    It uses the django.views.static view to serve the found files.
    ]]></doc>
<argument name="request"></argument>
<argument name="path"></argument>
<argument name="document_root" type="NoneType"><value></value>
</argument>
<argument name="insecure" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.contrib.staticfiles.finders" file="/django/contrib/staticfiles/finders.pyc"><doc></doc>
<depends name="os"></depends>
<import_attribute name="default_storage" type="DefaultStorage" module="django.core.files.storage"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="_finders" type="SortedDict" module="django.utils.datastructures"></import_attribute>
<import_function name="memoize" module="django.utils.functional"></import_function>
<import_function name="safe_join" module="django.utils._os"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="FileSystemStorage" module="django.core.files.storage"></import_class>
<import_class name="Storage" module="django.core.files.storage"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="AppStaticStorage" module="django.contrib.staticfiles.storage"></import_class>
<import_class name="LazyObject" module="django.utils.functional"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<function name="_get_finder"><doc><![CDATA[
    Imports the staticfiles finder class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
<argument name="import_path"></argument>
</function>
<function name="find"><doc><![CDATA[
    Find a static file with the given path using all enabled finders.

    If ``all`` is ``False`` (default), return the first matching
    absolute path (or ``None`` if no match). Otherwise return a list.
    ]]></doc>
<argument name="path"></argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="get_finder" args="args"><doc><![CDATA[
    Imports the staticfiles finder class described by import_path, where
    import_path is the full Python path to the class.
    ]]></doc>
</function>
<function name="get_finders"><doc></doc>
</function>
<class name="BaseStorageFinder"></class>
<class name="BaseFinder"></class>
<class name="FileSystemFinder"></class>
<class name="AppDirectoriesFinder"></class>
<class name="DefaultStorageFinder"></class>
</package>
<package name="django.contrib.staticfiles.storage" file="/django/contrib/staticfiles/storage.pyc"><doc></doc>
<depends name="os"></depends>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="FileSystemStorage" module="django.core.files.storage"></import_class>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<class name="StaticFilesStorage"></class>
<class name="AppStaticStorage"></class>
</package>
<package name="django.views.static" file="/django/views/static.pyc"><doc><![CDATA[
Views and functions for serving static files. These are only to be used
during development, and SHOULD NOT be used in a production setting.
]]></doc>
<depends name="posixpath"></depends>
<depends name="urllib"></depends>
<depends name="re"></depends>
<depends name="mimetypes"></depends>
<depends name="os"></depends>
<import_function name="http_date" module="django.utils.http"></import_function>
<import_function name="parse_http_date" module="django.utils.http"></import_function>
<import_class name="HttpResponseNotModified" module="django.http"></import_class>
<import_class name="Template" module="django.template.base"></import_class>
<import_class name="HttpResponse" module="django.http"></import_class>
<import_class name="Context" module="django.template.context"></import_class>
<import_class name="Http404" module="django.http"></import_class>
<import_class name="HttpResponseRedirect" module="django.http"></import_class>
<import_class name="TemplateDoesNotExist" module="django.template.base"></import_class>
<attribute name="DEFAULT_DIRECTORY_INDEX_TEMPLATE" type="str"><value><![CDATA[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="en-us" />
    <meta name="robots" content="NONE,NOARCHIVE" />
    <title>Index of {{ directory }}</title>
  </head>
  <body>
    <h1>Index of {{ directory }}</h1>
    <ul>
      {% ifnotequal directory "/" %}
      <li><a href="../">../</a></li>
      {% endifnotequal %}
      {% for f in file_list %}
      <li><a href="{{ f|urlencode }}">{{ f }}</a></li>
      {% endfor %}
    </ul>
  </body>
</html>
]]></value>
</attribute>
<function name="was_modified_since"><doc><![CDATA[
    Was something modified since the user last downloaded it?

    header
      This is the value of the If-Modified-Since header.  If this is None,
      I'll just return True.

    mtime
      This is the modification time of the item we're talking about.

    size
      This is the size of the item we're talking about.
    ]]></doc>
<argument name="header" type="NoneType"><value></value>
</argument>
<argument name="mtime" type="int"><value></value>
</argument>
<argument name="size" type="int"><value></value>
</argument>
</function>
<function name="directory_index"><doc></doc>
<argument name="path"></argument>
<argument name="fullpath"></argument>
</function>
<function name="serve"><doc><![CDATA[
    Serve static files below a given point in the directory structure.

    To use, put a URL pattern such as::

        (r'^(?P<path>.*)$', 'django.views.static.serve', {'document_root' : '/path/to/my/files/'})

    in your URLconf. You must provide the ``document_root`` param. You may
    also set ``show_indexes`` to ``True`` if you'd like to serve a basic index
    of the directory.  This index view will use the template hardcoded below,
    but if you'd like to override it, you can create a template called
    ``static/directory_index.html``.
    ]]></doc>
<argument name="request"></argument>
<argument name="path"></argument>
<argument name="document_root" type="NoneType"><value></value>
</argument>
<argument name="show_indexes" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
</package>
<package name="django.core.management.commands.inspectdb" file="/django/core/management/commands/inspectdb.pyc"><doc></doc>
<depends name="keyword"></depends>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.cleanup" file="/django/core/management/commands/cleanup.pyc"><doc></doc>
<depends name="datetime"></depends>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sql" file="/django/core/management/commands/sql.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_create" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.sqlindexes" file="/django/core/management/commands/sqlindexes.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_function name="sql_indexes" module="django.core.management.sql"></import_function>
<import_class name="AppCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.makemessages" file="/django/core/management/commands/makemessages.pyc"><doc></doc>
<depends name="re"></depends>
<depends name="itertools"></depends>
<depends name="glob"></depends>
<depends name="subprocess"></depends>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<depends name="fnmatch"></depends>
<depends name="os"></depends>
<import_function name="get_text_list" module="django.utils.text"></import_function>
<import_class name="dropwhile" module="itertools"></import_class>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="Popen" module="subprocess"></import_class>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="PIPE" type="int"><value><![CDATA[-1]]></value>
</attribute>
<attribute name="plural_forms_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa24f2e8>]]></value>
</attribute>
<attribute name="pythonize_re" type="SRE_Pattern"><value><![CDATA[<_sre.SRE_Pattern object at 0xa20e2e0>]]></value>
</attribute>
<function name="walk"><doc><![CDATA[
    A version of os.walk that can follow symlinks for Python < 2.6
    ]]></doc>
<argument name="root"></argument>
<argument name="topdown" type="bool"><value><![CDATA[True]]></value>
</argument>
<argument name="onerror" type="NoneType"><value></value>
</argument>
<argument name="followlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="make_messages"><doc><![CDATA[
    Uses the locale directory from the Django SVN tree or an application/
    project to process all
    ]]></doc>
<argument name="locale" type="NoneType"><value></value>
</argument>
<argument name="domain" type="str"><value><![CDATA[django]]></value>
</argument>
<argument name="verbosity" type="str"><value><![CDATA[1]]></value>
</argument>
<argument name="all" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="extensions" type="NoneType"><value></value>
</argument>
<argument name="symlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="ignore_patterns" type="list"><value></value>
</argument>
<argument name="no_wrap" type="bool"><value><![CDATA[False]]></value>
</argument>
<argument name="no_obsolete" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<function name="is_ignored"><doc><![CDATA[
    Helper function to check if the given path should be ignored or not.
    ]]></doc>
<argument name="path"></argument>
<argument name="ignore_patterns"></argument>
</function>
<function name="handle_extensions"><doc><![CDATA[
    organizes multiple extensions that are separated with commas or passed by
    using --extension/-e multiple times.

    for example: running 'django-admin makemessages -e js,txt -e xhtml -a'
    would result in a extension list: ['.js', '.txt', '.xhtml']

    >>> handle_extensions(['.html', 'html,js,py,py,py,.py', 'py,.py'])
    ['.html', '.js']
    >>> handle_extensions(['.html, txt,.tpl'])
    ['.html', '.tpl', '.txt']
    ]]></doc>
<argument name="extensions" type="tuple"><value><![CDATA[('html',)]]></value>
</argument>
</function>
<function name="copy_plural_forms"><doc><![CDATA[
    Copies plural forms header contents from a Django catalog of locale to
    the msgs string, inserting it at the right place. msgs should be the
    contents of a newly created .po file.
    ]]></doc>
<argument name="msgs"></argument>
<argument name="locale"></argument>
<argument name="domain"></argument>
<argument name="verbosity"></argument>
</function>
<function name="_popen"><doc><![CDATA[
    Friendly wrapper around Popen for Windows
    ]]></doc>
<argument name="cmd"></argument>
</function>
<function name="find_files"><doc><![CDATA[
    Helper function to get all files in the given root.
    ]]></doc>
<argument name="root"></argument>
<argument name="ignore_patterns"></argument>
<argument name="verbosity"></argument>
<argument name="symlinks" type="bool"><value><![CDATA[False]]></value>
</argument>
</function>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.testserver" file="/django/core/management/commands/testserver.pyc"><doc></doc>
<depends name="optparse"></depends>
<import_class name="BaseCommand" module="django.core.management.base"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.syncdb" file="/django/core/management/commands/syncdb.pyc"><doc></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<import_attribute name="connections" type="ConnectionHandler" module="django.db.utils"></import_attribute>
<import_attribute name="settings" type="LazySettings" module="django.conf"></import_attribute>
<import_attribute name="router" type="ConnectionRouter" module="django.db.utils"></import_attribute>
<import_function name="custom_sql_for_model" module="django.core.management.sql"></import_function>
<import_function name="emit_post_sync_signal" module="django.core.management.sql"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_function name="no_style" module="django.core.management.color"></import_function>
<import_class name="NoArgsCommand" module="django.core.management.base"></import_class>
<import_class name="SortedDict" module="django.utils.datastructures"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<attribute name="DEFAULT_DB_ALIAS" type="str"><value><![CDATA[default]]></value>
</attribute>
<class name="Command"></class>
</package>
<package name="django.core.management.commands.startapp" file="/django/core/management/commands/startapp.pyc"><doc></doc>
<depends name="os"></depends>
<import_function name="copy_helper" module="django.core.management.base"></import_function>
<import_function name="import_module" module="django.utils.importlib"></import_function>
<import_class name="CommandError" module="django.core.management.base"></import_class>
<import_class name="LabelCommand" module="django.core.management.base"></import_class>
<class name="ProjectCommand"></class>
<class name="Command"></class>
</package>
<package name="django.core.management.base" file="/django/core/management/base.pyc"><doc><![CDATA[
Base classes for writing management commands (named commands which can
be executed through ``django-admin.py`` or ``manage.py``).

]]></doc>
<depends name="sys"></depends>
<depends name="optparse"></depends>
<depends name="os"></depends>
<import_function name="color_style" module="django.core.management.color"></import_function>
<import_function name="smart_str" module="django.utils.encoding"></import_function>
<import_class name="ImproperlyConfigured" module="django.core.exceptions"></import_class>
<import_class name="make_option" module="optparse"></import_class>
<import_class name="OptionParser" module="optparse"></import_class>
<function name="_make_writeable"><doc><![CDATA[
    Make sure that the file is writeable. Useful if our source is
    read-only.

    ]]></doc>
<argument name="filename"></argument>
</function>
<function name="handle_default_options"><doc><![CDATA[
    Include any default options that all commands should accept here
    so that ManagementUtility can handle them before searching for
    user commands.

    ]]></doc>
<argument name="options"></argument>
</function>
<function name="copy_helper"><doc><![CDATA[
    Copies either a Django application layout template or a Django project
    layout template into the specified directory.

    ]]></doc>
<argument name="style"></argument>
<argument name="app_or_project"></argument>
<argument name="name"></argument>
<argument name="directory"></argument>
<argument name="other_name" type="str"><value></value>
</argument>
</function>
<class name="BaseCommand"></class>
<class name="AppCommand"></class>
<class name="CommandError"></class>
<class name="LabelCommand"></class>
<class name="NoArgsCommand"></class>
</package>
<package name="django.core.management.color" file="/django/core/management/color.pyc"><doc><![CDATA[
Sets up the terminal color scheme.
]]></doc>
<depends name="sys"></depends>
<depends name="os"></depends>
<function name="supports_color"><doc><![CDATA[
    Returns True if the running system's terminal supports color, and False
    otherwise.
    ]]></doc>
</function>
<function name="color_style"><doc><![CDATA[Returns a Style object with the Django color scheme.]]></doc>
</function>
<function name="no_style"><doc><![CDATA[Returns a Style object that has no colors.]]></doc>
</function>
</package>
<package name="django.core.files" file="/django/core/files/__init__.pyc"><doc></doc>
<import_class name="File" module="django.core.files.base"></import_class>
</package>
</dox:ipython_ru>
